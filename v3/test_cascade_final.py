#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Cascade_Analyzer_Final.
"""

import asyncio
import logging
from core.cascade_analyzer import CascadeAnalyzer
from core.multi_timeframe_analyzer_enhanced import EnhancedMultiTimeframeStockAnalyzer
from core.ml import create_fallback_ml_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_cascade_analyzer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    try:
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cascade Analyzer...")
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        multi_analyzer = EnhancedMultiTimeframeStockAnalyzer(api_key=None)
        ml_manager = create_fallback_ml_manager()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        cascade_analyzer = CascadeAnalyzer(
            multi_analyzer=multi_analyzer,
            ml_manager=ml_manager,
            demo_trading=None
        )
        
        print("‚úÖ Cascade Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
        available_symbols = cascade_analyzer.get_available_symbols_with_1d_data()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(available_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ 1d")
        
        if not available_symbols:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ")
            available_symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN']
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π ML –∞–Ω–∞–ª–∏–∑
        print("ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ ML –∞–Ω–∞–ª–∏–∑–∞...")
        ml_results = await cascade_analyzer.perform_initial_ml_analysis(available_symbols[:5])
        print(f"‚úÖ ML –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {len(ml_results)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ML –∞–Ω–∞–ª–∏–∑–∞
        if ml_results:
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ML –∞–Ω–∞–ª–∏–∑–∞:")
            for symbol, signals in ml_results.items():
                print(f"  {symbol}: {signals.get('ml_ensemble_signal', 'HOLD')} "
                      f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signals.get('ml_price_confidence', 0):.1%})")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        promising_symbols = []
        for symbol, signals in ml_results.items():
            ensemble_signal = signals.get('ml_ensemble_signal', 'HOLD')
            confidence = signals.get('ml_price_confidence', 0)
            if ensemble_signal in ['BUY', 'STRONG_BUY', 'SELL', 'STRONG_SELL'] and confidence >= 0.5:
                promising_symbols.append(symbol)
        
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ {len(promising_symbols)} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {promising_symbols}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if promising_symbols:
            print("\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            cascade_results = await cascade_analyzer.analyze_multiple_symbols(promising_symbols[:3])
            
            successful_results = cascade_analyzer.get_successful_signals(cascade_results)
            rejected_results = cascade_analyzer.get_rejected_signals(cascade_results)
            
            print(f"‚úÖ –ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
            print(f"  - –£—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(successful_results)}")
            print(f"  - –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(rejected_results)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if successful_results:
                print("\nüéØ –£—Å–ø–µ—à–Ω—ã–µ –∫–∞—Å–∫–∞–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
                for result in successful_results:
                    print(f"  {result.symbol}: {result.final_signal} "
                          f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%}, "
                          f"—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: {result.entry_price:.2f} RUB)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if rejected_results:
                print("\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
                for result in rejected_results:
                    print(f"  {result.symbol}: –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ {result.rejected_at_stage} "
                          f"({result.rejection_reason})")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_cascade_analyzer())




