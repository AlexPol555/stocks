#!/usr/bin/env python3
"""
Fix Cascade Analyzer data issues.
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –∫–∞—Å–∫–∞–¥–Ω–æ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ.
"""

import sqlite3
from pathlib import Path

def fix_daily_data():
    """–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ daily_data –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    
    db_path = Path("stock_data.db")
    if not db_path.exists():
        print("Database not found!")
        return
    
    symbols = ['VSMO', 'UNAC', 'CNRU', 'VKCO', 'MGNT']
    
    try:
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        print("Adding daily_data entries for symbols...")
        
        for symbol in symbols:
            # –ü–æ–ª—É—á–∞–µ–º company_id
            cursor.execute("SELECT id FROM companies WHERE ticker = ?", (symbol,))
            company = cursor.fetchone()
            if not company:
                print(f"  ERROR {symbol}: Company not found")
                continue
            
            company_id = company[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute("SELECT COUNT(*) FROM daily_data WHERE company_id = ?", (company_id,))
            count = cursor.fetchone()[0]
            
            if count > 0:
                print(f"  OK {symbol}: Already has {count} daily_data entries")
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –¥–Ω–µ–π
            print(f"  ADDING {symbol}: Adding daily_data entries...")
            
            from datetime import datetime, timedelta
            today = datetime.now().date()
            
            for i in range(30):  # 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
                date = today - timedelta(days=i)
                
                cursor.execute("""
                    INSERT OR IGNORE INTO daily_data 
                    (company_id, date, open, close, high, low, volume)
                    VALUES (?, ?, NULL, NULL, NULL, NULL, NULL)
                """, (company_id, date))
            
            print(f"  OK {symbol}: Added 30 daily_data entries")
        
        conn.commit()
        conn.close()
        print("Daily data entries added successfully!")
        
    except Exception as e:
        print(f"Error: {e}")

def check_fix():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."""
    
    db_path = Path("stock_data.db")
    
    try:
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        symbols = ['VSMO', 'UNAC', 'CNRU', 'VKCO', 'MGNT']
        
        print("\nChecking fix results:")
        for symbol in symbols:
            cursor.execute("""
                SELECT COUNT(*) FROM daily_data dd 
                JOIN companies c ON dd.company_id = c.id 
                WHERE c.ticker = ?
            """, (symbol,))
            count = cursor.fetchone()[0]
            if count > 0:
                print(f"  OK {symbol}: {count} daily_data entries")
            else:
                print(f"  ERROR {symbol}: Still no data")
        
        conn.close()
        
    except Exception as e:
        print(f"Error checking: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    print("Fixing Cascade Analyzer data issues")
    print("=" * 50)
    
    fix_daily_data()
    check_fix()
    
    print("\nüí° Next steps:")
    print("1. Run auto_update.py to populate with real data")
    print("2. Test cascade analyzer again")
    print("3. Check Tinkoff API key if data still missing")

if __name__ == "__main__":
    main()
