#!/usr/bin/env python3
"""
Integrated Cascade Analyzer Page.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
"""

import streamlit as st
import pandas as pd
from datetime import datetime
from typing import Dict, List, Any
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Integrated Cascade Analyzer",
    page_icon="üéØ",
    layout="wide"
)

st.title("üéØ Integrated Cascade Analyzer")
st.markdown("**–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é**")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
@st.cache_resource
def initialize_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    try:
        from core.cascade_analyzer import CascadeAnalyzer
        from core.cascade_analyzer_enhanced import EnhancedCascadeAnalyzer
        from core.cascade_notifications import CascadeNotificationManager
        from core.multi_timeframe_analyzer_enhanced import EnhancedMultiTimeframeStockAnalyzer
        from core.notifications import NotificationManager
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        api_key = None
        if hasattr(st, 'secrets') and hasattr(st.secrets, 'TINKOFF_API_KEY'):
            api_key = st.secrets.TINKOFF_API_KEY
        elif 'tinkoff_api_key' in st.session_state:
            api_key = st.session_state.tinkoff_api_key
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        multi_analyzer = EnhancedMultiTimeframeStockAnalyzer(api_key=api_key)
        cascade_analyzer = CascadeAnalyzer(
            multi_analyzer=multi_analyzer,
            ml_manager=st.session_state.get('ml_manager'),
            demo_trading=st.session_state.get('demo_trading')
        )
        enhanced_analyzer = EnhancedCascadeAnalyzer(cascade_analyzer)
        notification_manager = NotificationManager()
        cascade_notifications = CascadeNotificationManager(notification_manager)
        
        return enhanced_analyzer, cascade_notifications, True
        
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é: {e}")
        return None, None, False

# –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è fallback
class SimpleStage1dResult:
    """–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 1d."""
    
    def __init__(self, symbol: str, signal: str, confidence: float, ensemble_signal: str, price_signal: str):
        self.symbol = symbol
        self.signal = signal
        self.confidence = confidence
        self.ensemble_signal = ensemble_signal
        self.price_signal = price_signal
        self.timestamp = datetime.now()
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'symbol': self.symbol,
            'signal': self.signal,
            'confidence': self.confidence,
            'ensemble_signal': self.ensemble_signal,
            'price_signal': self.price_signal,
            'timestamp': self.timestamp.isoformat()
        }

class SimpleIntegratedAnalyzer:
    """–ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    
    def __init__(self):
        self.stage1d_cache = {}
        
    def prefilter_symbols_stage1d(self, symbols: List[str]) -> Dict[str, SimpleStage1dResult]:
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —ç—Ç–∞–ø—É 1d."""
        results = {}
        
        for symbol in symbols:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if symbol in self.stage1d_cache:
                cache_result = self.stage1d_cache[symbol]
                if (datetime.now() - cache_result.timestamp).seconds < 3600:
                    results[symbol] = cache_result
                    continue
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ ML —Å–∏–≥–Ω–∞–ª–æ–≤
            if symbol in ['SBER', 'GAZP', 'LKOH', 'MGNT', 'NLMK']:
                signal = 'BUY'
                confidence = 0.75
                ensemble_signal = 'BUY'
                price_signal = 'BUY'
            elif symbol in ['NVTK', 'ROSN', 'YNDX', 'VKCO']:
                signal = 'SELL'
                confidence = 0.70
                ensemble_signal = 'SELL'
                price_signal = 'SELL'
            else:
                signal = 'HOLD'
                confidence = 0.45
                ensemble_signal = 'HOLD'
                price_signal = 'HOLD'
            
            result = SimpleStage1dResult(
                symbol=symbol,
                signal=signal,
                confidence=confidence,
                ensemble_signal=ensemble_signal,
                price_signal=price_signal
            )
            
            self.stage1d_cache[symbol] = result
            results[symbol] = result
        
        return results
    
    def get_passed_symbols(self, stage1d_results: Dict[str, SimpleStage1dResult]) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ—à–µ–¥—à–∏–µ —ç—Ç–∞–ø 1d."""
        return [symbol for symbol, result in stage1d_results.items() 
                if result.signal in ['BUY', 'SELL'] and result.confidence >= 0.6]
    
    def get_buy_candidates(self, stage1d_results: Dict[str, SimpleStage1dResult]) -> List[SimpleStage1dResult]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É."""
        return [result for result in stage1d_results.values() 
                if result.signal == 'BUY' and result.confidence >= 0.6]
    
    def get_sell_candidates(self, stage1d_results: Dict[str, SimpleStage1dResult]) -> List[SimpleStage1dResult]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É."""
        return [result for result in stage1d_results.values() 
                if result.signal == 'SELL' and result.confidence >= 0.6]
    
    def get_top_candidates(self, stage1d_results: Dict[str, SimpleStage1dResult], limit: int = 20) -> List[SimpleStage1dResult]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏."""
        candidates = [result for result in stage1d_results.values() 
                     if result.signal in ['BUY', 'SELL'] and result.confidence >= 0.6]
        
        candidates.sort(key=lambda x: x.confidence, reverse=True)
        return candidates[:limit]
    
    def analyze_prefiltered_symbols(self, symbols: List[str]) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        results = []
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        simulation_data = {
            'SBER': {'signal': 'BUY', 'confidence': 0.85, 'entry': 250.50, 'sl': 245.00, 'tp': 260.00, 'rr': 2.0},
            'GAZP': {'signal': 'BUY', 'confidence': 0.80, 'entry': 180.25, 'sl': 175.00, 'tp': 190.00, 'rr': 1.9},
            'LKOH': {'signal': 'BUY', 'confidence': 0.75, 'entry': 6200.00, 'sl': 6100.00, 'tp': 6400.00, 'rr': 2.0},
            'MGNT': {'signal': 'BUY', 'confidence': 0.72, 'entry': 5200.00, 'sl': 5100.00, 'tp': 5400.00, 'rr': 2.0},
            'NLMK': {'signal': 'BUY', 'confidence': 0.70, 'entry': 150.00, 'sl': 145.00, 'tp': 160.00, 'rr': 2.0},
            'NVTK': {'signal': 'SELL', 'confidence': 0.78, 'entry': 1800.00, 'sl': 1850.00, 'tp': 1700.00, 'rr': 3.0},
            'ROSN': {'signal': 'SELL', 'confidence': 0.75, 'entry': 550.00, 'sl': 570.00, 'tp': 520.00, 'rr': 1.7},
            'YNDX': {'signal': 'SELL', 'confidence': 0.70, 'entry': 2800.00, 'sl': 2900.00, 'tp': 2600.00, 'rr': 2.0},
            'VKCO': {'signal': 'SELL', 'confidence': 0.68, 'entry': 450.00, 'sl': 470.00, 'tp': 420.00, 'rr': 2.0},
        }
        
        for symbol in symbols:
            if symbol in simulation_data:
                data = simulation_data[symbol]
                result = {
                    'symbol': symbol,
                    'final_signal': data['signal'],
                    'confidence': data['confidence'],
                    'entry_price': data['entry'],
                    'stop_loss': data['sl'],
                    'take_profit': data['tp'],
                    'risk_reward': data['rr'],
                    'auto_trade_enabled': True
                }
            else:
                result = {
                    'symbol': symbol,
                    'final_signal': None,
                    'confidence': 0.0,
                    'entry_price': 0.0,
                    'stop_loss': 0.0,
                    'take_profit': 0.0,
                    'risk_reward': 0.0,
                    'auto_trade_enabled': False,
                    'rejection_reason': 'Failed at stage 1h'
                }
            
            results.append(result)
        
        return results
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–∞ 1d."""
        self.stage1d_cache.clear()
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞."""
        total = len(self.stage1d_cache)
        passed = len([r for r in self.stage1d_cache.values() if r.signal in ['BUY', 'SELL']])
        buy_signals = len([r for r in self.stage1d_cache.values() if r.signal == 'BUY'])
        sell_signals = len([r for r in self.stage1d_cache.values() if r.signal == 'SELL'])
        
        return {
            'total_cached': total,
            'passed_stage1d': passed,
            'buy_signals': buy_signals,
            'sell_signals': sell_signals,
            'cache_hit_rate': f"{passed/total*100:.1f}%" if total > 0 else "0%"
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
enhanced_analyzer, cascade_notifications, full_version = initialize_components()

if not full_version:
    st.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
    enhanced_analyzer = SimpleIntegratedAnalyzer()

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
tab1, tab2, tab3, tab4 = st.tabs(["üéØ –ê–Ω–∞–ª–∏–∑", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ"])

with tab1:
    st.header("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —ç—Ç–∞–ø—É 1d (ML —Å–∏–≥–Ω–∞–ª—ã)")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å ML —Ñ–∏–ª—å—Ç—Ä", type="primary"):
            enhanced_analyzer.clear_cache()
            if 'stage1d_results' in st.session_state:
                del st.session_state.stage1d_results
            st.rerun()
    
    with col2:
        if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
            stats = enhanced_analyzer.get_cache_stats()
            st.json(stats)
    
    with col3:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"):
            enhanced_analyzer.clear_cache()
            st.success("–ö—ç—à –æ—á–∏—â–µ–Ω")
    
    with col4:
        if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç"):
            if 'stage1d_results' in st.session_state:
                results_df = pd.DataFrame([r.to_dict() for r in st.session_state.stage1d_results.values()])
                csv = results_df.to_csv(index=False)
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                    data=csv,
                    file_name=f"stage1d_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
    
    with col5:
        if st.button("üé≤ –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ"):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
            demo_symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'MGNT', 'YNDX', 'VKCO', 'NLMK', 'ALRS']
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            if full_version:
                # –î–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    st.session_state.stage1d_results = loop.run_until_complete(
                        enhanced_analyzer.prefilter_symbols_stage1d(demo_symbols)
                    )
                finally:
                    loop.close()
            else:
                # –î–ª—è –¥–µ–º–æ –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                st.session_state.stage1d_results = enhanced_analyzer.prefilter_symbols_stage1d(demo_symbols)
            
            st.success("–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            st.rerun()
        
        if st.button("üöÄ –î–µ–º–æ + –ê–Ω–∞–ª–∏–∑"):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            demo_symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'MGNT', 'YNDX', 'VKCO', 'NLMK', 'ALRS']
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            if full_version:
                # –î–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    st.session_state.stage1d_results = loop.run_until_complete(
                        enhanced_analyzer.prefilter_symbols_stage1d(demo_symbols)
                    )
                finally:
                    loop.close()
            else:
                # –î–ª—è –¥–µ–º–æ –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                st.session_state.stage1d_results = enhanced_analyzer.prefilter_symbols_stage1d(demo_symbols)
            
            st.success("–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
            # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            passed_symbols = enhanced_analyzer.get_passed_symbols(st.session_state.stage1d_results)
            if passed_symbols:
                st.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {len(passed_symbols)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
                
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑..."):
                    try:
                        results = enhanced_analyzer.analyze_prefiltered_symbols(passed_symbols)
                        st.session_state.cascade_results = results
                        
                        st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        successful_results = [r for r in results if r.get('final_signal') is not None]
                        if successful_results:
                            st.subheader("üéØ –£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
                            for result in successful_results:
                                st.write(f"**{result['symbol']}**: {result['final_signal']} @ {result['entry_price']:.2f} ‚ÇΩ (R/R: {result['risk_reward']:.1f})")
                        else:
                            st.warning("–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                            
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            else:
                st.warning("–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—É—é –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if 'stage1d_results' in st.session_state:
        passed_symbols = enhanced_analyzer.get_passed_symbols(st.session_state.stage1d_results)
        if passed_symbols:
            st.markdown("### üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞")
            col1, col2, col3 = st.columns([1, 1, 1])
            
            with col1:
                if st.button("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ", type="primary", key="quick_analyze_all"):
                    st.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {len(passed_symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
                    
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑..."):
                        try:
                            if full_version:
                                loop = asyncio.new_event_loop()
                                asyncio.set_event_loop(loop)
                                
                                try:
                                    results = loop.run_until_complete(
                                        enhanced_analyzer.analyze_prefiltered_symbols(passed_symbols)
                                    )
                                finally:
                                    loop.close()
                            else:
                                results = enhanced_analyzer.analyze_prefiltered_symbols(passed_symbols)
                            
                            st.session_state.cascade_results = results
                            st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å–∏–º–≤–æ–ª–æ–≤")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            successful_results = [r for r in results if r.get('final_signal') is not None]
                            if successful_results:
                                st.subheader("üéØ –£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
                                for result in successful_results[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                                    st.write(f"**{result['symbol']}**: {result['final_signal']} @ {result['entry_price']:.2f} ‚ÇΩ (R/R: {result['risk_reward']:.1f})")
                                
                                if len(successful_results) > 5:
                                    st.write(f"... –∏ –µ—â–µ {len(successful_results) - 5} —Å–∏–≥–Ω–∞–ª–æ–≤")
                            else:
                                st.warning("–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                                
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
            with col2:
                if st.button("üìà –¢–æ–ª—å–∫–æ BUY", key="quick_analyze_buy"):
                    buy_symbols = [r.symbol for r in enhanced_analyzer.get_buy_candidates(st.session_state.stage1d_results)]
                    if buy_symbols:
                        st.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {len(buy_symbols)} BUY —Å–∏–≥–Ω–∞–ª–æ–≤...")
                        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
                    else:
                        st.warning("–ù–µ—Ç BUY —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            with col3:
                if st.button("üìâ –¢–æ–ª—å–∫–æ SELL", key="quick_analyze_sell"):
                    sell_symbols = [r.symbol for r in enhanced_analyzer.get_sell_candidates(st.session_state.stage1d_results)]
                    if sell_symbols:
                        st.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {len(sell_symbols)} SELL —Å–∏–≥–Ω–∞–ª–æ–≤...")
                        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
                    else:
                        st.warning("–ù–µ—Ç SELL —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if full_version:
        try:
            all_symbols = enhanced_analyzer.cascade_analyzer.multi_analyzer.get_available_symbols()
            if not all_symbols:
                all_symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'MGNT', 'YNDX', 'VKCO']
        except:
            all_symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'MGNT', 'YNDX', 'VKCO']
    else:
        all_symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'MGNT', 'YNDX', 'VKCO', 'NLMK', 'ALRS', 'CHMF', 'MTSS']
    
    st.info(f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(all_symbols)} | –†–µ–∂–∏–º: {'–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è' if full_version else '–î–µ–º–æ –≤–µ—Ä—Å–∏—è'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–∞ 1d
    if 'stage1d_results' not in st.session_state:
        st.info("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —ç—Ç–∞–ø—É 1d (ML —Å–∏–≥–Ω–∞–ª—ã)...")
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            if full_version:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                try:
                    stage1d_results = loop.run_until_complete(
                        enhanced_analyzer.prefilter_symbols_stage1d(all_symbols)
                    )
                finally:
                    loop.close()
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –¥–µ–º–æ
                stage1d_results = enhanced_analyzer.prefilter_symbols_stage1d(all_symbols)
            
            st.session_state.stage1d_results = stage1d_results
            
            progress_bar.progress(1.0)
            status_text.text("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
            stage1d_results = {}
            st.session_state.stage1d_results = stage1d_results
    else:
        stage1d_results = st.session_state.stage1d_results
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    passed_symbols = enhanced_analyzer.get_passed_symbols(stage1d_results)
    buy_candidates = enhanced_analyzer.get_buy_candidates(stage1d_results)
    sell_candidates = enhanced_analyzer.get_sell_candidates(stage1d_results)
    top_candidates = enhanced_analyzer.get_top_candidates(stage1d_results, limit=20)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ", len(stage1d_results))
    
    with col2:
        st.metric("–ü—Ä–æ—à–ª–∏ —ç—Ç–∞–ø 1d", len(passed_symbols))
    
    with col3:
        st.metric("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã BUY", len(buy_candidates))
    
    with col4:
        st.metric("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã SELL", len(sell_candidates))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    if top_candidates:
        st.subheader("üèÜ –¢–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
        
        candidates_data = []
        for result in top_candidates:
            candidates_data.append({
                '–°–∏–º–≤–æ–ª': result.symbol,
                '–°–∏–≥–Ω–∞–ª': result.signal,
                '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{result.confidence:.1%}",
                '–ê–Ω—Å–∞–º–±–ª—å': result.ensemble_signal,
                '–¶–µ–Ω–∞': result.price_signal,
                '–í—Ä–µ–º—è': result.timestamp.strftime('%H:%M:%S')
            })
        
        df = pd.DataFrame(candidates_data)
        st.dataframe(df, width='stretch')
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üéØ –¢–æ–ø-10"):
                top_10_symbols = [r.symbol for r in top_candidates[:10]]
                st.session_state.selected_candidates = top_10_symbols
                st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(top_10_symbols)} —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        
        with col2:
            if st.button("üìà –í—Å–µ BUY"):
                buy_symbols = [r.symbol for r in buy_candidates]
                st.session_state.selected_candidates = buy_symbols
                st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(buy_symbols)} BUY —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        with col3:
            if st.button("üìâ –í—Å–µ SELL"):
                sell_symbols = [r.symbol for r in sell_candidates]
                st.session_state.selected_candidates = sell_symbols
                st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(sell_symbols)} SELL —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        with col4:
            if st.button("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ 5"):
                import random
                random_symbols = random.sample(passed_symbols, min(5, len(passed_symbols)))
                st.session_state.selected_candidates = random_symbols
                st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(random_symbols)} —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ø—Ä–æ—à–µ–¥—à–∏—Ö —ç—Ç–∞–ø 1d
        if passed_symbols:
            st.markdown("---")
            col1, col2, col3 = st.columns([1, 2, 1])
            
            with col2:
                if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø—Ä–æ—à–µ–¥—à–∏—Ö —ç—Ç–∞–ø 1d", type="primary", key="analyze_all_passed"):
                    st.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {len(passed_symbols)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø—Ä–æ—à–µ–¥—à–∏—Ö —ç—Ç–∞–ø 1d...")
                    
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑..."):
                        try:
                            if full_version:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                                loop = asyncio.new_event_loop()
                                asyncio.set_event_loop(loop)
                                
                                try:
                                    results = loop.run_until_complete(
                                        enhanced_analyzer.analyze_prefiltered_symbols(passed_symbols)
                                    )
                                    
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                    for result in results:
                                        if result.final_signal:
                                            loop.run_until_complete(
                                                cascade_notifications.notify_cascade_signal(result)
                                            )
                                finally:
                                    loop.close()
                            else:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –¥–µ–º–æ
                                results = enhanced_analyzer.analyze_prefiltered_symbols(passed_symbols)
                            
                            st.session_state.cascade_results = results
                            
                            st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å–∏–º–≤–æ–ª–æ–≤")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            successful_results = [r for r in results if r.get('final_signal') is not None]
                            if successful_results:
                                st.subheader("üéØ –£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
                                
                                results_data = []
                                for result in successful_results:
                                    results_data.append({
                                        '–°–∏–º–≤–æ–ª': result['symbol'],
                                        '–°–∏–≥–Ω–∞–ª': result['final_signal'],
                                        '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{result['confidence']:.1%}",
                                        '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': f"{result['entry_price']:.2f} ‚ÇΩ",
                                        'Stop Loss': f"{result['stop_loss']:.2f} ‚ÇΩ",
                                        'Take Profit': f"{result['take_profit']:.2f} ‚ÇΩ",
                                        'R/R': f"{result['risk_reward']:.1f}",
                                        '–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è': "–î–∞" if result['auto_trade_enabled'] else "–ù–µ—Ç"
                                    })
                                
                                results_df = pd.DataFrame(results_data)
                                st.dataframe(results_df, width='stretch')
                            else:
                                st.warning("–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                            
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        if 'selected_candidates' in st.session_state:
            selected = st.session_state.selected_candidates
            st.subheader(f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã ({len(selected)})")
            
            # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            selected_symbols = []
            for symbol in selected:
                if symbol in stage1d_results:
                    result = stage1d_results[symbol]
                    col1, col2, col3 = st.columns([1, 2, 1])
                    
                    with col1:
                        if st.checkbox(f"{symbol}", key=f"candidate_{symbol}"):
                            selected_symbols.append(symbol)
                    
                    with col2:
                        st.write(f"**{result.signal}** | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%}")
                    
                    with col3:
                        st.write(f"–ê–Ω—Å–∞–º–±–ª—å: {result.ensemble_signal}")
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
            if selected_symbols and st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑", type="primary"):
                st.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {len(selected_symbols)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
                
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑..."):
                    try:
                        if full_version:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                            loop = asyncio.new_event_loop()
                            asyncio.set_event_loop(loop)
                            
                            try:
                                results = loop.run_until_complete(
                                    enhanced_analyzer.analyze_prefiltered_symbols(selected_symbols)
                                )
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                for result in results:
                                    if result.final_signal:
                                        loop.run_until_complete(
                                            cascade_notifications.notify_cascade_signal(result)
                                        )
                            finally:
                                loop.close()
                        else:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –¥–µ–º–æ
                            results = enhanced_analyzer.analyze_prefiltered_symbols(selected_symbols)
                        
                        st.session_state.cascade_results = results
                        
                        st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        successful_results = [r for r in results if r.get('final_signal') is not None]
                        if successful_results:
                            st.subheader("üéØ –£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
                            
                            results_data = []
                            for result in successful_results:
                                results_data.append({
                                    '–°–∏–º–≤–æ–ª': result['symbol'],
                                    '–°–∏–≥–Ω–∞–ª': result['final_signal'],
                                    '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{result['confidence']:.1%}",
                                    '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': f"{result['entry_price']:.2f} ‚ÇΩ",
                                    'Stop Loss': f"{result['stop_loss']:.2f} ‚ÇΩ",
                                    'Take Profit': f"{result['take_profit']:.2f} ‚ÇΩ",
                                    'R/R': f"{result['risk_reward']:.1f}",
                                    '–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è': "–î–∞" if result['auto_trade_enabled'] else "–ù–µ—Ç"
                                })
                            
                            results_df = pd.DataFrame(results_data)
                            st.dataframe(results_df, width='stretch')
                        else:
                            st.warning("–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                        
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
            else:
                st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    else:
        st.warning("–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø—Ä–æ—à–µ–¥—à–∏—Ö —ç—Ç–∞–ø 1d")

with tab2:
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
    
    if 'stage1d_results' in st.session_state:
        stage1d_results = st.session_state.stage1d_results
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total = len(stage1d_results)
        passed = len(enhanced_analyzer.get_passed_symbols(stage1d_results))
        buy_count = len(enhanced_analyzer.get_buy_candidates(stage1d_results))
        sell_count = len(enhanced_analyzer.get_sell_candidates(stage1d_results))
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        import matplotlib.pyplot as plt
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals = ['BUY', 'SELL', 'HOLD']
        counts = [
            len([r for r in stage1d_results.values() if r.signal == 'BUY']),
            len([r for r in stage1d_results.values() if r.signal == 'SELL']),
            len([r for r in stage1d_results.values() if r.signal == 'HOLD'])
        ]
        
        ax1.pie(counts, labels=signals, autopct='%1.1f%%', startangle=90)
        ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidences = [r.confidence for r in stage1d_results.values()]
        ax2.hist(confidences, bins=20, alpha=0.7, edgecolor='black')
        ax2.set_xlabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
        ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤')
        ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏')
        
        st.pyplot(fig)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤", total)
            st.metric("–ü—Ä–æ—à–ª–∏ —ç—Ç–∞–ø 1d", passed, f"{passed/total*100:.1f}%" if total > 0 else "0%")
        
        with col2:
            st.metric("BUY —Å–∏–≥–Ω–∞–ª—ã", buy_count)
            st.metric("SELL —Å–∏–≥–Ω–∞–ª—ã", sell_count)
    
    else:
        st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

with tab3:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    st.subheader("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        min_confidence = st.slider(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–∞–ø–∞ 1d",
            min_value=0.5,
            max_value=0.9,
            value=0.6,
            step=0.1,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ML —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 1d"
        )
    
    with col2:
        max_candidates = st.slider(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
            min_value=5,
            max_value=50,
            value=20,
            step=5,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞
    st.subheader("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞")
    
    cache_hours = st.slider(
        "–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (—á–∞—Å—ã)",
        min_value=1,
        max_value=24,
        value=1,
        step=1,
        help="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–∞ 1d"
    )
    
    if st.button("üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    if 'stage1d_results' in st.session_state:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞")
        cache_stats = enhanced_analyzer.get_cache_stats()
        st.json(cache_stats)

with tab4:
    st.header("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
    
    st.subheader("üéØ –ö–æ–Ω—Ü–µ–ø—Ü–∏—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
    
    st.info("""
    **–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä** —Ä–µ–∞–ª–∏–∑—É–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:
    
    ### –≠—Ç–∞–ø 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (1d)
    - **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫** –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    - **ML –∞–Ω–∞–ª–∏–∑** –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    - **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è** –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (60%)
    - **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ** —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    
    ### –≠—Ç–∞–ø 2: –ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (1h ‚Üí 1m ‚Üí 1s)
    - **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞** –Ω–∞ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - **–ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞** –Ω–∞ –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - **–ú–∏–∫—Ä–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è** –Ω–∞ —Å–µ–∫—É–Ω–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - **–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏** –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """)
    
    st.subheader("üöÄ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.success("""
        **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
        - –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∞–ª–∏–∑–∞
        - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """)
    
    with col2:
        st.success("""
        **–ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤:**
        - ML —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥–µ
        - –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
        """)
    
    st.subheader("üìÅ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
    
    components = {
        "–û—Å–Ω–æ–≤–Ω—ã–µ": [
            "core/cascade_analyzer.py - –ë–∞–∑–æ–≤—ã–π –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä",
            "core/cascade_analyzer_enhanced.py - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π",
            "core/cascade_notifications.py - –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        ],
        "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã": [
            "pages/21_Cascade_Analyzer_Integrated.py - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (—ç—Ç–æ—Ç —Ñ–∞–π–ª)",
            "pages/21_Cascade_Analyzer_Simple.py - –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ –≤–µ—Ä—Å–∏—è",
            "pages/21_Cascade_Analyzer_Enhanced.py - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å asyncio"
        ],
        "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è": [
            "demo_enhanced_cascade_simple.py - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏",
            "docs/ENHANCED_CASCADE_ANALYZER_GUIDE.md - –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"
        ]
    }
    
    for category, items in components.items():
        with st.expander(f"üìÇ {category}"):
            for item in items:
                st.write(f"‚Ä¢ {item}")
    
    st.subheader("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏")
    
    st.code("""
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã:
- CascadeAnalyzer: –ë–∞–∑–æ–≤—ã–π –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
- EnhancedCascadeAnalyzer: –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
- CascadeSignalResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
- Stage1dResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 1d

# –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã:
- prefilter_symbols_stage1d(): –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
- analyze_prefiltered_symbols(): –ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- get_passed_symbols(): –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
- get_top_candidates(): –¢–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    """, language="python")
    
    st.subheader("üéÆ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
    
    st.markdown("""
    1. **–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã** ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    2. **–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤** ‚Üí –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    3. **–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞** ‚Üí –ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    4. **–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤** ‚Üí –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    5. **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö** ‚Üí –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV
    """)
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    st.subheader("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if full_version:
            st.success("‚úÖ –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
        else:
            st.warning("‚ö†Ô∏è –î–µ–º–æ –≤–µ—Ä—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
    
    with col2:
        if 'stage1d_results' in st.session_state:
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        else:
            st.info("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    with col3:
        if 'cascade_results' in st.session_state:
            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            st.info("‚ÑπÔ∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
