#!/usr/bin/env python3
"""
Cascade Multi-Timeframe Analyzer Page.
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
"""

import streamlit as st
import pandas as pd
import asyncio
import json
from datetime import datetime, timedelta
import logging

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
try:
    from core.cascade_analyzer import CascadeAnalyzer, CascadeSignalResult
    from core.cascade_notifications import CascadeNotificationManager
    from core.multi_timeframe_analyzer_enhanced import EnhancedMultiTimeframeStockAnalyzer
    from core import demo_trading
    from core.database import get_connection
    CASCADE_AVAILABLE = True
except ImportError as e:
    CASCADE_AVAILABLE = False
    st.error(f"–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è ML
try:
    from core.ml import create_ml_integration_manager, create_fallback_ml_manager
    ML_AVAILABLE = True
except ImportError:
    ML_AVAILABLE = False

logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="Cascade Analyzer",
    page_icon="üéØ",
    layout="wide"
)

st.title("Cascade Multi-Timeframe Analyzer")
st.caption("–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å ML –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
if not CASCADE_AVAILABLE:
    st.error("–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
if 'cascade_analyzer' not in st.session_state:
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        api_key = None
        if hasattr(st, 'secrets') and hasattr(st.secrets, 'TINKOFF_API_KEY'):
            api_key = st.secrets.TINKOFF_API_KEY
            st.session_state.tinkoff_api_key = api_key
        
        if not api_key:
            api_key = st.session_state.get('tinkoff_api_key')
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        multi_analyzer = EnhancedMultiTimeframeStockAnalyzer(api_key=api_key)
        
        # ML –º–µ–Ω–µ–¥–∂–µ—Ä
        ml_manager = None
        if ML_AVAILABLE:
            try:
                ml_manager = create_ml_integration_manager()
                st.success("ML –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                ml_manager = create_fallback_ml_manager()
                st.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback ML —Ä–µ–∂–∏–º: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        st.session_state.cascade_analyzer = CascadeAnalyzer(
            multi_analyzer=multi_analyzer,
            ml_manager=ml_manager,
            demo_trading=demo_trading
        )
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        from core.notifications import NotificationManager
        notification_manager = NotificationManager()
        st.session_state.cascade_notifications = CascadeNotificationManager(notification_manager)
        
        st.success("–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        if 'initial_ml_analysis_done' not in st.session_state:
            st.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                available_symbols = st.session_state.cascade_analyzer.get_available_symbols_with_1d_data()
                
                if available_symbols:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑
                    initial_ml_results = asyncio.run(
                        st.session_state.cascade_analyzer.perform_initial_ml_analysis(available_symbols)
                    )
                    st.session_state.initial_ml_analysis_done = True
                    st.success(f"‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {len(initial_ml_results)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    st.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ 1d")
                    st.session_state.initial_ml_analysis_done = True
                    
            except Exception as e:
                st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ ML –∞–Ω–∞–ª–∏–∑–∞: {e}")
                st.session_state.initial_ml_analysis_done = True
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        st.stop()

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
cascade_analyzer = st.session_state.cascade_analyzer
notification_manager = st.session_state.cascade_notifications

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤", 
    "–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è", 
    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    "–ò—Å—Ç–æ—Ä–∏—è"
])

with tab1:
    st.header("–ê–Ω–∞–ª–∏–∑ –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("–°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
        try:
            analysis_status = asyncio.run(cascade_analyzer.get_analysis_status())
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status_col1, status_col2, status_col3 = st.columns(3)
            
            with status_col1:
                st.metric(
                    "–°–∏–º–≤–æ–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ 1d", 
                    analysis_status.get('total_symbols_with_1d_data', 0)
                )
            
            with status_col2:
                st.metric(
                    "ML –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", 
                    "–î–∞" if analysis_status.get('ml_analysis_completed', False) else "–ù–µ—Ç"
                )
            
            with status_col3:
                st.metric(
                    "–ì–æ—Ç–æ–≤–æ –∫ –∫–∞—Å–∫–∞–¥–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É", 
                    analysis_status.get('symbols_with_strong_signals', 0)
                )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if analysis_status.get('ml_analysis_completed', False):
                st.success(f"‚úÖ ML –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {analysis_status.get('symbols_with_ml_results', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
                st.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {analysis_status.get('symbols_with_strong_signals', 0)} —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏")
            else:
                st.warning("‚ö†Ô∏è ML –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑' –¥–ª—è –Ω–∞—á–∞–ª–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'error' in analysis_status:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {analysis_status['error']}")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            analysis_status = {
                'total_symbols_with_1d_data': 0,
                'symbols_with_ml_results': 0,
                'symbols_with_strong_signals': 0,
                'ml_analysis_completed': False,
                'ready_for_cascade': False
            }
    
    with col2:
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
            print("üöÄ [CASCADE] –ö–Ω–æ–ø–∫–∞ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑' –Ω–∞–∂–∞—Ç–∞")
            
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤..."):
                try:
                    print("üìä [CASCADE] –ù–∞—á–∏–Ω–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
                    print("üîç [CASCADE] –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞...")
                    pre_status = asyncio.run(cascade_analyzer.get_analysis_status())
                    print(f"üìà [CASCADE] –°—Ç–∞—Ç—É—Å –¥–æ –∞–Ω–∞–ª–∏–∑–∞: {pre_status}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    print("‚ö° [CASCADE] –ó–∞–ø—É—Å–∫–∞–µ–º analyze_all_available_symbols()...")
                    results = asyncio.run(cascade_analyzer.analyze_all_available_symbols())
                    print(f"‚úÖ [CASCADE] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    st.session_state.cascade_results = results
                    print("üíæ [CASCADE] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ session_state")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    successful_results = cascade_analyzer.get_successful_signals(results)
                    rejected_results = cascade_analyzer.get_rejected_signals(results)
                    print(f"üìä [CASCADE] –£—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(successful_results)}")
                    print(f"‚ùå [CASCADE] –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(rejected_results)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                    if successful_results:
                        print("üéØ [CASCADE] –£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
                        for i, result in enumerate(successful_results[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                            print(f"  {i+1}. {result.symbol}: {result.final_signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%})")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                    if rejected_results:
                        print("üö´ [CASCADE] –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
                        for i, result in enumerate(rejected_results[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                            print(f"  {i+1}. {result.symbol}: –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ {result.rejected_at_stage} - {result.rejection_reason}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    print("üì¢ [CASCADE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
                    notification_count = 0
                    for result in results:
                        if result.final_signal:
                            try:
                                asyncio.run(notification_manager.notify_cascade_signal(result))
                                notification_count += 1
                            except Exception as e:
                                print(f"‚ö†Ô∏è [CASCADE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {result.symbol}: {e}")
                    
                    print(f"üì® [CASCADE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notification_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    
                    st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print("üéâ [CASCADE] –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    st.rerun()
                    
                except Exception as e:
                    print(f"‚ùå [CASCADE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                    import traceback
                    print(f"üîç [CASCADE] Traceback: {traceback.format_exc()}")
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", use_container_width=True):
            st.rerun()
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", use_container_width=True):
            if 'cascade_results' in st.session_state:
                del st.session_state.cascade_results
            st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")
            st.rerun()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞
    st.subheader("–ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞")
    
    with st.expander("‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑", expanded=False):
        st.markdown("""
        **–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤:**
        
        1. **üìä –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑ (1d)** - –ê–Ω–∞–ª–∏–∑ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é ML –º–æ–¥–µ–ª–µ–π
        2. **üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞** - –û—Ç–±–æ—Ä —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚â• 50%)
        3. **‚è∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (1h)** - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –∏ –æ–±—ä–µ–º–∞
        4. **üéØ –ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (1m)** - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        5. **‚ö° –ú–∏–∫—Ä–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (1s)** - –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞
        
        **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—Ö–∞.
        """)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    if 'cascade_analysis_in_progress' in st.session_state and st.session_state.cascade_analysis_in_progress:
        st.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        st.progress(0.5)  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if 'cascade_results' in st.session_state:
        results = st.session_state.cascade_results
        successful_results = cascade_analyzer.get_successful_signals(results)
        rejected_results = cascade_analyzer.get_rejected_signals(results)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", len(results))
        
        with col2:
            st.metric("–£—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", len(successful_results))
        
        with col3:
            st.metric("–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", len(rejected_results))
        
        with col4:
            avg_confidence = sum(r.confidence for r in successful_results) / len(successful_results) if successful_results else 0
            st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.1%}")
        
        # –£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if successful_results:
            st.subheader("–£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            successful_data = []
            for result in successful_results:
                successful_data.append({
                    '–°–∏–º–≤–æ–ª': result.symbol,
                    '–°–∏–≥–Ω–∞–ª': result.final_signal,
                    '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{result.confidence:.1%}",
                    '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': f"{result.entry_price:.2f} RUB",
                    '–°—Ç–æ–ø-–ª–æ—Å—Å': f"{result.stop_loss:.2f} RUB",
                    '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç': f"{result.take_profit:.2f} RUB",
                    '–†–∏—Å–∫/–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å': f"{result.risk_reward:.1f}",
                    '–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è': "–î–∞" if result.auto_trade_enabled else "–ù–µ—Ç",
                    '–í—Ä–µ–º—è': result.timestamp.strftime('%H:%M:%S')
                })
            
            df_successful = pd.DataFrame(successful_data)
            st.dataframe(df_successful, use_container_width=True)
        
        # –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if rejected_results:
            st.subheader("–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
            
            rejected_data = []
            for result in rejected_results:
                rejected_data.append({
                    '–°–∏–º–≤–æ–ª': result.symbol,
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ': result.rejected_at_stage,
                    '–ü—Ä–∏—á–∏–Ω–∞': result.rejection_reason,
                    '–í—Ä–µ–º—è': result.timestamp.strftime('%H:%M:%S')
                })
            
            df_rejected = pd.DataFrame(rejected_data)
            st.dataframe(df_rejected, use_container_width=True)

with tab2:
    st.header("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
    
    # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏
    auto_trade_status = cascade_analyzer.get_auto_trade_status()
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.write("–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏:")
        st.write(f"- –í–∫–ª—é—á–µ–Ω–∞: {'–î–∞' if auto_trade_status['enabled'] else '–ù–µ—Ç'}")
        st.write(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {auto_trade_status['min_confidence']:.1%}")
        st.write(f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {auto_trade_status['max_position_size']} RUB")
        st.write(f"- –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {auto_trade_status['risk_per_trade']:.1%}")
        st.write(f"- –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å: {auto_trade_status['max_daily_trades']}")
        st.write(f"- –¢–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã: {auto_trade_status['trading_hours']['start']}:00 - {auto_trade_status['trading_hours']['end']}:00")
        st.write(f"- –°–µ–π—á–∞—Å —Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã: {'–î–∞' if auto_trade_status['is_trading_hours'] else '–ù–µ—Ç'}")
    
    with col2:
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"):
            st.rerun()

with tab3:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_config = notification_manager.get_notification_config()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        st.write(f"- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {'–î–∞' if notification_config['enabled'] else '–ù–µ—Ç'}")
        st.write(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {notification_config['min_confidence_for_notification']:.1%}")
        st.write(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {notification_config['min_risk_reward_for_notification']:.1f}")
        st.write(f"- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ: {'–î–∞' if notification_config['auto_trade_notifications'] else '–ù–µ—Ç'}")
        st.write(f"- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö: {'–î–∞' if notification_config['stage_rejection_notifications'] else '–ù–µ—Ç'}")
        st.write(f"- –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞: {'–î–∞' if notification_config['daily_summary'] else '–ù–µ—Ç'}")
    
    with col2:
        st.subheader("–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        st.write(f"- Telegram: {'–î–∞' if notification_config['telegram_enabled'] else '–ù–µ—Ç'}")
        st.write(f"- Email: {'–î–∞' if notification_config['email_enabled'] else '–ù–µ—Ç'}")
        st.write(f"- Webhook: {'–î–∞' if notification_config['webhook_enabled'] else '–ù–µ—Ç'}")

with tab4:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–ø–æ–≤
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
    
    stage_configs = cascade_analyzer.stage_configs
    
    for stage, config in stage_configs.items():
        with st.expander(f"–≠—Ç–∞–ø {stage}"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
                st.write(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {config['min_confidence']:.1%}")
                st.write(f"- –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {config['lookback_days']} –¥–Ω–µ–π")
            
            with col2:
                st.write("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
                if 'required_signals' in config:
                    st.write(f"- –¢—Ä–µ–±—É–µ–º—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {', '.join(config['required_signals'])}")
                if 'required_confirmations' in config:
                    st.write(f"- –¢—Ä–µ–±—É–µ–º—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {', '.join(config['required_confirmations'])}")

with tab5:
    st.header("–ò—Å—Ç–æ—Ä–∏—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    st.info("–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
    
    if 'cascade_results' in st.session_state:
        results = st.session_state.cascade_results
        
        # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
                try:
                    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    export_data = []
                    for result in results:
                        export_data.append(result.to_dict())
                    
                    df_export = pd.DataFrame(export_data)
                    csv = df_export.to_csv(index=False)
                    
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å CSV",
                        data=csv,
                        file_name=f"cascade_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv"
                    )
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        
        with col2:
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"):
                try:
                    export_data = [result.to_dict() for result in results]
                    json_data = json.dumps(export_data, indent=2, ensure_ascii=False)
                    
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å JSON",
                        data=json_data,
                        file_name=f"cascade_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                        mime="application/json"
                    )
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    else:
        st.info("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.")

# –§—É—Ç–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
st.divider()
st.caption("Cascade Multi-Timeframe Analyzer - –°–∏—Å—Ç–µ–º–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
