#!/usr/bin/env python3
"""
Cascade Multi-Timeframe Analyzer Page.
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
"""

import streamlit as st
import pandas as pd
import asyncio
import json
from datetime import datetime, timedelta
import logging

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
try:
    from core.cascade_analyzer import CascadeAnalyzer, CascadeSignalResult
    from core.cascade_notifications import CascadeNotificationManager
    from core.multi_timeframe_analyzer_enhanced import EnhancedMultiTimeframeStockAnalyzer
    from core import demo_trading
    from core.database import get_connection
    from core.ml.cascade_cache import cascade_ml_cache
    CASCADE_AVAILABLE = True
except ImportError as e:
    CASCADE_AVAILABLE = False
    st.error(f"–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è ML
try:
    from core.ml import create_ml_integration_manager, create_fallback_ml_manager
    ML_AVAILABLE = True
except ImportError:
    ML_AVAILABLE = False

logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="Cascade Analyzer",
    page_icon="üéØ",
    layout="wide"
)

st.title("Cascade Multi-Timeframe Analyzer")
st.caption("–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å ML –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
if not CASCADE_AVAILABLE:
    st.error("–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
    st.stop()

# –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ session_state –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
print("=" * 80)
print("üîç [PAGE_START] –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SESSION_STATE –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –°–¢–†–ê–ù–ò–¶–´")
print("=" * 80)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ session_state
print(f"üîç [PAGE_START] –í—Å–µ –∫–ª—é—á–∏ –≤ session_state: {list(st.session_state.keys())}")
print(f"üîç [PAGE_START] –†–∞–∑–º–µ—Ä session_state: {len(st.session_state)}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏
cascade_analyzer_exists = 'cascade_analyzer' in st.session_state
initial_ml_results_exists = 'initial_ml_results' in st.session_state
initial_ml_symbols_exists = 'initial_ml_symbols' in st.session_state
initial_ml_analysis_done_exists = 'initial_ml_analysis_done' in st.session_state

print(f"üîç [PAGE_START] cascade_analyzer –≤ session_state: {cascade_analyzer_exists}")
print(f"üîç [PAGE_START] initial_ml_results –≤ session_state: {initial_ml_results_exists}")
print(f"üîç [PAGE_START] initial_ml_symbols –≤ session_state: {initial_ml_symbols_exists}")
print(f"üîç [PAGE_START] initial_ml_analysis_done –≤ session_state: {initial_ml_analysis_done_exists}")

# –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Ä–∞–∑–º–µ—Ä—ã
if initial_ml_results_exists:
    ml_results_size = len(st.session_state.initial_ml_results) if st.session_state.initial_ml_results else 0
    print(f"üîç [PAGE_START] –†–∞–∑–º–µ—Ä initial_ml_results: {ml_results_size}")
    if ml_results_size > 0:
        print(f"üîç [PAGE_START] –¢–∏–ø initial_ml_results: {type(st.session_state.initial_ml_results)}")
        print(f"üîç [PAGE_START] –ü–µ—Ä–≤—ã–µ –∫–ª—é—á–∏ initial_ml_results: {list(st.session_state.initial_ml_results.keys())[:5] if isinstance(st.session_state.initial_ml_results, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")

if initial_ml_symbols_exists:
    ml_symbols_size = len(st.session_state.initial_ml_symbols) if st.session_state.initial_ml_symbols else 0
    print(f"üîç [PAGE_START] –†–∞–∑–º–µ—Ä initial_ml_symbols: {ml_symbols_size}")
    if ml_symbols_size > 0:
        print(f"üîç [PAGE_START] –ü–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã: {st.session_state.initial_ml_symbols[:5]}")

if initial_ml_analysis_done_exists:
    print(f"üîç [PAGE_START] initial_ml_analysis_done: {st.session_state.initial_ml_analysis_done}")

print("=" * 80)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
if 'cascade_analyzer' not in st.session_state:
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        api_key = None
        if hasattr(st, 'secrets') and hasattr(st.secrets, 'TINKOFF_API_KEY'):
            api_key = st.secrets.TINKOFF_API_KEY
            st.session_state.tinkoff_api_key = api_key
        
        if not api_key:
            api_key = st.session_state.get('tinkoff_api_key')
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        multi_analyzer = EnhancedMultiTimeframeStockAnalyzer(api_key=api_key)
        
        # ML –º–µ–Ω–µ–¥–∂–µ—Ä
        ml_manager = None
        if ML_AVAILABLE:
            try:
                ml_manager = create_ml_integration_manager()
                st.success("ML –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                ml_manager = create_fallback_ml_manager()
                st.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback ML —Ä–µ–∂–∏–º: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        print("üîß [PAGE_INIT] –°–æ–∑–¥–∞–µ–º CascadeAnalyzer...")
        print(f"üîß [PAGE_INIT] Multi analyzer: {type(multi_analyzer)}")
        print(f"üîß [PAGE_INIT] ML manager: {type(ml_manager)}")
        print(f"üîß [PAGE_INIT] Demo trading: {type(demo_trading)}")
        
        st.session_state.cascade_analyzer = CascadeAnalyzer(
            multi_analyzer=multi_analyzer,
            ml_manager=ml_manager,
            demo_trading=demo_trading
        )
        print("üîß [PAGE_INIT] CascadeAnalyzer —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üîß [PAGE_INIT] CascadeAnalyzer –≤ session_state: {'cascade_analyzer' in st.session_state}")
        print(f"üîß [PAGE_INIT] –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –≤ –Ω–æ–≤–æ–º CascadeAnalyzer: {len(st.session_state.cascade_analyzer.initial_ml_cache)}")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        from core.notifications import NotificationManager
        notification_manager = NotificationManager()
        st.session_state.cascade_notifications = CascadeNotificationManager(notification_manager)
        
        st.success("–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑
        print("=" * 60)
        print("üîç [PAGE_INIT] –ü–†–û–í–ï–†–ö–ê –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò ML –ê–ù–ê–õ–ò–ó–ê")
        print("=" * 60)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É—Å–ª–æ–≤–∏—è
        has_ml_results_key = 'initial_ml_results' in st.session_state
        has_ml_results_value = st.session_state.get('initial_ml_results') is not None
        has_ml_results_length = len(st.session_state.get('initial_ml_results', [])) > 0 if has_ml_results_value else False
        
        has_ml_symbols_key = 'initial_ml_symbols' in st.session_state
        has_ml_symbols_value = st.session_state.get('initial_ml_symbols') is not None
        has_ml_symbols_length = len(st.session_state.get('initial_ml_symbols', [])) > 0 if has_ml_symbols_value else False
        
        print(f"üîç [PAGE_INIT] initial_ml_results:")
        print(f"  - –ö–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {has_ml_results_key}")
        print(f"  - –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ None: {has_ml_results_value}")
        print(f"  - –î–ª–∏–Ω–∞ > 0: {has_ml_results_length}")
        if has_ml_results_value:
            print(f"  - –†–∞–∑–º–µ—Ä: {len(st.session_state.initial_ml_results)}")
            print(f"  - –¢–∏–ø: {type(st.session_state.initial_ml_results)}")
        
        print(f"üîç [PAGE_INIT] initial_ml_symbols:")
        print(f"  - –ö–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {has_ml_symbols_key}")
        print(f"  - –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ None: {has_ml_symbols_value}")
        print(f"  - –î–ª–∏–Ω–∞ > 0: {has_ml_symbols_length}")
        if has_ml_symbols_value:
            print(f"  - –†–∞–∑–º–µ—Ä: {len(st.session_state.initial_ml_symbols)}")
            print(f"  - –¢–∏–ø: {type(st.session_state.initial_ml_symbols)}")
        
        has_cached_results = has_ml_results_key and has_ml_results_value and has_ml_results_length
        has_cached_symbols = has_ml_symbols_key and has_ml_symbols_value and has_ml_symbols_length
        
        print(f"üîç [PAGE_INIT] –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        print(f"üîç [PAGE_INIT] –ï—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {has_cached_results}")
        print(f"üîç [PAGE_INIT] –ï—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {has_cached_symbols}")
        print(f"üîç [PAGE_INIT] initial_ml_analysis_done: {st.session_state.get('initial_ml_analysis_done', False)}")
        print("=" * 60)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º ML –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not has_cached_results or not has_cached_symbols:
            print("üîÑ [PAGE_INIT] –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑...")
            st.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–µ–Ω–µ–∂–Ω–æ–º—É –æ–±—ä–µ–º—É
                available_symbols = st.session_state.cascade_analyzer.get_available_symbols_with_1d_data(
                    min_volume=10000000, 
                    min_avg_volume=5000000
                )
                
                if available_symbols:
                    print(f"üìä [PAGE_INIT] –ù–∞–π–¥–µ–Ω–æ {len(available_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è ML –∞–Ω–∞–ª–∏–∑–∞")
                    print(f"üìã [PAGE_INIT] –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤: {available_symbols[:5]}")
                    
                    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    time_estimate = st.session_state.cascade_analyzer.estimate_ml_analysis_time(len(available_symbols))
                    st.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time_estimate['formatted_time']}")
                    print(f"‚è±Ô∏è [PAGE_INIT] –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {time_estimate['formatted_time']}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑
                    print("ü§ñ [PAGE_INIT] –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑...")
                    initial_ml_results = asyncio.run(
                        st.session_state.cascade_analyzer.perform_initial_ml_analysis(available_symbols)
                    )
                    print(f"ü§ñ [PAGE_INIT] ML –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ {len(initial_ml_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
                    print("üíæ [PAGE_INIT] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state...")
                    print(f"üíæ [PAGE_INIT] –†–∞–∑–º–µ—Ä initial_ml_results: {len(initial_ml_results)}")
                    print(f"üíæ [PAGE_INIT] –†–∞–∑–º–µ—Ä available_symbols: {len(available_symbols)}")
                    
                    st.session_state.initial_ml_results = initial_ml_results
                    st.session_state.initial_ml_analysis_done = True
                    st.session_state.initial_ml_symbols = available_symbols
                    
                    print("üíæ [PAGE_INIT] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ session_state")
                    print(f"üíæ [PAGE_INIT] initial_ml_results –≤ session_state: {len(st.session_state.initial_ml_results)}")
                    print(f"üíæ [PAGE_INIT] initial_ml_symbols –≤ session_state: {len(st.session_state.initial_ml_symbols)}")
                    
                    st.success(f"‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {len(initial_ml_results)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    st.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ 1d, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –æ–±—ä–µ–º—É")
                    st.session_state.initial_ml_analysis_done = True
                    st.session_state.initial_ml_results = []
                    st.session_state.initial_ml_symbols = []
                    
            except Exception as e:
                st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ ML –∞–Ω–∞–ª–∏–∑–∞: {e}")
                st.session_state.initial_ml_analysis_done = True
                st.session_state.initial_ml_results = []
                st.session_state.initial_ml_symbols = []
        else:
            print("=" * 60)
            print("‚úÖ [PAGE_INIT] –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–≠–®–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
            print("=" * 60)
            print(f"‚úÖ [PAGE_INIT] –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(st.session_state.initial_ml_results)}")
            print(f"‚úÖ [PAGE_INIT] –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(st.session_state.initial_ml_symbols)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            valid_results = 0
            strong_signals = 0
            
            print(f"üîç [PAGE_INIT] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            for symbol, result in st.session_state.initial_ml_results.items():
                if isinstance(result, dict) and 'ml_ensemble_signal' in result and 'ml_price_confidence' in result:
                    valid_results += 1
                    confidence = result.get('ml_price_confidence', 0.0)
                    signal = result.get('ml_ensemble_signal', 'HOLD')
                    
                    if (signal in ['BUY', 'STRONG_BUY', 'SELL', 'STRONG_SELL'] and confidence >= 0.5):
                        strong_signals += 1
                        print(f"  üéØ {symbol}: {signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})")
            
            print(f"üîç [PAGE_INIT] –í–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {valid_results}")
            print(f"üîç [PAGE_INIT] –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {strong_signals}")
            
            # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã HOLD —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é 0.0%, –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞
            if strong_signals == 0 and valid_results > 0:
                print("‚ö†Ô∏è [PAGE_INIT] –í—Å–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã HOLD —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é 0.0% - –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞")
                st.warning("‚ö†Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–≥–ª—è–¥—è—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–≤—Å–µ HOLD —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é 0.0%). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑.")
            else:
                st.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({len(st.session_state.initial_ml_results)} —Å–∏–º–≤–æ–ª–æ–≤, {strong_signals} —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤)")
            
            print("=" * 60)
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        st.stop()

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
cascade_analyzer = st.session_state.cascade_analyzer
notification_manager = st.session_state.cascade_notifications

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
print("=" * 60)
print("üîç [PAGE_LOAD] –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ö–≠–®–ê –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –°–¢–†–ê–ù–ò–¶–´")
print("=" * 60)
print(f"üîç [PAGE_LOAD] –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –≤ CascadeAnalyzer: {len(cascade_analyzer.initial_ml_cache)}")
print(f"üîç [PAGE_LOAD] initial_ml_results –≤ session_state: {len(st.session_state.get('initial_ml_results', []))}")
print(f"üîç [PAGE_LOAD] initial_ml_symbols –≤ session_state: {len(st.session_state.get('initial_ml_symbols', []))}")
print(f"üîç [PAGE_LOAD] initial_ml_analysis_done: {st.session_state.get('initial_ml_analysis_done', False)}")

# –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
if st.session_state.get('initial_ml_results'):
    print(f"üîç [PAGE_LOAD] –¢–∏–ø initial_ml_results: {type(st.session_state.initial_ml_results)}")
    print(f"üîç [PAGE_LOAD] –ü–µ—Ä–≤—ã–µ –∫–ª—é—á–∏: {list(st.session_state.initial_ml_results.keys())[:5] if isinstance(st.session_state.initial_ml_results, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")

if cascade_analyzer.initial_ml_cache:
    print(f"üîç [PAGE_LOAD] –¢–∏–ø –∫—ç—à–∞: {type(cascade_analyzer.initial_ml_cache)}")
    print(f"üîç [PAGE_LOAD] –ü–µ—Ä–≤—ã–µ –∫–ª—é—á–∏ –∫—ç—à–∞: {list(cascade_analyzer.initial_ml_cache.keys())[:5] if isinstance(cascade_analyzer.initial_ml_cache, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")

print("=" * 60)

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫—ç—à —Å session_state –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
print("üîÑ [PAGE_LOAD] –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
print(f"üîÑ [PAGE_LOAD] –£—Å–ª–æ–≤–∏–µ 1 (session_state -> –∫—ç—à): {bool(st.session_state.get('initial_ml_results') and len(cascade_analyzer.initial_ml_cache) == 0)}")
print(f"üîÑ [PAGE_LOAD] –£—Å–ª–æ–≤–∏–µ 2 (–∫—ç—à -> session_state): {bool(len(cascade_analyzer.initial_ml_cache) > 0 and not st.session_state.get('initial_ml_results'))}")

if (st.session_state.get('initial_ml_results') and 
    len(cascade_analyzer.initial_ml_cache) == 0):
    print("üîÑ [PAGE_LOAD] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫—ç—à —Å session_state...")
    print(f"üîÑ [PAGE_LOAD] –†–∞–∑–º–µ—Ä session_state –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π: {len(st.session_state.initial_ml_results)}")
    cascade_analyzer.initial_ml_cache = st.session_state.initial_ml_results
    print(f"üîÑ [PAGE_LOAD] –ö—ç—à —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(cascade_analyzer.initial_ml_cache)}")
elif (len(cascade_analyzer.initial_ml_cache) > 0 and 
      not st.session_state.get('initial_ml_results')):
    print("üîÑ [PAGE_LOAD] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º session_state —Å –∫—ç—à–µ–º...")
    print(f"üîÑ [PAGE_LOAD] –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π: {len(cascade_analyzer.initial_ml_cache)}")
    st.session_state.initial_ml_results = cascade_analyzer.initial_ml_cache
    print(f"üîÑ [PAGE_LOAD] session_state —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(st.session_state.initial_ml_results)}")
else:
    print("‚úÖ [PAGE_LOAD] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤", 
    "–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è", 
    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    "–ò—Å—Ç–æ—Ä–∏—è"
])

with tab1:
    st.header("–ê–Ω–∞–ª–∏–∑ –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    with st.expander("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", expanded=False):
        col_filter1, col_filter2 = st.columns(2)
        
        with col_filter1:
            min_volume = st.number_input(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º –∑–∞ –¥–µ–Ω—å (RUB)",
                min_value=0,
                value=st.session_state.get('min_volume', 10000000),
                step=1000000,
                help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å (volume * close)"
            )
            st.session_state.min_volume = min_volume
        
        with col_filter2:
            min_avg_volume = st.number_input(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º –∑–∞ 30 –¥–Ω–µ–π (RUB)",
                min_value=0,
                value=st.session_state.get('min_avg_volume', 5000000),
                step=1000000,
                help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (volume * close)"
            )
            st.session_state.min_avg_volume = min_avg_volume
        
        if st.button("üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", type="primary"):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                filtered_symbols = cascade_analyzer.get_available_symbols_with_1d_data(
                    min_volume=min_volume,
                    min_avg_volume=min_avg_volume
                )
                
                # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if 'initial_ml_results' in st.session_state:
                    del st.session_state.initial_ml_results
                if 'initial_ml_symbols' in st.session_state:
                    del st.session_state.initial_ml_symbols
                if 'initial_ml_analysis_done' in st.session_state:
                    del st.session_state.initial_ml_analysis_done
                
                st.success(f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ {len(filtered_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("–°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
        try:
            current_min_volume = st.session_state.get('min_volume', 10000000)
            current_min_avg_volume = st.session_state.get('min_avg_volume', 5000000)
            analysis_status = asyncio.run(cascade_analyzer.get_analysis_status(current_min_volume, current_min_avg_volume))
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status_col1, status_col2, status_col3 = st.columns(3)
            
            with status_col1:
                st.metric(
                    "–°–∏–º–≤–æ–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ 1d", 
                    analysis_status.get('total_symbols_with_1d_data', 0)
                )
            
            with status_col2:
                st.metric(
                    "ML –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", 
                    "–î–∞" if analysis_status.get('ml_analysis_completed', False) else "–ù–µ—Ç"
                )
            
            with status_col3:
                st.metric(
                    "–ì–æ—Ç–æ–≤–æ –∫ –∫–∞—Å–∫–∞–¥–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É", 
                    analysis_status.get('symbols_with_strong_signals', 0)
                )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if analysis_status.get('ml_analysis_completed', False):
                st.success(f"‚úÖ ML –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {analysis_status.get('symbols_with_ml_results', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
                st.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {analysis_status.get('symbols_with_strong_signals', 0)} —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏")
            else:
                st.warning("‚ö†Ô∏è ML –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑' –¥–ª—è –Ω–∞—á–∞–ª–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            current_min_volume = st.session_state.get('min_volume', 10000000)
            current_min_avg_volume = st.session_state.get('min_avg_volume', 5000000)
            
            st.info(f"üîß –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º ‚â• {current_min_volume:,.0f} RUB, —Å—Ä–µ–¥–Ω–∏–π –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º ‚â• {current_min_avg_volume:,.0f} RUB")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if 'initial_ml_results' in st.session_state and st.session_state.initial_ml_results:
                st.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(st.session_state.initial_ml_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ ML –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                strong_signals = [r for r in st.session_state.initial_ml_results if r.get('confidence', 0) >= 0.5]
                if strong_signals:
                    st.success(f"üéØ –ò–∑ –Ω–∏—Ö {len(strong_signals)} —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚â• 50%)")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                    with st.expander("üîç –¢–æ–ø —Å–∏–ª—å–Ω—ã—Ö ML —Å–∏–≥–Ω–∞–ª–æ–≤", expanded=False):
                        for i, signal in enumerate(strong_signals[:5]):
                            symbol = signal.get('symbol', 'Unknown')
                            confidence = signal.get('confidence', 0)
                            signal_type = signal.get('signal', 'Unknown')
                            st.write(f"{i+1}. **{symbol}**: {signal_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})")
            else:
                st.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ ML –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'error' in analysis_status:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {analysis_status['error']}")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            analysis_status = {
                'total_symbols_with_1d_data': 0,
                'symbols_with_ml_results': 0,
                'symbols_with_strong_signals': 0,
                'ml_analysis_completed': False,
                'ready_for_cascade': False
            }
    
    with col2:
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'initial_ml_results' in st.session_state and st.session_state.initial_ml_results:
            if st.button("üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", use_container_width=True):
                print("üîÑ [CASCADE] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                
                with st.spinner("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞..."):
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        saved_results = st.session_state.initial_ml_results
                        saved_symbols = st.session_state.initial_ml_symbols
                        
                        print(f"üìä [CASCADE] –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(saved_results)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        results = asyncio.run(
                            cascade_analyzer.analyze_with_saved_ml_results(saved_results, saved_symbols)
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        st.session_state.cascade_results = results
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        successful_results = cascade_analyzer.get_successful_signals(results)
                        rejected_results = cascade_analyzer.get_rejected_signals(results)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        notification_count = 0
                        for result in results:
                            if result.final_signal:
                                try:
                                    asyncio.run(notification_manager.notify_cascade_signal(result))
                                    notification_count += 1
                                except Exception as e:
                                    print(f"‚ö†Ô∏è [CASCADE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {result.symbol}: {e}")
                        
                        st.success(f"‚úÖ –ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å–∏–º–≤–æ–ª–æ–≤")
                        st.rerun()
                        
                    except Exception as e:
                        print(f"‚ùå [CASCADE] –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
            print("üöÄ [CASCADE] –ö–Ω–æ–ø–∫–∞ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑' –Ω–∞–∂–∞—Ç–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            min_volume = st.session_state.get('min_volume', 1000000)
            min_avg_volume = st.session_state.get('min_avg_volume', 500000)
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            available_symbols = cascade_analyzer.get_available_symbols_with_1d_data(
                min_volume=min_volume, 
                min_avg_volume=min_avg_volume
            )
            time_estimate = cascade_analyzer.estimate_ml_analysis_time(len(available_symbols))
            
            with st.spinner(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {len(available_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ (–æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {time_estimate['formatted_time']})..."):
                try:
                    print("üìä [CASCADE] –ù–∞—á–∏–Ω–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
                    print(f"üìä [CASCADE] –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: min_volume={min_volume}, min_avg_volume={min_avg_volume}")
                    print(f"‚è±Ô∏è [CASCADE] –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {time_estimate['formatted_time']}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
                    print("üîç [CASCADE] –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞...")
                    pre_status = asyncio.run(cascade_analyzer.get_analysis_status())
                    print(f"üìà [CASCADE] –°—Ç–∞—Ç—É—Å –¥–æ –∞–Ω–∞–ª–∏–∑–∞: {pre_status}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    print("‚ö° [CASCADE] –ó–∞–ø—É—Å–∫–∞–µ–º analyze_all_available_symbols()...")
                    results = asyncio.run(cascade_analyzer.analyze_all_available_symbols(
                        min_volume=min_volume,
                        min_avg_volume=min_avg_volume,
                        use_db_cache=True
                    ))
                    print(f"‚úÖ [CASCADE] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    st.session_state.cascade_results = results
                    print("üíæ [CASCADE] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ session_state")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    successful_results = cascade_analyzer.get_successful_signals(results)
                    rejected_results = cascade_analyzer.get_rejected_signals(results)
                    print(f"üìä [CASCADE] –£—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(successful_results)}")
                    print(f"‚ùå [CASCADE] –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(rejected_results)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                    if successful_results:
                        print("üéØ [CASCADE] –£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
                        for i, result in enumerate(successful_results[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                            print(f"  {i+1}. {result.symbol}: {result.final_signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%})")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                    if rejected_results:
                        print("üö´ [CASCADE] –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
                        for i, result in enumerate(rejected_results[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                            print(f"  {i+1}. {result.symbol}: –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ {result.rejected_at_stage} - {result.rejection_reason}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    print("üì¢ [CASCADE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
                    notification_count = 0
                    for result in results:
                        if result.final_signal:
                            try:
                                asyncio.run(notification_manager.notify_cascade_signal(result))
                                notification_count += 1
                            except Exception as e:
                                print(f"‚ö†Ô∏è [CASCADE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {result.symbol}: {e}")
                    
                    print(f"üì® [CASCADE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notification_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    
                    st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print("üéâ [CASCADE] –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    st.rerun()
                    
                except Exception as e:
                    print(f"‚ùå [CASCADE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                    import traceback
                    print(f"üîç [CASCADE] Traceback: {traceback.format_exc()}")
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", use_container_width=True):
            st.rerun()
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", use_container_width=True):
            if 'cascade_results' in st.session_state:
                del st.session_state.cascade_results
            st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")
            st.rerun()
        
        # –ö–Ω–æ–ø–∫–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –∫—ç—à–∞
        if st.button("üîç –ò–Ω—Å–ø–µ–∫—Ü–∏—è –∫—ç—à–∞", use_container_width=True):
            try:
                cache_info = cascade_analyzer.inspect_ml_cache()
                st.success(f"‚úÖ –ò–Ω—Å–ø–µ–∫—Ü–∏—è –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–∞–∑–º–µ—Ä: {cache_info['cache_size']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫—ç—à–∞
                if cache_info['cache_size'] > 0:
                    st.write("**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞:**")
                    for symbol, details in list(cache_info['cache_details'].items())[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                        st.write(f"- **{symbol}**: {details['ensemble_signal']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {details['confidence']:.1%})")
                    
                    if cache_info['cache_size'] > 10:
                        st.write(f"... –∏ –µ—â–µ {cache_info['cache_size'] - 10} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                    if cache_info['strong_signals']:
                        st.write("**–°–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:**")
                        for signal in cache_info['strong_signals'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                            st.write(f"- **{signal['symbol']}**: {signal['signal']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.1%})")
                else:
                    st.info("–ö—ç—à –ø—É—Å—Ç–æ–π")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –∫—ç—à–∞: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
        if st.button("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫—ç—à–∞", use_container_width=True):
            try:
                integrity_info = cascade_analyzer.verify_cache_integrity()
                
                if integrity_info['is_valid']:
                    st.success(f"‚úÖ –ö—ç—à –≤–∞–ª–∏–¥–µ–Ω! –†–∞–∑–º–µ—Ä: {integrity_info['cache_size']}, –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {integrity_info['valid_entries']}")
                else:
                    st.error(f"‚ùå –ö—ç—à –Ω–µ–≤–∞–ª–∏–¥–µ–Ω! –ü—Ä–æ–±–ª–µ–º: {len(integrity_info['issues'])}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                    st.write(f"- –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {integrity_info['cache_size']}")
                    st.write(f"- –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {integrity_info['valid_entries']}")
                    st.write(f"- –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {integrity_info['invalid_entries']}")
                    st.write(f"- –ó–∞–ø–∏—Å–µ–π —Å –æ—à–∏–±–∫–∞–º–∏: {integrity_info['error_entries']}")
                
                with col2:
                    st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                    for rec in integrity_info['recommendations']:
                        st.write(f"- {rec}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                if integrity_info['issues']:
                    with st.expander("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –≤ –∫—ç—à–µ", expanded=False):
                        for issue in integrity_info['issues'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                            st.write(f"- {issue}")
                        if len(integrity_info['issues']) > 10:
                            st.write(f"... –∏ –µ—â–µ {len(integrity_info['issues']) - 10} –ø—Ä–æ–±–ª–µ–º")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞
        if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å ML –∞–Ω–∞–ª–∏–∑", use_container_width=True):
            try:
                print("üîÑ [FORCE_RESTART] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ ML –∞–Ω–∞–ª–∏–∑–∞...")
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à –∏ session_state
                if 'initial_ml_results' in st.session_state:
                    del st.session_state.initial_ml_results
                if 'initial_ml_symbols' in st.session_state:
                    del st.session_state.initial_ml_symbols
                if 'initial_ml_analysis_done' in st.session_state:
                    del st.session_state.initial_ml_analysis_done
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à –≤ CascadeAnalyzer
                cascade_analyzer.initial_ml_cache = {}
                
                print("üîÑ [FORCE_RESTART] –ö—ç—à –æ—á–∏—â–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                st.success("ML –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'initial_ml_results' in st.session_state and st.session_state.initial_ml_results:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", use_container_width=True):
                del st.session_state.initial_ml_results
                del st.session_state.initial_ml_symbols
                del st.session_state.initial_ml_analysis_done
                st.success("ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")
                st.rerun()
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î –∫—ç—à–µ–º
        st.subheader("üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î –∫—ç—à–µ–º")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ë–î –∫—ç—à–∞
            if st.button("üìä –°—Ç–∞—Ç—É—Å –ë–î –∫—ç—à–∞", use_container_width=True):
                try:
                    status = cascade_ml_cache.get_cache_status()
                    st.success("‚úÖ –°—Ç–∞—Ç—É—Å –ë–î –∫—ç—à–∞ –ø–æ–ª—É—á–µ–Ω")
                    
                    col1_status, col2_status = st.columns(2)
                    with col1_status:
                        st.write("**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                        st.write(f"- –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {status.get('total_entries', 0)}")
                        st.write(f"- –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {status.get('valid_entries', 0)}")
                        st.write(f"- –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: {status.get('expired_entries', 0)}")
                        st.write(f"- –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞: {status.get('cache_duration_hours', 0)} —á–∞—Å–æ–≤")
                    
                    with col2_status:
                        st.write("**–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:**")
                        if status.get('last_entry'):
                            last = status['last_entry']
                            st.write(f"- –ö–ª—é—á: {last.get('key', 'N/A')[:50]}...")
                            st.write(f"- –°–æ–∑–¥–∞–Ω–∞: {last.get('created_at', 'N/A')}")
                            st.write(f"- –ò—Å—Ç–µ–∫–∞–µ—Ç: {last.get('expires_at', 'N/A')}")
                        else:
                            st.write("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π")
                            
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ë–î –∫—ç—à–∞: {e}")
            
            # –ö–Ω–æ–ø–∫–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –ë–î –∫—ç—à–∞
            if st.button("üîç –ò–Ω—Å–ø–µ–∫—Ü–∏—è –ë–î –∫—ç—à–∞", use_container_width=True):
                try:
                    cache_info = cascade_ml_cache.inspect_cache()
                    st.success(f"‚úÖ –ò–Ω—Å–ø–µ–∫—Ü–∏—è –ë–î –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ {cache_info.get('total_entries', 0)} –∑–∞–ø–∏—Å–µ–π")
                    
                    if cache_info.get('entries'):
                        st.write("**–ó–∞–ø–∏—Å–∏ –≤ –ë–î –∫—ç—à–µ:**")
                        for entry in cache_info['entries'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                            st.write(f"- **{entry['key'][:30]}...**: {entry['symbols_count']} —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–∑–¥–∞–Ω–∞ {entry['created_at']}")
                            st.write(f"  - –ò—Å—Ç–µ–∫–ª–∞: {'–î–∞' if entry['is_expired'] else '–ù–µ—Ç'}")
                            st.write(f"  - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: min_volume={entry['min_volume']}, min_avg_volume={entry['min_avg_volume']}")
                            st.write("---")
                        
                        if len(cache_info['entries']) > 5:
                            st.write(f"... –∏ –µ—â–µ {len(cache_info['entries']) - 5} –∑–∞–ø–∏—Å–µ–π")
                    else:
                        st.write("–ë–î –∫—ç—à –ø—É—Å—Ç")
                        
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –ë–î –∫—ç—à–∞: {e}")
        
        with col2:
            # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î –∫—ç—à–∞
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ë–î –∫—ç—à", use_container_width=True):
                try:
                    deleted_count = cascade_ml_cache.clear_cache()
                    st.success(f"‚úÖ –ë–î –∫—ç—à –æ—á–∏—â–µ–Ω! –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î –∫—ç—à–∞: {e}")
            
            # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –ë–î –∫—ç—à–∞
            if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ë–î –∫—ç—à", use_container_width=True):
                try:
                    deleted_count = cascade_ml_cache.clear_expired_cache()
                    st.success(f"‚úÖ –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –ë–î –∫—ç—à –æ—á–∏—â–µ–Ω! –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –ë–î –∫—ç—à–∞: {e}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞
    st.subheader("–ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞")
    
    with st.expander("‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑", expanded=False):
        st.markdown("""
        **–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤:**
        
        1. **üìä –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑ (1d)** - –ê–Ω–∞–ª–∏–∑ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é ML –º–æ–¥–µ–ª–µ–π
        2. **üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞** - –û—Ç–±–æ—Ä —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚â• 50%)
        3. **‚è∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (1h)** - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –∏ –æ–±—ä–µ–º–∞
        4. **üéØ –ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (1m)** - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        5. **‚ö° –ú–∏–∫—Ä–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (1s)** - –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞
        
        **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—Ö–∞.
        """)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    if 'cascade_analysis_in_progress' in st.session_state and st.session_state.cascade_analysis_in_progress:
        st.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        st.progress(0.5)  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if 'cascade_results' in st.session_state:
        results = st.session_state.cascade_results
        successful_results = cascade_analyzer.get_successful_signals(results)
        rejected_results = cascade_analyzer.get_rejected_signals(results)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", len(results))
        
        with col2:
            st.metric("–£—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", len(successful_results))
        
        with col3:
            st.metric("–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", len(rejected_results))
        
        with col4:
            avg_confidence = sum(r.confidence for r in successful_results) / len(successful_results) if successful_results else 0
            st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.1%}")
        
        # –£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if successful_results:
            st.subheader("–£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            successful_data = []
            for result in successful_results:
                successful_data.append({
                    '–°–∏–º–≤–æ–ª': result.symbol,
                    '–°–∏–≥–Ω–∞–ª': result.final_signal,
                    '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{result.confidence:.1%}",
                    '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': f"{result.entry_price:.2f} RUB",
                    '–°—Ç–æ–ø-–ª–æ—Å—Å': f"{result.stop_loss:.2f} RUB",
                    '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç': f"{result.take_profit:.2f} RUB",
                    '–†–∏—Å–∫/–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å': f"{result.risk_reward:.1f}",
                    '–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è': "–î–∞" if result.auto_trade_enabled else "–ù–µ—Ç",
                    '–í—Ä–µ–º—è': result.timestamp.strftime('%H:%M:%S')
                })
            
            df_successful = pd.DataFrame(successful_data)
            st.dataframe(df_successful, use_container_width=True)
        
        # –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if rejected_results:
            st.subheader("–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
            
            rejected_data = []
            for result in rejected_results:
                rejected_data.append({
                    '–°–∏–º–≤–æ–ª': result.symbol,
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ': result.rejected_at_stage,
                    '–ü—Ä–∏—á–∏–Ω–∞': result.rejection_reason,
                    '–í—Ä–µ–º—è': result.timestamp.strftime('%H:%M:%S')
                })
            
            df_rejected = pd.DataFrame(rejected_data)
            st.dataframe(df_rejected, use_container_width=True)

with tab2:
    st.header("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
    
    # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏
    auto_trade_status = cascade_analyzer.get_auto_trade_status()
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.write("–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏:")
        st.write(f"- –í–∫–ª—é—á–µ–Ω–∞: {'–î–∞' if auto_trade_status['enabled'] else '–ù–µ—Ç'}")
        st.write(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {auto_trade_status['min_confidence']:.1%}")
        st.write(f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {auto_trade_status['max_position_size']} RUB")
        st.write(f"- –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {auto_trade_status['risk_per_trade']:.1%}")
        st.write(f"- –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å: {auto_trade_status['max_daily_trades']}")
        st.write(f"- –¢–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã: {auto_trade_status['trading_hours']['start']}:00 - {auto_trade_status['trading_hours']['end']}:00")
        st.write(f"- –°–µ–π—á–∞—Å —Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã: {'–î–∞' if auto_trade_status['is_trading_hours'] else '–ù–µ—Ç'}")
    
    with col2:
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"):
            st.rerun()

with tab3:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_config = notification_manager.get_notification_config()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        st.write(f"- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {'–î–∞' if notification_config['enabled'] else '–ù–µ—Ç'}")
        st.write(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {notification_config['min_confidence_for_notification']:.1%}")
        st.write(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {notification_config['min_risk_reward_for_notification']:.1f}")
        st.write(f"- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ: {'–î–∞' if notification_config['auto_trade_notifications'] else '–ù–µ—Ç'}")
        st.write(f"- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö: {'–î–∞' if notification_config['stage_rejection_notifications'] else '–ù–µ—Ç'}")
        st.write(f"- –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞: {'–î–∞' if notification_config['daily_summary'] else '–ù–µ—Ç'}")
    
    with col2:
        st.subheader("–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        st.write(f"- Telegram: {'–î–∞' if notification_config['telegram_enabled'] else '–ù–µ—Ç'}")
        st.write(f"- Email: {'–î–∞' if notification_config['email_enabled'] else '–ù–µ—Ç'}")
        st.write(f"- Webhook: {'–î–∞' if notification_config['webhook_enabled'] else '–ù–µ—Ç'}")

with tab4:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–ø–æ–≤
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
    
    stage_configs = cascade_analyzer.stage_configs
    
    for stage, config in stage_configs.items():
        with st.expander(f"–≠—Ç–∞–ø {stage}"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
                st.write(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {config['min_confidence']:.1%}")
                st.write(f"- –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {config['lookback_days']} –¥–Ω–µ–π")
            
            with col2:
                st.write("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
                if 'required_signals' in config:
                    st.write(f"- –¢—Ä–µ–±—É–µ–º—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {', '.join(config['required_signals'])}")
                if 'required_confirmations' in config:
                    st.write(f"- –¢—Ä–µ–±—É–µ–º—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {', '.join(config['required_confirmations'])}")

with tab5:
    st.header("–ò—Å—Ç–æ—Ä–∏—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    st.info("–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
    
    if 'cascade_results' in st.session_state:
        results = st.session_state.cascade_results
        
        # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
                try:
                    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    export_data = []
                    for result in results:
                        export_data.append(result.to_dict())
                    
                    df_export = pd.DataFrame(export_data)
                    csv = df_export.to_csv(index=False)
                    
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å CSV",
                        data=csv,
                        file_name=f"cascade_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv"
                    )
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        
        with col2:
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"):
                try:
                    export_data = [result.to_dict() for result in results]
                    json_data = json.dumps(export_data, indent=2, ensure_ascii=False)
                    
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å JSON",
                        data=json_data,
                        file_name=f"cascade_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                        mime="application/json"
                    )
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    else:
        st.info("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.")

# –§—É—Ç–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
st.divider()
st.caption("Cascade Multi-Timeframe Analyzer - –°–∏—Å—Ç–µ–º–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
