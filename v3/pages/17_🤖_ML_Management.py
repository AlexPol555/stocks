"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ML –º–æ–¥–µ–ª—è–º–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ–º.
–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–¥–µ–ª—è–º–∏, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import logging
import asyncio

# ML imports
try:
    from core.ml.model_manager import ml_model_manager
    from core.ml.storage import ml_storage
    from core.ml.training_scheduler import ml_training_scheduler
    from core.database import get_connection
    ML_AVAILABLE = True
except ImportError as e:
    ML_AVAILABLE = False
    st.error(f"ML modules not available: {e}")

logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="ML Management",
    page_icon="ü§ñ",
    layout="wide",
)

st.title("ü§ñ ML Management")
st.write("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ML –º–æ–¥–µ–ª—è–º–∏, –æ–±—É—á–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

if not ML_AVAILABLE:
    st.error("ML –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
if 'ml_scheduler_started' not in st.session_state:
    try:
        ml_training_scheduler.start_scheduler()
        st.session_state.ml_scheduler_started = True
        st.success("‚úÖ ML Training Scheduler –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")

# –°–∞–π–¥–±–∞—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
st.sidebar.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ML")

# –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_status = ml_training_scheduler.get_training_status()
st.sidebar.subheader("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
st.sidebar.metric("–ó–∞–ø—É—â–µ–Ω", "–î–∞" if scheduler_status['is_running'] else "–ù–µ—Ç")
st.sidebar.metric("–í—Å–µ–≥–æ –æ–±—É—á–µ–Ω–∏–π", scheduler_status['stats']['total_trainings'])
st.sidebar.metric("–£—Å–ø–µ—à–Ω—ã—Ö", scheduler_status['stats']['successful_trainings'])
st.sidebar.metric("–ù–µ—É–¥–∞—á–Ω—ã—Ö", scheduler_status['stats']['failed_trainings'])

if scheduler_status['stats']['last_training']:
    last_training = datetime.fromisoformat(scheduler_status['stats']['last_training'])
    st.sidebar.metric("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ", last_training.strftime("%H:%M:%S"))

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º
st.sidebar.subheader("üöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")

if st.sidebar.button("üîÑ –û–±—É—á–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏ (1d)", type="primary"):
    with st.spinner("–û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π..."):
        try:
            result = ml_training_scheduler.train_all_models_now('1d', 'lstm')
            if result['success']:
                st.success(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(result['results']['successful'])} —É—Å–ø–µ—à–Ω–æ, {len(result['results']['failed'])} –Ω–µ—É–¥–∞—á–Ω–æ")
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {result.get('error', 'Unknown error')}")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if st.sidebar.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–æ–¥–µ–ª–∏"):
    with st.spinner("–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–æ–¥–µ–ª–µ–π..."):
        try:
            cleaned_count = ml_training_scheduler.cleanup_expired_models()
            st.success(f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleaned_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π", 
    "üìà –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è", 
    "üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", 
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
    "üìã –õ–æ–≥–∏"
])

# === –í–ö–õ–ê–î–ö–ê 1: –°–¢–ê–¢–£–° –ú–û–î–ï–õ–ï–ô ===
with tab1:
    st.subheader("üìä –°—Ç–∞—Ç—É—Å ML –º–æ–¥–µ–ª–µ–π")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π
    try:
        model_status = ml_model_manager.get_model_status()
        
        if 'error' in model_status:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {model_status['error']}")
        else:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("–í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π", model_status['total_models'])
            col2.metric("–°–∏–º–≤–æ–ª–æ–≤", model_status['total_symbols'])
            col3.metric("–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å", f"{model_status['average_accuracy']:.2%}")
            col4.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", scheduler_status['active_tasks'])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")
            
            timeframe_data = []
            for tf, stats in model_status['timeframe_stats'].items():
                timeframe_data.append({
                    '–¢–∞–π–º—Ñ—Ä–µ–π–º': tf,
                    '–ú–æ–¥–µ–ª–µ–π': stats['total_models'],
                    '–°–∏–º–≤–æ–ª–æ–≤': stats['symbols'],
                    '–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å': f"{stats['avg_accuracy']:.2%}",
                    '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ': stats['latest_training'] or '–ù–∏–∫–æ–≥–¥–∞'
                })
            
            if timeframe_data:
                timeframe_df = pd.DataFrame(timeframe_data)
                st.dataframe(timeframe_df, use_container_width=True)
                
                # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
                if any(stats['avg_accuracy'] > 0 for stats in model_status['timeframe_stats'].values()):
                    fig = go.Figure(data=[
                        go.Bar(
                            x=list(model_status['timeframe_stats'].keys()),
                            y=[stats['avg_accuracy'] for stats in model_status['timeframe_stats'].values()],
                            text=[f"{stats['avg_accuracy']:.1%}" for stats in model_status['timeframe_stats'].values()],
                            textposition='auto',
                        )
                    ])
                    fig.update_layout(
                        title="–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º",
                        xaxis_title="–¢–∞–π–º—Ñ—Ä–µ–π–º",
                        yaxis_title="–¢–æ—á–Ω–æ—Å—Ç—å",
                        yaxis=dict(tickformat='.0%')
                    )
                    st.plotly_chart(fig, use_container_width=True)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–æ–¥–µ–ª–µ–π
            if model_status['models']:
                st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö")
                
                models_df = pd.DataFrame(model_status['models'])
                
                # –§–∏–ª—å—Ç—Ä—ã
                col1, col2, col3 = st.columns(3)
                with col1:
                    selected_timeframe = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É", ["–í—Å–µ"] + list(models_df['timeframe'].unique()))
                with col2:
                    min_accuracy = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å", 0.0, 1.0, 0.0, 0.01)
                with col3:
                    show_only_active = st.checkbox("–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ", value=True)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                filtered_df = models_df.copy()
                if selected_timeframe != "–í—Å–µ":
                    filtered_df = filtered_df[filtered_df['timeframe'] == selected_timeframe]
                if 'accuracy' in filtered_df.columns:
                    filtered_df = filtered_df[filtered_df['accuracy'] >= min_accuracy]
                if show_only_active and 'is_active' in filtered_df.columns:
                    filtered_df = filtered_df[filtered_df['is_active'] == True]
                
                st.dataframe(filtered_df, use_container_width=True)
                
                # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
                csv = filtered_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                    data=csv,
                    file_name=f"ml_models_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π: {e}")

# === –í–ö–õ–ê–î–ö–ê 2: –ò–°–¢–û–†–ò–Ø –û–ë–£–ß–ï–ù–ò–Ø ===
with tab2:
    st.subheader("üìà –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    col1, col2, col3 = st.columns(3)
    with col1:
        history_symbol = st.selectbox("–°–∏–º–≤–æ–ª", ["–í—Å–µ"] + [f"Symbol_{i}" for i in range(10)])
    with col2:
        history_timeframe = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º", ["–í—Å–µ", "1d", "1h", "1m", "1s"])
    with col3:
        history_limit = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", 10, 200, 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è
    try:
        history_df = ml_training_scheduler.get_training_history(
            symbol=history_symbol if history_symbol != "–í—Å–µ" else None,
            timeframe=history_timeframe if history_timeframe != "–í—Å–µ" else None,
            limit=history_limit
        )
        
        if not history_df.empty:
            st.dataframe(history_df, use_container_width=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è
            if 'duration_seconds' in history_df.columns:
                fig = go.Figure(data=[
                    go.Scatter(
                        x=history_df['training_start'],
                        y=history_df['duration_seconds'],
                        mode='markers+lines',
                        text=history_df['symbol'],
                        hovertemplate='<b>%{text}</b><br>–í—Ä–µ–º—è: %{y:.1f}—Å<br>–î–∞—Ç–∞: %{x}<extra></extra>'
                    )
                ])
                fig.update_layout(
                    title="–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π",
                    xaxis_title="–î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è",
                    yaxis_title="–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)"
                )
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è –ø—É—Å—Ç–∞")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è: {e}")

# === –í–ö–õ–ê–î–ö–ê 3: –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø ===
with tab3:
    st.subheader("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        pred_symbol = st.text_input("–°–∏–º–≤–æ–ª", value="SBER")
        pred_timeframe = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º", ["1d", "1h", "1m", "1s"], index=0)
        pred_days = st.slider("–î–Ω–µ–π –≤–ø–µ—Ä–µ–¥", 1, 7, 1)
        use_cache = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à", value=True)
        
        if st.button("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É", type="primary"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è..."):
                try:
                    result = ml_model_manager.predict_price_movement(
                        pred_symbol, pred_timeframe, pred_days, use_cache
                    )
                    
                    if 'error' in result:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {result['error']}")
                    else:
                        st.success("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session state –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        st.session_state['last_prediction'] = result
    
    with col2:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if 'last_prediction' in st.session_state:
            result = st.session_state['last_prediction']
            
            col_pred1, col_pred2 = st.columns(2)
            with col_pred1:
                st.metric(
                    "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
                    f"{result.get('prediction', 0):.4f}",
                    delta=f"{result.get('confidence', 0):.1%} confidence"
                )
            with col_pred2:
                st.metric(
                    "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ",
                    "–î–∞" if result.get('cached', False) else "–ù–µ—Ç",
                    delta=result.get('cache_date', '') if result.get('cached') else None
                )
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if 'model_metrics' in result:
                st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
                metrics = result['model_metrics']
                col_m1, col_m2, col_m3 = st.columns(3)
                col_m1.metric("MSE", f"{metrics.get('mse', 0):.6f}")
                col_m2.metric("MAE", f"{metrics.get('mae', 0):.6f}")
                col_m3.metric("RMSE", f"{metrics.get('rmse', 0):.6f}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    st.subheader("üòä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        sent_symbol = st.text_input("–°–∏–º–≤–æ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π", value="SBER")
        sent_timeframe = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π", ["1d", "1h", "1m", "1s"], index=0)
        sent_use_cache = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π", value=True)
        
        if st.button("üòä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", type="primary"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π..."):
                try:
                    sent_result = ml_model_manager.analyze_sentiment(
                        sent_symbol, sent_timeframe, sent_use_cache
                    )
                    
                    if 'error' in sent_result:
                        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {sent_result['error']}")
                    else:
                        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≥–æ—Ç–æ–≤!")
                        st.session_state['last_sentiment'] = sent_result
    
    with col2:
        if 'last_sentiment' in st.session_state:
            sent_result = st.session_state['last_sentiment']
            
            col_sent1, col_sent2 = st.columns(2)
            with col_sent1:
                sentiment = sent_result.get('sentiment', 'neutral')
                confidence = sent_result.get('confidence', 0.5)
                
                # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                if sentiment == 'positive':
                    st.success(f"üòä –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ ({confidence:.1%})")
                elif sentiment == 'negative':
                    st.error(f"üòû –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ ({confidence:.1%})")
                else:
                    st.info(f"üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ ({confidence:.1%})")
            
            with col_sent2:
                st.metric(
                    "–ù–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ",
                    sent_result.get('news_count', 0)
                )
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            if 'sentiment_distribution' in sent_result:
                st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π")
                dist = sent_result['sentiment_distribution']
                
                fig = go.Figure(data=[
                    go.Pie(
                        labels=list(dist.keys()),
                        values=list(dist.values()),
                        hole=0.3
                    )
                ])
                fig.update_layout(title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö")
                st.plotly_chart(fig, use_container_width=True)

# === –í–ö–õ–ê–î–ö–ê 4: –ù–ê–°–¢–†–û–ô–ö–ò ===
with tab4:
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ML —Å–∏—Å—Ç–µ–º—ã")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    st.subheader("üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    
    for timeframe, config in scheduler_status['schedule_configs'].items():
        with st.expander(f"–¢–∞–π–º—Ñ—Ä–µ–π–º {timeframe}"):
            col1, col2 = st.columns(2)
            
            with col1:
                enabled = st.checkbox("–í–∫–ª—é—á–µ–Ω", value=config['enabled'], key=f"enabled_{timeframe}")
                retrain_interval = st.number_input(
                    "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è (—á–∞—Å—ã)", 
                    min_value=0.1, 
                    max_value=24.0, 
                    value=config['retrain_interval_hours'],
                    key=f"interval_{timeframe}"
                )
            
            with col2:
                batch_size = st.number_input(
                    "–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞", 
                    min_value=1, 
                    max_value=20, 
                    value=config['batch_size'],
                    key=f"batch_{timeframe}"
                )
                priority = st.number_input(
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", 
                    min_value=1, 
                    max_value=10, 
                    value=config['priority'],
                    key=f"priority_{timeframe}"
                )
            
            if st.button(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {timeframe}", key=f"save_{timeframe}"):
                try:
                    ml_training_scheduler.update_schedule_config(timeframe, {
                        'enabled': enabled,
                        'retrain_interval_hours': retrain_interval,
                        'batch_size': int(batch_size),
                        'priority': int(priority)
                    })
                    st.success(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {timeframe} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º
    st.subheader("üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –º–æ–¥–µ–ª–µ–π"):
            try:
                cleaned = ml_storage.cleanup_expired_models()
                st.success(f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleaned} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫—ç—à–∞")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    with col2:
        if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
                models_df = ml_storage.get_active_models()
                st.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –∫—ç—à–µ: {len(models_df)}")
                
                if not models_df.empty:
                    st.dataframe(models_df[['symbol', 'model_type', 'timeframe', 'accuracy', 'training_date']], 
                               use_container_width=True)
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# === –í–ö–õ–ê–î–ö–ê 5: –õ–û–ì–ò ===
with tab5:
    st.subheader("üìã –õ–æ–≥–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
    
    stats = scheduler_status['stats']
    
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("–í—Å–µ–≥–æ –æ–±—É—á–µ–Ω–∏–π", stats['total_trainings'])
    col2.metric("–£—Å–ø–µ—à–Ω—ã—Ö", stats['successful_trainings'])
    col3.metric("–ù–µ—É–¥–∞—á–Ω—ã—Ö", stats['failed_trainings'])
    col4.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{stats['average_training_time']:.1f}—Å")
    
    # –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
    if stats['total_trainings'] > 0:
        success_rate = stats['successful_trainings'] / stats['total_trainings']
        
        fig = go.Figure(data=[
            go.Bar(
                x=['–£—Å–ø–µ—à–Ω—ã–µ', '–ù–µ—É–¥–∞—á–Ω—ã–µ'],
                y=[stats['successful_trainings'], stats['failed_trainings']],
                marker_color=['green', 'red']
            )
        ])
        fig.update_layout(
            title=f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–æ–±—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: {success_rate:.1%})",
            xaxis_title="–†–µ–∑—É–ª—å—Ç–∞—Ç",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
    st.subheader("üö® –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
        failed_history = ml_training_scheduler.get_training_history(limit=20)
        failed_df = failed_history[failed_history['training_status'] == 'failed'] if not failed_history.empty else pd.DataFrame()
        
        if not failed_df.empty:
            st.dataframe(failed_df[['symbol', 'model_type', 'timeframe', 'training_start', 'error_message']], 
                        use_container_width=True)
        else:
            st.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"):
        st.rerun()

# –§—É—Ç–µ—Ä
st.markdown("---")
st.caption("ü§ñ ML Management System - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
