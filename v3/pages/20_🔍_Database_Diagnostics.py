"""
Database Diagnostics Page.
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
"""

import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime

st.set_page_config(
    page_title="Database Diagnostics",
    page_icon="üîç",
    layout="wide"
)

st.title("üîç Database Diagnostics")
st.caption("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_path = "stock_data.db"

try:
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # 1. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.header("üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    cursor.execute("SELECT COUNT(*) FROM companies")
    companies_count = cursor.fetchone()[0]
    st.metric("üè¢ –ö–æ–º–ø–∞–Ω–∏–π –≤ –ë–î", companies_count)
    
    # 2. –¢–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
    st.header("üìà –¢–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö")
    
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE 'data_%'")
    data_tables = cursor.fetchall()
    
    if data_tables:
        table_info = []
        total_records = 0
        
        for table in data_tables:
            table_name = table[0]
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            total_records += count
            
            cursor.execute(f"SELECT COUNT(DISTINCT symbol) FROM {table_name}")
            symbols_count = cursor.fetchone()[0]
            
            cursor.execute(f"SELECT MAX(datetime) FROM {table_name}")
            last_record = cursor.fetchone()[0]
            
            table_info.append({
                'Table': table_name,
                'Records': count,
                'Symbols': symbols_count,
                'Last Update': last_record or 'Never'
            })
        
        st.dataframe(pd.DataFrame(table_info), use_container_width=True)
        st.metric("üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", total_records)
        
        # 3. –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        st.header("‚è∞ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")
        
        timeframes = ['1d', '1h', '1m', '5m', '15m']
        timeframe_info = []
        
        for tf in timeframes:
            table_name = f"data_{tf.replace('m', 'min').replace('h', 'hour')}"
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}'")
            if cursor.fetchone():
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                cursor.execute(f"SELECT COUNT(DISTINCT symbol) FROM {table_name}")
                symbols = cursor.fetchone()[0]
                timeframe_info.append({
                    'Timeframe': tf,
                    'Records': count,
                    'Symbols': symbols,
                    'Status': '‚úÖ Active'
                })
            else:
                timeframe_info.append({
                    'Timeframe': tf,
                    'Records': 0,
                    'Symbols': 0,
                    'Status': '‚ùå Not Created'
                })
        
        st.dataframe(pd.DataFrame(timeframe_info), use_container_width=True)
        
        # 4. –¢–æ–ø —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π
        st.header("üìä –¢–æ–ø —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π")
        
        for table in data_tables:
            table_name = table[0]
            cursor.execute(f"""
                SELECT symbol, COUNT(*) as count 
                FROM {table_name} 
                GROUP BY symbol 
                ORDER BY count DESC 
                LIMIT 10
            """)
            top_symbols = cursor.fetchall()
            
            if top_symbols:
                st.write(f"**{table_name}:**")
                symbols_df = pd.DataFrame(top_symbols, columns=['Symbol', 'Records'])
                st.dataframe(symbols_df, use_container_width=True)
        
        # 5. –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
        st.header("üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö")
        
        for table in data_tables:
            table_name = table[0]
            cursor.execute(f"SELECT MIN(datetime), MAX(datetime) FROM {table_name}")
            min_date, max_date = cursor.fetchone()
            if min_date and max_date:
                st.write(f"**{table_name}:** {min_date} - {max_date}")
        
        # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.header("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        if companies_count == 0:
            st.error("‚ùå –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π –≤ –ë–î. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö.")
        elif total_records == 0:
            st.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.")
        elif total_records < companies_count * 10:
            st.warning("‚ö†Ô∏è –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            st.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.")
        else:
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        if len(data_tables) < 5:
            st.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            st.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.")
        
        # 7. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        st.header("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        
        if st.button("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"):
            st.info("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            st.success("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–æ!")
    
    else:
        st.error("‚ùå –¢–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        st.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
    
    conn.close()
    
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# 8. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ —Å 500 —Å—Ç—Ä–æ–∫–∞–º–∏
st.header("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å 500 —Å—Ç—Ä–æ–∫–∞–º–∏")

st.info("""
**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ 500 —Å—Ç—Ä–æ–∫:**

1. **Rate Limiting API** - Tinkoff API –º–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
2. **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –∫–æ–¥–µ** - –≥–¥–µ-—Ç–æ –µ—Å—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
3. **–ù–µ–ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞** - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
4. **–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏** - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞

**–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:**
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π –≤ –ë–î
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏–º–≤–æ–ª–∞–º
- –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
""")

# 9. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"):
    st.rerun()
