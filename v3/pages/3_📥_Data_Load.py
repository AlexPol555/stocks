# bootstrap
from pathlib import Path
import sys

def _add_paths():
    here = Path(__file__).resolve()
    root = here.parents[1]
    if str(root) not in sys.path:
        sys.path.insert(0, str(root))
    for sub in ("core", "services"):
        ep = root / sub
        if ep.exists() and str(ep) not in sys.path:
            sys.path.insert(0, str(ep))
    parent = root.parent
    if parent and str(parent) not in sys.path:
        sys.path.insert(0, str(parent))
_add_paths()
# -----

import pandas as pd
import streamlit as st

from core import ui
from core.populate import bulk_populate_database_from_csv, incremental_populate_database_from_csv
from core.utils import open_database_connection, run_api_update_job

ui.page_header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–ò–º–ø–æ—Ä—Ç CSV –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ API.", icon="üì•")

mode = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º", ("CSV-—Ñ–∞–π–ª", "API –∫–æ—Ç–∏—Ä–æ–≤–∫–∏"), horizontal=True)

if mode == "CSV-—Ñ–∞–π–ª":
    upload_col, info_col = st.columns([2, 1])

    with upload_col:
        load_mode = st.selectbox("–¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏", ("–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", "–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è"))
        st.caption("–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º, –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –¥–æ–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏.")
        uploaded = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV", type="csv")

        if uploaded is not None:
            st.write("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:", f"{uploaded.size / 1024:.1f} –ö–ë")
            try:
                uploaded.seek(0)
                df_csv = pd.read_csv(uploaded, encoding="utf-8-sig")
                df_csv.columns = df_csv.columns.str.strip()
                st.dataframe(df_csv.head(), use_container_width=True)
                st.caption(f"–°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {df_csv.shape[0]}")

                uploaded.seek(0)
                conn = open_database_connection()
                if load_mode == "–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞":
                    bulk_populate_database_from_csv(uploaded, conn)
                    st.success("–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                else:
                    incremental_populate_database_from_csv(uploaded, conn)
                    st.success("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            except Exception as exc:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV: {exc}")
            finally:
                try:
                    conn.close()
                except Exception:
                    pass
        else:
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTF-8 (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–∞–ø—è—Ç–∞—è).")

    with info_col:
        st.markdown("**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ CSV**")
        st.markdown("- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: date, contract_code, open, high, low, close.\n- –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã ‚Äî ISO (YYYY-MM-DD).\n- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UTF-8 –±–µ–∑ BOM.")
else:
    st.markdown("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ —Ç–∏–∫–µ—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    api_mode = st.radio("–î–∏–∞–ø–∞–∑–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", ("–ü–æ–ª–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "–¢–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—Å–∫–∏"), horizontal=True)
    full_update = api_mode == "–ü–æ–ª–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", type="primary"):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ API..."):
            try:
                logs = run_api_update_job(full_update=full_update)
            except Exception as exc:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ API: {exc}")
            else:
                st.success("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                if logs:
                    st.write("–ñ—É—Ä–Ω–∞–ª:")
                    st.write(logs)
