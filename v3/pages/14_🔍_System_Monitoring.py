"""System monitoring page for health checks and metrics."""

from pathlib import Path

from core.bootstrap import setup_environment

setup_environment()

import asyncio
import os
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime, timedelta

from core import ui
from core.notifications import notification_manager, notify_signal, notify_error, notify_critical, notify_trade, dashboard_alerts
from core.monitoring import SystemHealthChecker, MetricsCollector

# Load .env file for notifications
def load_env_file():
    """Load environment variables from .env file."""
    from pathlib import Path
    import os
    env_file = Path(".env")
    if env_file.exists():
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value

# Load .env file
load_env_file()


ui.page_header(
    "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã",
    "Health checks, –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.",
    icon="üîç",
)

# Initialize components
if "health_checker" not in st.session_state:
    st.session_state["health_checker"] = SystemHealthChecker()

if "metrics_collector" not in st.session_state:
    st.session_state["metrics_collector"] = MetricsCollector()

health_checker = st.session_state["health_checker"]
metrics_collector = st.session_state["metrics_collector"]

# Sidebar controls
with st.sidebar:
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º")
    
    # Health checks
    if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å Health Checks", use_container_width=True):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è..."):
            results = asyncio.run(health_checker.run_all_checks())
            st.session_state["last_health_check"] = results
            st.success("Health checks –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    
    # Metrics collection
    if st.button("üìä –°–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏", use_container_width=True):
        with st.spinner("–°–æ–±–∏—Ä–∞—é—Ç—Å—è –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã..."):
            metrics = asyncio.run(metrics_collector.collect_metrics())
            st.session_state["last_metrics"] = metrics
            st.success("–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã!")
    
    # Start/stop metrics collection
    if metrics_collector.is_running():
        if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫", use_container_width=True):
            asyncio.run(metrics_collector.stop_collection())
            st.success("–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    else:
        if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫", use_container_width=True):
            asyncio.run(metrics_collector.start_collection(interval=60.0))
            st.success("–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω!")
    
    # Test notifications
    if st.button("üîî –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", use_container_width=True):
        with st.spinner("–¢–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π..."):
            results = asyncio.run(notification_manager.test_all_channels())
            st.session_state["notification_test_results"] = results
            st.success("–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!")

# Main content
tab1, tab2, tab3, tab4 = st.tabs(["Health Checks", "–ú–µ—Ç—Ä–∏–∫–∏", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"])

with tab1:
    st.subheader("üîç Health Checks")
    
    # Display last health check results
    if "last_health_check" in st.session_state:
        results = st.session_state["last_health_check"]
        
        # Overall status
        overall_status = health_checker.get_overall_status()
        status_colors = {
            "healthy": "üü¢",
            "warning": "üü°", 
            "critical": "üî¥",
            "unknown": "‚ö™"
        }
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å", f"{status_colors.get(overall_status, '‚ö™')} {overall_status.upper()}")
        with col2:
            st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫", len(results))
        with col3:
            healthy_count = sum(1 for r in results.values() if r.is_healthy)
            st.metric("–ó–¥–æ—Ä–æ–≤—ã—Ö", f"{healthy_count}/{len(results)}")
        
        # Individual component status
        st.subheader("–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        for component, result in results.items():
            with st.expander(f"{status_colors.get(result.status, '‚ö™')} {component}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {result.status}")
                    st.write(f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {result.message}")
                    if result.response_time_ms:
                        st.write(f"**–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {result.response_time_ms:.1f}ms")
                
                with col2:
                    st.write(f"**–í—Ä–µ–º—è:** {result.timestamp.strftime('%H:%M:%S')}")
                    if result.details:
                        st.write("**–î–µ—Ç–∞–ª–∏:**")
                        st.json(result.details)
    else:
        st.info("–ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å Health Checks' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")

with tab2:
    st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    # Current metrics
    current_metrics = metrics_collector.get_current_metrics()
    if current_metrics:
        st.subheader("–¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        # System metrics
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("CPU", f"{current_metrics.cpu_percent:.1f}%")
        with col2:
            st.metric("–ü–∞–º—è—Ç—å", f"{current_metrics.memory_percent:.1f}%")
        with col3:
            st.metric("–î–∏—Å–∫", f"{current_metrics.disk_percent:.1f}%")
        with col4:
            st.metric("–ü–æ—Ç–æ–∫–∏", current_metrics.process_num_threads)
        
        # Application metrics
        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("–†–∞–∑–º–µ—Ä –ë–î", f"{current_metrics.database_size / 1024 / 1024:.1f} MB")
        with col2:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã", current_metrics.active_signals)
        with col3:
            st.metric("–°–¥–µ–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è", current_metrics.trades_today)
        with col4:
            st.metric("–ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞", f"{current_metrics.process_memory_rss / 1024 / 1024:.1f} MB")
        
        # Historical metrics
        st.subheader("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏")
        since_time = datetime.now() - timedelta(hours=24)
        history = metrics_collector.get_metrics_history(since=since_time)
        
        if history:
            # Create DataFrame for plotting
            df = pd.DataFrame([m.to_dict() for m in history])
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            
            # CPU and Memory chart
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=df['timestamp'], 
                y=df['cpu_percent'],
                mode='lines',
                name='CPU %',
                line=dict(color='blue')
            ))
            fig.add_trace(go.Scatter(
                x=df['timestamp'], 
                y=df['memory_percent'],
                mode='lines',
                name='Memory %',
                line=dict(color='red')
            ))
            
            fig.update_layout(
                title="CPU –∏ Memory Usage",
                xaxis_title="–í—Ä–µ–º—è",
                yaxis_title="–ü—Ä–æ—Ü–µ–Ω—Ç",
                height=400
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Disk usage chart
            fig2 = go.Figure()
            fig2.add_trace(go.Scatter(
                x=df['timestamp'], 
                y=df['disk_percent'],
                mode='lines',
                name='Disk %',
                line=dict(color='green')
            ))
            
            fig2.update_layout(
                title="Disk Usage",
                xaxis_title="–í—Ä–µ–º—è",
                yaxis_title="–ü—Ä–æ—Ü–µ–Ω—Ç",
                height=300
            )
            st.plotly_chart(fig2, use_container_width=True)
        
        # Metrics summary
        summary = metrics_collector.get_metrics_summary(hours=24)
        if summary and summary.get("data_points", 0) > 0:
            st.subheader("–°–≤–æ–¥–∫–∞ –∑–∞ 24 —á–∞—Å–∞")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("CPU (—Å—Ä–µ–¥–Ω–µ–µ)", f"{summary['cpu']['avg']:.1f}%")
                st.metric("CPU (–º–∞–∫—Å)", f"{summary['cpu']['max']:.1f}%")
            with col2:
                st.metric("Memory (—Å—Ä–µ–¥–Ω–µ–µ)", f"{summary['memory']['avg']:.1f}%")
                st.metric("Memory (–º–∞–∫—Å)", f"{summary['memory']['max']:.1f}%")
            with col3:
                st.metric("Disk (—Å—Ä–µ–¥–Ω–µ–µ)", f"{summary['disk']['avg']:.1f}%")
                st.metric("Disk (–º–∞–∫—Å)", f"{summary['disk']['max']:.1f}%")
    else:
        st.info("–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–°–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏' –∏–ª–∏ '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫'")

with tab3:
    st.subheader("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    # Check Telegram status directly
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")
    telegram_configured = bool(bot_token and chat_id)
    
    # Notification manager status
    status = notification_manager.get_status()
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Telegram", "‚úÖ –í–∫–ª—é—á–µ–Ω" if telegram_configured else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω")
    with col2:
        st.metric("Health Checker", "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if status["health_checker_available"] else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    with col3:
        st.metric("Metrics Collector", "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if status["metrics_collector_available"] else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # Test results
    if "notification_test_results" in st.session_state:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        results = st.session_state["notification_test_results"]
        
        for channel, success in results.items():
            status_icon = "‚úÖ" if success else "‚ùå"
            st.write(f"{status_icon} {channel.capitalize()}: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
    
    # Send test notification
    st.subheader("–¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    # Test all 6 notification types
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìä –¢–µ—Å—Ç —Å–∏–≥–Ω–∞–ª–∞ (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)"):
            asyncio.run(notify_signal(
                ticker="TEST",
                signal_type="Test Signal",
                price=100.0,
                signal_value=1,
                additional_data={"test": True, "priority": 3}
            ))
            st.success("–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
        if st.button("‚ùå –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)"):
            asyncio.run(notify_error(
                error_type="Test Error",
                error_message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ",
                component="Test Component",
                additional_data={"test": True, "priority": 2}
            ))
            st.success("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
        if st.button("üö® –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4)"):
            asyncio.run(notify_critical(
                critical_type="Test Critical",
                message="–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                additional_data={"test": True, "priority": 4}
            ))
            st.success("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    
    with col2:
        if st.button("üí∞ –¢–µ—Å—Ç —Å–¥–µ–ª–∫–∏ (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)"):
            asyncio.run(notify_trade(
                ticker="TEST",
                side="BUY",
                quantity=10,
                price=100.0,
                total_value=1000.0,
                additional_data={"test": True, "priority": 3}
            ))
            st.success("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
        if st.button("üìà –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞ (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)"):
            from core.notifications import notification_manager
            report_data = {
                "total_signals": 5,
                "trades_executed": 2,
                "profit_loss": 150.50,
                "active_positions": 3
            }
            asyncio.run(notification_manager.send_daily_report(report_data))
            st.success("–¢–µ—Å—Ç–æ–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
        if st.button("üîç –¢–µ—Å—Ç health check (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)"):
            from core.notifications import notification_manager
            asyncio.run(notification_manager.send_health_check_notification(
                component="Test Component",
                status="healthy",
                details={"test": True, "priority": 1}
            ))
            st.success("–¢–µ—Å—Ç–æ–≤—ã–π health check –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    
    # Test all notifications with delays
    st.subheader("–¢–µ—Å—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏")
    
    # Information about Telegram rate limiting
    st.info("""
    **‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram Rate Limiting:**
    
    Telegram Bot API –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:
    - –ú–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    - –ü—Ä–∏ –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è
    - –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–µ –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    
    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    - –ü—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –¥–æ–π—Ç–∏
    - –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """)
    
    # Telegram status check
    if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Telegram"):
        from core.notifications import notification_manager
        status = notification_manager.get_status()
        
        st.write("**–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**")
        for channel, channel_status in status.get("channels", {}).items():
            if channel == "telegram":
                if channel_status.get("enabled", False):
                    st.success(f"‚úÖ Telegram: {channel_status.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    st.error(f"‚ùå Telegram: {channel_status.get('status', '–û—Ç–∫–ª—é—á–µ–Ω')}")
            else:
                status_icon = "‚úÖ" if channel_status.get("enabled", False) else "‚ùå"
                st.write(f"{status_icon} {channel.capitalize()}: {channel_status.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # Test single message
        if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"):
            try:
                asyncio.run(notification_manager.send_test_message())
                st.success("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    if st.button("üöÄ –¢–µ—Å—Ç –≤—Å–µ—Ö 6 —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏)"):
        async def test_all_notifications():
            results = []
            
            # Test signal
            try:
                await notify_signal(
                    ticker="BATCH_TEST",
                    signal_type="Batch Test Signal",
                    price=150.0,
                    signal_value=1,
                    additional_data={"batch_test": True, "order": 1}
                )
                results.append("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                results.append(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—à–∏–±–∫–∞: {e}")
            
            await asyncio.sleep(5)  # 5 second delay
            
            # Test error
            try:
                await notify_error(
                    error_type="Batch Test Error",
                    error_message="Batch test error message",
                    component="Batch Test Component",
                    additional_data={"batch_test": True, "order": 2}
                )
                results.append("‚úÖ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            except Exception as e:
                results.append(f"‚ùå –û—à–∏–±–∫–∞ –æ—à–∏–±–∫–∞: {e}")
            
            await asyncio.sleep(5)  # 5 second delay
            
            # Test critical
            try:
                await notify_critical(
                    critical_type="Batch Test Critical",
                    message="Batch test critical message",
                    additional_data={"batch_test": True, "order": 3}
                )
                results.append("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                results.append(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ—à–∏–±–∫–∞: {e}")
            
            await asyncio.sleep(5)  # 5 second delay
            
            # Test trade
            try:
                await notify_trade(
                    ticker="BATCH_TEST",
                    side="SELL",
                    quantity=5,
                    price=150.0,
                    total_value=750.0,
                    additional_data={"batch_test": True, "order": 4}
                )
                results.append("‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            except Exception as e:
                results.append(f"‚ùå –°–¥–µ–ª–∫–∞ –æ—à–∏–±–∫–∞: {e}")
            
            await asyncio.sleep(5)  # 5 second delay
            
            # Test daily report
            try:
                from core.notifications import notification_manager
                report_data = {
                    "total_signals": 10,
                    "trades_executed": 5,
                    "profit_loss": 250.75,
                    "active_positions": 8
                }
                await notification_manager.send_daily_report(report_data)
                results.append("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                results.append(f"‚ùå –û—Ç—á–µ—Ç –æ—à–∏–±–∫–∞: {e}")
            
            await asyncio.sleep(5)  # 5 second delay
            
            # Test health check
            try:
                await notification_manager.send_health_check_notification(
                    component="Batch Test Component",
                    status="healthy",
                    details={"batch_test": True, "order": 6}
                )
                results.append("‚úÖ Health check –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                results.append(f"‚ùå Health check –æ—à–∏–±–∫–∞: {e}")
            
            return results
        
        with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏..."):
            results = asyncio.run(test_all_notifications())
        
        # Show results
        st.success("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        for result in results:
            st.write(result)
        
        st.info("üí° –ï—Å–ª–∏ –Ω–µ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—à–ª–∏ –≤ Telegram, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ.")
    
    # Alternative test with even longer delays
    if st.button("üêå –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ (10 —Å–µ–∫ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)"):
        async def test_with_long_delays():
            results = []
            
            # Test signal
            try:
                await notify_signal(
                    ticker="SLOW_TEST",
                    signal_type="Slow Test Signal",
                    price=200.0,
                    signal_value=1,
                    additional_data={"slow_test": True, "order": 1}
                )
                results.append("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                results.append(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—à–∏–±–∫–∞: {e}")
            
            await asyncio.sleep(10)  # 10 second delay
            
            # Test error
            try:
                await notify_error(
                    error_type="Slow Test Error",
                    error_message="Slow test error message",
                    component="Slow Test Component",
                    additional_data={"slow_test": True, "order": 2}
                )
                results.append("‚úÖ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            except Exception as e:
                results.append(f"‚ùå –û—à–∏–±–∫–∞ –æ—à–∏–±–∫–∞: {e}")
            
            await asyncio.sleep(10)  # 10 second delay
            
            # Test critical
            try:
                await notify_critical(
                    critical_type="Slow Test Critical",
                    message="Slow test critical message",
                    additional_data={"slow_test": True, "order": 3}
                )
                results.append("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                results.append(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ—à–∏–±–∫–∞: {e}")
            
            await asyncio.sleep(10)  # 10 second delay
            
            # Test trade
            try:
                await notify_trade(
                    ticker="SLOW_TEST",
                    side="BUY",
                    quantity=3,
                    price=200.0,
                    total_value=600.0,
                    additional_data={"slow_test": True, "order": 4}
                )
                results.append("‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            except Exception as e:
                results.append(f"‚ùå –°–¥–µ–ª–∫–∞ –æ—à–∏–±–∫–∞: {e}")
            
            await asyncio.sleep(10)  # 10 second delay
            
            # Test daily report
            try:
                from core.notifications import notification_manager
                report_data = {
                    "total_signals": 15,
                    "trades_executed": 8,
                    "profit_loss": 350.25,
                    "active_positions": 12
                }
                await notification_manager.send_daily_report(report_data)
                results.append("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                results.append(f"‚ùå –û—Ç—á–µ—Ç –æ—à–∏–±–∫–∞: {e}")
            
            await asyncio.sleep(10)  # 10 second delay
            
            # Test health check
            try:
                await notification_manager.send_health_check_notification(
                    component="Slow Test Component",
                    status="healthy",
                    details={"slow_test": True, "order": 6}
                )
                results.append("‚úÖ Health check –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                results.append(f"‚ùå Health check –æ—à–∏–±–∫–∞: {e}")
            
            return results
        
        with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ (–æ–∫–æ–ª–æ 1 –º–∏–Ω—É—Ç—ã)..."):
            results = asyncio.run(test_with_long_delays())
        
        # Show results
        st.success("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        for result in results:
            st.write(result)
        
        st.info("üí° –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –æ–∫–æ–ª–æ 1 –º–∏–Ω—É—Ç—ã, –Ω–æ –¥–æ–ª–∂–µ–Ω –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.")
    
    # Dashboard notifications test
    st.subheader("Dashboard —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä Dashboard —Å–∏–≥–Ω–∞–ª"):
            dashboard_alerts.add_signal_alert(
                ticker="DASHBOARD_TEST",
                signal_type="Dashboard Test Signal",
                price=200.0,
                signal_value=1
            )
            st.success("Dashboard —Å–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    with col2:
        if st.button("‚ùå Dashboard –æ—à–∏–±–∫–∞"):
            dashboard_alerts.add_error_alert(
                error_type="Dashboard Test Error",
                error_message="–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è dashboard",
                component="Dashboard Test"
            )
            st.success("Dashboard –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    
    with col3:
        if st.button("üö® Dashboard –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ"):
            dashboard_alerts.add_critical_alert(
                critical_type="Dashboard Critical Test",
                message="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è dashboard"
            )
            st.success("Dashboard –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    
    # Show current notifications count
    stats = dashboard_alerts.get_notification_stats()
    st.info(f"üìä –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ dashboard: {stats['total']}, –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {stats['unread']}")

with tab4:
    st.subheader("üìã –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    
    # System information
    st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    
    try:
        import psutil
        import platform
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"**–û–°:** {platform.system()} {platform.release()}")
            st.write(f"**Python:** {platform.python_version()}")
            st.write(f"**CPU —è–¥–µ—Ä:** {psutil.cpu_count()}")
        
        with col2:
            memory = psutil.virtual_memory()
            st.write(f"**–û–±—â–∞—è –ø–∞–º—è—Ç—å:** {memory.total / 1024 / 1024 / 1024:.1f} GB")
            st.write(f"**–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å:** {memory.available / 1024 / 1024 / 1024:.1f} GB")
            st.write(f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:** {memory.percent:.1f}%")
        
    except ImportError:
        st.warning("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil")
    
    # Application status
    st.subheader("–°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    # Database status
    try:
        from core.database import open_database_connection
        conn = open_database_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM daily_data")
        daily_data_count = cursor.fetchone()[0]
        conn.close()
        
        st.success(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {daily_data_count}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    
    # Notification channels status
    st.subheader("–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    if telegram_configured:
        st.success("‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        st.write(f"Bot Token: {bot_token[:10]}...{bot_token[-10:] if len(bot_token) > 20 else bot_token}")
        st.write(f"Chat ID: {chat_id}")
    else:
        st.warning("‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        if not bot_token:
            st.write("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if not chat_id:
            st.write("‚ùå TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    st.success("‚úÖ Dashboard —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # Metrics collection status
    if metrics_collector.is_running():
        st.success("‚úÖ –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω")
    else:
        st.info("‚ÑπÔ∏è –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
