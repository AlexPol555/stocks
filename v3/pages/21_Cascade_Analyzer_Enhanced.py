#!/usr/bin/env python3
"""
Enhanced Cascade Analyzer Page.
–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —ç—Ç–∞–ø—É 1d.
"""

import streamlit as st
import asyncio
import pandas as pd
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Enhanced Cascade Analyzer",
    page_icon="üéØ",
    layout="wide"
)

st.title("üéØ Enhanced Cascade Analyzer")
st.markdown("**–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π ML —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π**")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
@st.cache_resource
def initialize_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    try:
        from core.cascade_analyzer import CascadeAnalyzer
        from core.cascade_analyzer_enhanced import EnhancedCascadeAnalyzer
        from core.cascade_notifications import CascadeNotificationManager
        from core.multi_timeframe_analyzer_enhanced import EnhancedMultiTimeframeStockAnalyzer
        from core.notifications import NotificationManager
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        api_key = None
        if hasattr(st, 'secrets') and hasattr(st.secrets, 'TINKOFF_API_KEY'):
            api_key = st.secrets.TINKOFF_API_KEY
        elif 'tinkoff_api_key' in st.session_state:
            api_key = st.session_state.tinkoff_api_key
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        multi_analyzer = EnhancedMultiTimeframeStockAnalyzer(api_key=api_key)
        cascade_analyzer = CascadeAnalyzer(
            multi_analyzer=multi_analyzer,
            ml_manager=st.session_state.get('ml_manager'),
            demo_trading=st.session_state.get('demo_trading')
        )
        enhanced_analyzer = EnhancedCascadeAnalyzer(cascade_analyzer)
        notification_manager = NotificationManager()
        cascade_notifications = CascadeNotificationManager(notification_manager)
        
        return enhanced_analyzer, cascade_notifications
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return None, None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
enhanced_analyzer, cascade_notifications = initialize_components()

if enhanced_analyzer is None:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    st.stop()

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
tab1, tab2, tab3 = st.tabs(["üéØ –ê–Ω–∞–ª–∏–∑", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"])

with tab1:
    st.header("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —ç—Ç–∞–ø—É 1d (ML —Å–∏–≥–Ω–∞–ª—ã)")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å ML —Ñ–∏–ª—å—Ç—Ä", type="primary"):
            # –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            enhanced_analyzer.clear_cache()
            if 'stage1d_results' in st.session_state:
                del st.session_state.stage1d_results
            st.rerun()
    
    with col2:
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
            stats = enhanced_analyzer.get_cache_stats()
            st.json(stats)
    
    with col3:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"):
            enhanced_analyzer.clear_cache()
            st.success("–ö—ç—à –æ—á–∏—â–µ–Ω")
    
    with col4:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
            if 'stage1d_results' in st.session_state:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
                results_df = pd.DataFrame([r.to_dict() for r in st.session_state.stage1d_results.values()])
                csv = results_df.to_csv(index=False)
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                    data=csv,
                    file_name=f"stage1d_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    try:
        all_symbols = enhanced_analyzer.cascade_analyzer.multi_analyzer.get_available_symbols()
        if not all_symbols:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤")
            st.stop()
        
        st.info(f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(all_symbols)}")
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        st.stop()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–∞ 1d
    if 'stage1d_results' not in st.session_state:
        st.info("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —ç—Ç–∞–ø—É 1d (ML —Å–∏–≥–Ω–∞–ª—ã)...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            import asyncio
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                stage1d_results = loop.run_until_complete(
                    enhanced_analyzer.prefilter_symbols_stage1d(all_symbols)
                )
                st.session_state.stage1d_results = stage1d_results
                
                progress_bar.progress(1.0)
                status_text.text("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                
            finally:
                loop.close()
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
            stage1d_results = {}
            st.session_state.stage1d_results = stage1d_results
    else:
        stage1d_results = st.session_state.stage1d_results
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    passed_symbols = enhanced_analyzer.get_passed_symbols(stage1d_results)
    buy_candidates = enhanced_analyzer.get_buy_candidates(stage1d_results)
    sell_candidates = enhanced_analyzer.get_sell_candidates(stage1d_results)
    top_candidates = enhanced_analyzer.get_top_candidates(stage1d_results, limit=20)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ", len(stage1d_results))
    
    with col2:
        st.metric("–ü—Ä–æ—à–ª–∏ —ç—Ç–∞–ø 1d", len(passed_symbols))
    
    with col3:
        st.metric("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã BUY", len(buy_candidates))
    
    with col4:
        st.metric("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã SELL", len(sell_candidates))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    if top_candidates:
        st.subheader("üèÜ –¢–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        candidates_data = []
        for result in top_candidates:
            candidates_data.append({
                '–°–∏–º–≤–æ–ª': result.symbol,
                '–°–∏–≥–Ω–∞–ª': result.signal,
                '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{result.confidence:.1%}",
                '–ê–Ω—Å–∞–º–±–ª—å': result.ensemble_signal,
                '–¶–µ–Ω–∞': result.price_signal,
                '–í—Ä–µ–º—è': result.timestamp.strftime('%H:%M:%S')
            })
        
        df = pd.DataFrame(candidates_data)
        st.dataframe(df, use_container_width=True)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üéØ –í—ã–±—Ä–∞—Ç—å —Ç–æ–ø-10"):
                top_10_symbols = [r.symbol for r in top_candidates[:10]]
                st.session_state.selected_candidates = top_10_symbols
                st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(top_10_symbols)} —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        
        with col2:
            if st.button("üìà –í—ã–±—Ä–∞—Ç—å BUY —Å–∏–≥–Ω–∞–ª—ã"):
                buy_symbols = [r.symbol for r in buy_candidates]
                st.session_state.selected_candidates = buy_symbols
                st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(buy_symbols)} BUY —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        with col3:
            if st.button("üìâ –í—ã–±—Ä–∞—Ç—å SELL —Å–∏–≥–Ω–∞–ª—ã"):
                sell_symbols = [r.symbol for r in sell_candidates]
                st.session_state.selected_candidates = sell_symbols
                st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(sell_symbols)} SELL —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        if 'selected_candidates' in st.session_state:
            selected = st.session_state.selected_candidates
            st.subheader(f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã ({len(selected)})")
            
            # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            selected_symbols = []
            for symbol in selected:
                if symbol in stage1d_results:
                    result = stage1d_results[symbol]
                    col1, col2, col3 = st.columns([1, 2, 1])
                    
                    with col1:
                        if st.checkbox(f"{symbol}", key=f"candidate_{symbol}"):
                            selected_symbols.append(symbol)
                    
                    with col2:
                        st.write(f"**{result.signal}** | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%}")
                    
                    with col3:
                        st.write(f"–ê–Ω—Å–∞–º–±–ª—å: {result.ensemble_signal}")
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
            if selected_symbols and st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑", type="primary"):
                st.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {len(selected_symbols)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
                
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑..."):
                    try:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                        import asyncio
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        
                        try:
                            results = loop.run_until_complete(
                                enhanced_analyzer.analyze_prefiltered_symbols(selected_symbols)
                            )
                            st.session_state.cascade_results = results
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            for result in results:
                                if result.final_signal:
                                    loop.run_until_complete(
                                        cascade_notifications.notify_cascade_signal(result)
                                    )
                        
                        finally:
                            loop.close()
                        
                        st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        successful_results = [r for r in results if r.final_signal is not None]
                        if successful_results:
                            st.subheader("üéØ –£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
                            
                            results_data = []
                            for result in successful_results:
                                results_data.append({
                                    '–°–∏–º–≤–æ–ª': result.symbol,
                                    '–°–∏–≥–Ω–∞–ª': result.final_signal,
                                    '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{result.confidence:.1%}",
                                    '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': f"{result.entry_price:.2f} ‚ÇΩ",
                                    'Stop Loss': f"{result.stop_loss:.2f} ‚ÇΩ",
                                    'Take Profit': f"{result.take_profit:.2f} ‚ÇΩ",
                                    'R/R': f"{result.risk_reward:.1f}",
                                    '–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è': "–î–∞" if result.auto_trade_enabled else "–ù–µ—Ç"
                                })
                            
                            results_df = pd.DataFrame(results_data)
                            st.dataframe(results_df, use_container_width=True)
                        else:
                            st.warning("–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                        
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
            else:
                st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    else:
        st.warning("–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø—Ä–æ—à–µ–¥—à–∏—Ö —ç—Ç–∞–ø 1d")

with tab2:
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
    
    if 'stage1d_results' in st.session_state:
        stage1d_results = st.session_state.stage1d_results
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total = len(stage1d_results)
        passed = len(enhanced_analyzer.get_passed_symbols(stage1d_results))
        buy_count = len(enhanced_analyzer.get_buy_candidates(stage1d_results))
        sell_count = len(enhanced_analyzer.get_sell_candidates(stage1d_results))
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        import matplotlib.pyplot as plt
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals = ['BUY', 'SELL', 'HOLD']
        counts = [
            len([r for r in stage1d_results.values() if r.signal == 'BUY']),
            len([r for r in stage1d_results.values() if r.signal == 'SELL']),
            len([r for r in stage1d_results.values() if r.signal == 'HOLD'])
        ]
        
        ax1.pie(counts, labels=signals, autopct='%1.1f%%', startangle=90)
        ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidences = [r.confidence for r in stage1d_results.values()]
        ax2.hist(confidences, bins=20, alpha=0.7, edgecolor='black')
        ax2.set_xlabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
        ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤')
        ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏')
        
        st.pyplot(fig)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤", total)
            st.metric("–ü—Ä–æ—à–ª–∏ —ç—Ç–∞–ø 1d", passed, f"{passed/total*100:.1f}%" if total > 0 else "0%")
        
        with col2:
            st.metric("BUY —Å–∏–≥–Ω–∞–ª—ã", buy_count)
            st.metric("SELL —Å–∏–≥–Ω–∞–ª—ã", sell_count)
    
    else:
        st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

with tab3:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    st.subheader("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        min_confidence = st.slider(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–∞–ø–∞ 1d",
            min_value=0.5,
            max_value=0.9,
            value=0.6,
            step=0.1,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ML —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 1d"
        )
    
    with col2:
        max_candidates = st.slider(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
            min_value=5,
            max_value=50,
            value=20,
            step=5,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞
    st.subheader("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞")
    
    cache_hours = st.slider(
        "–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (—á–∞—Å—ã)",
        min_value=1,
        max_value=24,
        value=1,
        step=1,
        help="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–∞ 1d"
    )
    
    if st.button("üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    if 'stage1d_results' in st.session_state:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞")
        cache_stats = enhanced_analyzer.get_cache_stats()
        st.json(cache_stats)
