#!/usr/bin/env python3
"""
Fixed Cascade Analyzer Page.
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é.
"""

import streamlit as st
import pandas as pd
from datetime import datetime
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Fixed Cascade Analyzer",
    page_icon="üéØ",
    layout="wide"
)

st.title("üéØ Fixed Cascade Analyzer")
st.markdown("**–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞**")

# –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
class SimpleStage1dResult:
    """–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 1d."""
    
    def __init__(self, symbol: str, signal: str, confidence: float, ensemble_signal: str, price_signal: str):
        self.symbol = symbol
        self.signal = signal
        self.confidence = confidence
        self.ensemble_signal = ensemble_signal
        self.price_signal = price_signal
        self.timestamp = datetime.now()
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'symbol': self.symbol,
            'signal': self.signal,
            'confidence': self.confidence,
            'ensemble_signal': self.ensemble_signal,
            'price_signal': self.price_signal,
            'timestamp': self.timestamp.isoformat()
        }

class SimpleFixedAnalyzer:
    """–ü—Ä–æ—Å—Ç–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    
    def __init__(self):
        self.stage1d_cache = {}
        
    def prefilter_symbols_stage1d(self, symbols: List[str]) -> Dict[str, SimpleStage1dResult]:
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —ç—Ç–∞–ø—É 1d."""
        results = {}
        
        for symbol in symbols:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if symbol in self.stage1d_cache:
                cache_result = self.stage1d_cache[symbol]
                if (datetime.now() - cache_result.timestamp).seconds < 3600:
                    results[symbol] = cache_result
                    continue
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ ML —Å–∏–≥–Ω–∞–ª–æ–≤
            if symbol in ['SBER', 'GAZP', 'LKOH', 'MGNT', 'NLMK']:
                signal = 'BUY'
                confidence = 0.75
                ensemble_signal = 'BUY'
                price_signal = 'BUY'
            elif symbol in ['NVTK', 'ROSN', 'YNDX', 'VKCO']:
                signal = 'SELL'
                confidence = 0.70
                ensemble_signal = 'SELL'
                price_signal = 'SELL'
            else:
                signal = 'HOLD'
                confidence = 0.45
                ensemble_signal = 'HOLD'
                price_signal = 'HOLD'
            
            result = SimpleStage1dResult(
                symbol=symbol,
                signal=signal,
                confidence=confidence,
                ensemble_signal=ensemble_signal,
                price_signal=price_signal
            )
            
            self.stage1d_cache[symbol] = result
            results[symbol] = result
        
        return results
    
    def get_passed_symbols(self, stage1d_results: Dict[str, SimpleStage1dResult]) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ—à–µ–¥—à–∏–µ —ç—Ç–∞–ø 1d."""
        return [symbol for symbol, result in stage1d_results.items() 
                if result.signal in ['BUY', 'SELL'] and result.confidence >= 0.6]
    
    def get_buy_candidates(self, stage1d_results: Dict[str, SimpleStage1dResult]) -> List[SimpleStage1dResult]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É."""
        return [result for result in stage1d_results.values() 
                if result.signal == 'BUY' and result.confidence >= 0.6]
    
    def get_sell_candidates(self, stage1d_results: Dict[str, SimpleStage1dResult]) -> List[SimpleStage1dResult]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É."""
        return [result for result in stage1d_results.values() 
                if result.signal == 'SELL' and result.confidence >= 0.6]
    
    def get_top_candidates(self, stage1d_results: Dict[str, SimpleStage1dResult], limit: int = 20) -> List[SimpleStage1dResult]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏."""
        candidates = [result for result in stage1d_results.values() 
                     if result.signal in ['BUY', 'SELL'] and result.confidence >= 0.6]
        
        candidates.sort(key=lambda x: x.confidence, reverse=True)
        return candidates[:limit]
    
    def analyze_prefiltered_symbols(self, symbols: List[str]) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        results = []
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        simulation_data = {
            'SBER': {'signal': 'BUY', 'confidence': 0.85, 'entry': 250.50, 'sl': 245.00, 'tp': 260.00, 'rr': 2.0},
            'GAZP': {'signal': 'BUY', 'confidence': 0.80, 'entry': 180.25, 'sl': 175.00, 'tp': 190.00, 'rr': 1.9},
            'LKOH': {'signal': 'BUY', 'confidence': 0.75, 'entry': 6200.00, 'sl': 6100.00, 'tp': 6400.00, 'rr': 2.0},
            'MGNT': {'signal': 'BUY', 'confidence': 0.72, 'entry': 5200.00, 'sl': 5100.00, 'tp': 5400.00, 'rr': 2.0},
            'NLMK': {'signal': 'BUY', 'confidence': 0.70, 'entry': 150.00, 'sl': 145.00, 'tp': 160.00, 'rr': 2.0},
            'NVTK': {'signal': 'SELL', 'confidence': 0.78, 'entry': 1800.00, 'sl': 1850.00, 'tp': 1700.00, 'rr': 3.0},
            'ROSN': {'signal': 'SELL', 'confidence': 0.75, 'entry': 550.00, 'sl': 570.00, 'tp': 520.00, 'rr': 1.7},
            'YNDX': {'signal': 'SELL', 'confidence': 0.70, 'entry': 2800.00, 'sl': 2900.00, 'tp': 2600.00, 'rr': 2.0},
            'VKCO': {'signal': 'SELL', 'confidence': 0.68, 'entry': 450.00, 'sl': 470.00, 'tp': 420.00, 'rr': 2.0},
        }
        
        for symbol in symbols:
            if symbol in simulation_data:
                data = simulation_data[symbol]
                result = {
                    'symbol': symbol,
                    'final_signal': data['signal'],
                    'confidence': data['confidence'],
                    'entry_price': data['entry'],
                    'stop_loss': data['sl'],
                    'take_profit': data['tp'],
                    'risk_reward': data['rr'],
                    'auto_trade_enabled': True
                }
            else:
                result = {
                    'symbol': symbol,
                    'final_signal': None,
                    'confidence': 0.0,
                    'entry_price': 0.0,
                    'stop_loss': 0.0,
                    'take_profit': 0.0,
                    'risk_reward': 0.0,
                    'auto_trade_enabled': False,
                    'rejection_reason': 'Failed at stage 1h'
                }
            
            results.append(result)
        
        return results
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–∞ 1d."""
        self.stage1d_cache.clear()
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞."""
        total = len(self.stage1d_cache)
        passed = len([r for r in self.stage1d_cache.values() if r.signal in ['BUY', 'SELL']])
        buy_signals = len([r for r in self.stage1d_cache.values() if r.signal == 'BUY'])
        sell_signals = len([r for r in self.stage1d_cache.values() if r.signal == 'SELL'])
        
        return {
            'total_cached': total,
            'passed_stage1d': passed,
            'buy_signals': buy_signals,
            'sell_signals': sell_signals,
            'cache_hit_rate': f"{passed/total*100:.1f}%" if total > 0 else "0%"
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
@st.cache_resource
def get_analyzer():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    return SimpleFixedAnalyzer()

analyzer = get_analyzer()

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.header("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —ç—Ç–∞–ø—É 1d (ML —Å–∏–≥–Ω–∞–ª—ã)")

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
col1, col2, col3, col4 = st.columns(4)

with col1:
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å ML —Ñ–∏–ª—å—Ç—Ä", type="primary"):
        analyzer.clear_cache()
        if 'stage1d_results' in st.session_state:
            del st.session_state.stage1d_results
        st.rerun()

with col2:
    if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
        stats = analyzer.get_cache_stats()
        st.json(stats)

with col3:
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"):
        analyzer.clear_cache()
        st.success("–ö—ç—à –æ—á–∏—â–µ–Ω")

with col4:
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
        if 'stage1d_results' in st.session_state:
            results_df = pd.DataFrame([r.to_dict() for r in st.session_state.stage1d_results.values()])
            csv = results_df.to_csv(index=False)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                data=csv,
                file_name=f"stage1d_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )

# –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
all_symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'MGNT', 'YNDX', 'VKCO', 'NLMK', 'ALRS', 'CHMF', 'MTSS', 'UNAC', 'CNRU', 'VSMO']

st.info(f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(all_symbols)} | –†–µ–∂–∏–º: –î–µ–º–æ –≤–µ—Ä—Å–∏—è")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–∞ 1d
if 'stage1d_results' not in st.session_state:
    st.info("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —ç—Ç–∞–ø—É 1d (ML —Å–∏–≥–Ω–∞–ª—ã)...")
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        stage1d_results = analyzer.prefilter_symbols_stage1d(all_symbols)
        st.session_state.stage1d_results = stage1d_results
        
        progress_bar.progress(1.0)
        status_text.text("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
        stage1d_results = {}
        st.session_state.stage1d_results = stage1d_results
else:
    stage1d_results = st.session_state.stage1d_results

# –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
passed_symbols = analyzer.get_passed_symbols(stage1d_results)
buy_candidates = analyzer.get_buy_candidates(stage1d_results)
sell_candidates = analyzer.get_sell_candidates(stage1d_results)
top_candidates = analyzer.get_top_candidates(stage1d_results, limit=20)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ", len(stage1d_results))

with col2:
    st.metric("–ü—Ä–æ—à–ª–∏ —ç—Ç–∞–ø 1d", len(passed_symbols))

with col3:
    st.metric("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã BUY", len(buy_candidates))

with col4:
    st.metric("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã SELL", len(sell_candidates))

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
if top_candidates:
    st.subheader("üèÜ –¢–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
    
    candidates_data = []
    for result in top_candidates:
        candidates_data.append({
            '–°–∏–º–≤–æ–ª': result.symbol,
            '–°–∏–≥–Ω–∞–ª': result.signal,
            '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{result.confidence:.1%}",
            '–ê–Ω—Å–∞–º–±–ª—å': result.ensemble_signal,
            '–¶–µ–Ω–∞': result.price_signal,
            '–í—Ä–µ–º—è': result.timestamp.strftime('%H:%M:%S')
        })
    
    df = pd.DataFrame(candidates_data)
    st.dataframe(df, width='stretch')
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üéØ –¢–æ–ø-10"):
            top_10_symbols = [r.symbol for r in top_candidates[:10]]
            st.session_state.selected_candidates = top_10_symbols
            st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(top_10_symbols)} —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    
    with col2:
        if st.button("üìà –í—Å–µ BUY"):
            buy_symbols = [r.symbol for r in buy_candidates]
            st.session_state.selected_candidates = buy_symbols
            st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(buy_symbols)} BUY —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    with col3:
        if st.button("üìâ –í—Å–µ SELL"):
            sell_symbols = [r.symbol for r in sell_candidates]
            st.session_state.selected_candidates = sell_symbols
            st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(sell_symbols)} SELL —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    with col4:
        if st.button("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ 5"):
            import random
            random_symbols = random.sample(passed_symbols, min(5, len(passed_symbols)))
            st.session_state.selected_candidates = random_symbols
            st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(random_symbols)} —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if passed_symbols:
        st.markdown("---")
        st.markdown("### üöÄ –ó–∞–ø—É—Å–∫ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø—Ä–æ—à–µ–¥—à–∏—Ö —ç—Ç–∞–ø 1d", type="primary", key="analyze_all_passed"):
                st.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {len(passed_symbols)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
                
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑..."):
                    try:
                        results = analyzer.analyze_prefiltered_symbols(passed_symbols)
                        st.session_state.cascade_results = results
                        
                        st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        successful_results = [r for r in results if r.get('final_signal') is not None]
                        if successful_results:
                            st.subheader("üéØ –£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
                            
                            results_data = []
                            for result in successful_results:
                                results_data.append({
                                    '–°–∏–º–≤–æ–ª': result['symbol'],
                                    '–°–∏–≥–Ω–∞–ª': result['final_signal'],
                                    '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{result['confidence']:.1%}",
                                    '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': f"{result['entry_price']:.2f} ‚ÇΩ",
                                    'Stop Loss': f"{result['stop_loss']:.2f} ‚ÇΩ",
                                    'Take Profit': f"{result['take_profit']:.2f} ‚ÇΩ",
                                    'R/R': f"{result['risk_reward']:.1f}",
                                    '–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è': "–î–∞" if result['auto_trade_enabled'] else "–ù–µ—Ç"
                                })
                            
                            results_df = pd.DataFrame(results_data)
                            st.dataframe(results_df, width='stretch')
                        else:
                            st.warning("–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                        
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if 'selected_candidates' in st.session_state:
        selected = st.session_state.selected_candidates
        st.subheader(f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã ({len(selected)})")
        
        # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        selected_symbols = []
        for symbol in selected:
            if symbol in stage1d_results:
                result = stage1d_results[symbol]
                col1, col2, col3 = st.columns([1, 2, 1])
                
                with col1:
                    if st.checkbox(f"{symbol}", key=f"candidate_{symbol}"):
                        selected_symbols.append(symbol)
                
                with col2:
                    st.write(f"**{result.signal}** | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%}")
                
                with col3:
                    st.write(f"–ê–Ω—Å–∞–º–±–ª—å: {result.ensemble_signal}")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        if selected_symbols and st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑", type="primary", key="analyze_selected"):
            st.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {len(selected_symbols)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
            
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑..."):
                try:
                    results = analyzer.analyze_prefiltered_symbols(selected_symbols)
                    st.session_state.cascade_results = results
                    
                    st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    successful_results = [r for r in results if r.get('final_signal') is not None]
                    if successful_results:
                        st.subheader("üéØ –£—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
                        
                        results_data = []
                        for result in successful_results:
                            results_data.append({
                                '–°–∏–º–≤–æ–ª': result['symbol'],
                                '–°–∏–≥–Ω–∞–ª': result['final_signal'],
                                '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{result['confidence']:.1%}",
                                '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': f"{result['entry_price']:.2f} ‚ÇΩ",
                                'Stop Loss': f"{result['stop_loss']:.2f} ‚ÇΩ",
                                'Take Profit': f"{result['take_profit']:.2f} ‚ÇΩ",
                                'R/R': f"{result['risk_reward']:.1f}",
                                '–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è': "–î–∞" if result['auto_trade_enabled'] else "–ù–µ—Ç"
                            })
                        
                        results_df = pd.DataFrame(results_data)
                        st.dataframe(results_df, width='stretch')
                    else:
                        st.warning("–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

else:
    st.warning("–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø—Ä–æ—à–µ–¥—à–∏—Ö —ç—Ç–∞–ø 1d")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
st.markdown("---")
st.markdown("### ‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")

st.info("""
**–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞**:

1. **–≠—Ç–∞–ø 1d**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
2. **–í—ã–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤**: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
3. **–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑**: –≠—Ç–∞–ø—ã 1h ‚Üí 1m ‚Üí 1s –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
4. **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã**: –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞

**–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é!**
""")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
if 'stage1d_results' in st.session_state:
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞")
    cache_stats = analyzer.get_cache_stats()
    st.json(cache_stats)




