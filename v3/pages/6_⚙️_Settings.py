from core.bootstrap import setup_environment

setup_environment()

import os

import streamlit as st

from core import demo_trading, ui, utils

ui.page_header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ –∏ –¥–µ–º–æ-—Å—á—ë—Ç–æ–º.", icon="‚öôÔ∏è")

ui.section_title("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü")
all_pages = [
    ("Dashboard", "üìä –î–∞—à–±–æ—Ä–¥"),
    ("Analyzer", "üßÆ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
    ("Data_Load", "üì• –ó–∞–≥—Ä—É–∑–∫–∞"),
    ("Auto_Update", "üîÅ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"),
    ("Orders", "üõí –û—Ä–¥–µ—Ä—ã"),
    ("Demo_Stats", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–º–æ"),
    ("Lightweight_Chart", "üìà –õ—ë–≥–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏"),
    ("Debug", "üß∞ –û—Ç–ª–∞–¥–∫–∞"),
]

default_visibility = {key: True for key, _ in all_pages}
default_visibility["Debug"] = False

visibility = st.session_state.get("page_visibility", default_visibility.copy())
cols = st.columns(3)
for idx, (key, label) in enumerate(all_pages):
    with cols[idx % 3]:
        visibility[key] = st.checkbox(label, value=visibility.get(key, default_visibility[key]))
st.session_state["page_visibility"] = visibility
st.caption("–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∫ —Å–∞–π–¥–±–∞—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")

ui.section_title("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
try:
    secrets = utils._secrets_dict()
    if secrets:
        st.success("–§–∞–π–ª secrets.toml –Ω–∞–π–¥–µ–Ω. –ö–ª—é—á–∏:" + ", ".join(secrets.keys()))
    else:
        st.info("–§–∞–π–ª secrets.toml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
except Exception as exc:
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å secrets.toml: {exc}")

env_api = os.getenv("TINKOFF_API_KEY")
env_db = os.getenv("DB_PATH")
info_cols = st.columns(2)
info_cols[0].metric("TINKOFF_API_KEY", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω" if env_api else "–Ω–µ—Ç")
info_cols[1].metric("DB_PATH", env_db or "–Ω–µ –∑–∞–¥–∞–Ω")

ui.section_title("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
db_path = utils.read_db_path()
st.write("–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", db_path)
try:
    db_size = os.path.getsize(db_path)
    st.write("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:", f"{db_size / 1024:.1f} –ö–ë")
except Exception:
    st.info("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏.")

ui.section_title("–î–µ–º–æ-—Å—á—ë—Ç")
conn_demo = None
try:
    conn_demo = utils.open_database_connection()
    snapshot = demo_trading.get_account_snapshot(conn_demo)
    account_info = demo_trading.get_account(conn_demo)
    currency = account_info.get("currency", "RUB")

    def fmt(value: float) -> str:
        return format(float(value), ',.2f').replace(',', ' ')

    top_cols = st.columns(4)
    top_cols[0].metric("–ë–∞–ª–∞–Ω—Å", f"{fmt(snapshot['balance'])} {currency}")
    top_cols[1].metric("–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ", f"{fmt(snapshot['invested_value'])} {currency}")
    top_cols[2].metric("–†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{fmt(snapshot['market_value'])} {currency}")
    top_cols[3].metric("Equity", f"{fmt(snapshot['equity'])} {currency}")

    pl_cols = st.columns(3)
    pl_cols[0].metric("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P/L", f"{fmt(snapshot['unrealized_pl'])} {currency}")
    pl_cols[1].metric("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P/L", f"{fmt(snapshot['realized_pl'])} {currency}")
    pl_cols[2].metric("–ò—Ç–æ–≥–æ–≤—ã–π P/L", f"{fmt(snapshot['total_pl'])} {currency}")

    st.caption("–î–µ–º–æ-—Å—á—ë—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –±–∞–∑–µ, —á—Ç–æ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.")

    with st.form("demo_adjust_balance"):
        left_col, right_col = st.columns(2)
        with left_col:
            delta = st.number_input("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", min_value=0.0, step=100.0, format="%.2f")
        with right_col:
            direction = st.selectbox("–î–µ–π—Å—Ç–≤–∏–µ", ("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", "–°–ø–∏—Å–∞—Ç—å"))
        if st.form_submit_button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
            if delta <= 0:
                st.warning("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            else:
                sign = 1 if direction == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å" else -1
                try:
                    new_balance = demo_trading.adjust_balance(conn_demo, sign * delta)
                except ValueError as exc:
                    st.warning(str(exc))
                except Exception as exc:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å: {exc}")
                else:
                    st.success(f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {fmt(new_balance)} {currency}")
                    st.experimental_rerun()

    with st.form("demo_reset"):
        new_balance = st.number_input(
            "–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å",
            min_value=0.0,
            value=float(snapshot['initial_balance']),
            step=100.0,
            format="%.2f",
        )
        confirm = st.checkbox("–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞")
        if st.form_submit_button("–°–±—Ä–æ—Å–∏—Ç—å –¥–µ–º–æ-—Å—á—ë—Ç"):
            if not confirm:
                st.warning("–ü–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫.")
            else:
                try:
                    demo_trading.reset_account(conn_demo, new_balance)
                except Exception as exc:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –¥–µ–º–æ-—Å—á—ë—Ç: {exc}")
                else:
                    st.success("–î–µ–º–æ-—Å—á—ë—Ç —Å–±—Ä–æ—à–µ–Ω.")
                    st.experimental_rerun()
except Exception as exc:
    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–µ–º–æ-—Å—á—ë—Ç–∞: {exc}")
finally:
    if conn_demo is not None:
        conn_demo.close()

ui.section_title("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î")
try:
    conn = utils.open_database_connection()
    utils.db_health_check(conn)
    conn.close()
except Exception as exc:
    st.warning(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –ø—Ä–æ–ø—É—â–µ–Ω–∞: {exc}")
