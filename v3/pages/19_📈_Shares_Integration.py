"""
Shares Integration Page.
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º—É.
"""

import streamlit as st
import sqlite3
import os
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="Shares Integration",
    page_icon="üìà",
    layout="wide"
)

st.title("üìà Shares Integration")
st.caption("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ü–∏–π (shares) –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
api_key = None
try:
    if hasattr(st, 'secrets') and hasattr(st.secrets, 'TINKOFF_API_KEY'):
        api_key = st.secrets.TINKOFF_API_KEY
        st.success("‚úÖ API –∫–ª—é—á Tinkoff –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ secrets.toml")
    else:
        st.warning("‚ö†Ô∏è API –∫–ª—é—á Tinkoff –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ secrets.toml")
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–∞: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_path = "stock_data.db"
if not os.path.exists(db_path):
    st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    st.stop()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
def check_table_structure():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã companies."""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        cursor.execute("PRAGMA table_info(companies)")
        columns = [row[1] for row in cursor.fetchall()]
        
        return columns
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return []
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ü–∏–π
def add_shares_support():
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–∫—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É companies."""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ü–∏–π
        columns_to_add = [
            ("asset_type", "TEXT DEFAULT 'futures'"),
            ("ticker", "TEXT"),
            ("lot_size", "INTEGER DEFAULT 1"),
            ("currency", "TEXT DEFAULT 'RUB'"),
            ("min_price_increment", "REAL DEFAULT 0.01")
        ]
        
        for column_name, column_type in columns_to_add:
            try:
                cursor.execute(f"ALTER TABLE companies ADD COLUMN {column_name} {column_type}")
                st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {column_name}")
            except sqlite3.OperationalError as e:
                if "duplicate column name" in str(e):
                    st.info(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")
        
        conn.commit()
        return True
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ü–∏–π: {e}")
        return False
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ü–∏–π –∏–∑ API
def load_shares_from_api(api_key, russian_only=True):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ü–∏–∏ –∏–∑ Tinkoff API —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π."""
    try:
        from tinkoff.invest import Client as _Client
        from tinkoff.invest.schemas import InstrumentStatus, ShareType
    except ImportError:
        st.error("‚ùå Tinkoff SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install tinkoff-invest")
        return []
    
    try:
        with _Client(api_key) as client:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if russian_only:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ)
                instruments = client.instruments.shares(
                    instrument_status=InstrumentStatus.INSTRUMENT_STATUS_BASE
                ).instruments
                st.info("üá∑üá∫ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ (INSTRUMENT_STATUS_BASE)")
            else:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                instruments = client.instruments.shares(
                    instrument_status=InstrumentStatus.INSTRUMENT_STATUS_ALL
                ).instruments
                st.info("üåç –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–∫—Ü–∏–∏ (INSTRUMENT_STATUS_ALL)")
            
            shares_data = []
            total_count = 0
            
            for share in instruments:
                if not getattr(share, "ticker", None):
                    continue
                
                total_count += 1
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∞–∫—Ü–∏–π (—Ç–æ–ª—å–∫–æ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
                share_type = getattr(share, 'share_type', None)
                if share_type and share_type not in [ShareType.SHARE_TYPE_COMMON, ShareType.SHARE_TYPE_PREFERRED]:
                    continue
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π
                if russian_only:
                    currency = getattr(share, 'currency', '')
                    isin = getattr(share, 'isin', '')
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ RUB –≤–∞–ª—é—Ç—É –∏ RU ISIN
                    if currency != 'RUB' and not isin.startswith('RU'):
                        continue
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º min_price_increment –≤ —á–∏—Å–ª–æ
                min_price_increment = getattr(share, 'min_price_increment', 0.01)
                if hasattr(min_price_increment, 'units') and hasattr(min_price_increment, 'nano'):
                    # –≠—Ç–æ –æ–±—ä–µ–∫—Ç Quotation, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                    min_price_increment = float(min_price_increment.units) + float(min_price_increment.nano) / 1e9
                elif not isinstance(min_price_increment, (int, float)):
                    min_price_increment = 0.01
                
                shares_data.append({
                    'ticker': share.ticker,
                    'figi': share.figi,
                    'name': getattr(share, 'name', ''),
                    'isin': getattr(share, 'isin', ''),
                    'lot_size': getattr(share, 'lot', 1),
                    'currency': getattr(share, 'currency', 'RUB'),
                    'min_price_increment': min_price_increment,
                    'asset_type': 'shares'
                })
            
            if russian_only:
                st.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(shares_data)} —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π (–∏–∑ {total_count} –≤—Å–µ–≥–æ)")
            else:
                st.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(shares_data)} –∞–∫—Ü–∏–π (–∏–∑ {total_count} –≤—Å–µ–≥–æ)")
            
            return shares_data
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ü–∏–π –∏–∑ API: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ü–∏–π –≤ –ë–î
def save_shares_to_db(shares_data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        saved_count = 0
        for share in shares_data:
            cursor.execute("""
                INSERT OR REPLACE INTO companies 
                (contract_code, ticker, name, isin, figi, asset_type, lot_size, currency, min_price_increment)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                share['ticker'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ticker –∫–∞–∫ contract_code
                share['ticker'],
                share['name'],
                share['isin'],
                share['figi'],
                share['asset_type'],
                share['lot_size'],
                share['currency'],
                share['min_price_increment']
            ))
            saved_count += 1
        
        conn.commit()
        return saved_count
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ü–∏–π: {e}")
        return 0
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_asset_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤."""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            SELECT 
                COALESCE(asset_type, 'unknown') as asset_type,
                COUNT(*) as count
            FROM companies 
            GROUP BY asset_type
            ORDER BY count DESC
        """)
        
        stats = {row[0]: row[1] for row in cursor.fetchall()}
        return stats
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}
    finally:
        conn.close()

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
columns = check_table_structure()
if columns:
    st.write("**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã companies:**")
    for col in columns:
        st.write(f"- {col}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ü–∏–π
    if 'asset_type' in columns:
        st.success("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ü–∏–π —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        st.warning("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ü–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        if st.button("üîß –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–∫—Ü–∏–π"):
            if add_shares_support():
                st.success("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                st.rerun()
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ü–∏–π")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–æ–≤
st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–æ–≤")
stats = get_asset_statistics()
if stats:
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìä –ê–∫—Ü–∏–∏", stats.get('shares', 0))
    
    with col2:
        st.metric("üìà –§—å—é—á–µ—Ä—Å—ã", stats.get('futures', 0))
    
    with col3:
        st.metric("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", stats.get('unknown', 0))
    
    with col4:
        total = sum(stats.values())
        st.metric("üìä –í—Å–µ–≥–æ", total)

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ü–∏–π
if api_key and 'asset_type' in columns:
    st.header("üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ü–∏–π")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    col1, col2 = st.columns([2, 1])
    
    with col1:
        russian_only = st.checkbox(
            "üá∑üá∫ –¢–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏", 
            value=True, 
            help="–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏: INSTRUMENT_STATUS_BASE + RUB –≤–∞–ª—é—Ç–∞ + RU ISIN"
        )
    
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", key="refresh_shares_stats"):
            st.rerun()
    
    if st.button("üì° –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ü–∏–∏ –∏–∑ Tinkoff API"):
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ü–∏–π –∏–∑ Tinkoff API..."):
            shares_data = load_shares_from_api(api_key, russian_only)
            
            if shares_data:
                if russian_only:
                    st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(shares_data)} —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π –∏–∑ API")
                else:
                    st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(shares_data)} –∞–∫—Ü–∏–π –∏–∑ API")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                st.write("**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π:**")
                for i, share in enumerate(shares_data[:5]):
                    currency = share.get('currency', 'Unknown')
                    isin = share.get('isin', 'Unknown')
                    st.write(f"{i+1}. {share['ticker']}: {share['name']} ({currency}) [{isin}]")
                
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"):
                    with st.spinner("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ü–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö..."):
                        saved_count = save_shares_to_db(shares_data)
                        
                        if saved_count > 0:
                            st.success(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∞–∫—Ü–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ü–∏–π")
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ü–∏–∏ –∏–∑ API")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
st.header("üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")

st.info("""
**–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ü–∏–π:**

1. **–†–∞—Å—à–∏—Ä—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É companies** - –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ü–∏–π
2. **–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ü–∏–∏ –∏–∑ Tinkoff API** - –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
3. **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π** - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç INSTRUMENT_STATUS_BASE + RUB –≤–∞–ª—é—Ç–∞ + RU ISIN
4. **–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö** - –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∞–∫—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—å—é—á–µ—Ä—Å–∞–º–∏
5. **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å** - –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã

**–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π:**
- üá∑üá∫ **INSTRUMENT_STATUS_BASE** - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ)
- üí± **RUB –≤–∞–ª—é—Ç–∞** - –∞–∫—Ü–∏–∏ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö
- üìã **RU ISIN** - ISIN –∫–æ–¥—ã –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "RU"
- üè¢ **–¢–∏–ø –∞–∫—Ü–∏–π** - —Ç–æ–ª—å–∫–æ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–Ω–µ ADR/GDR)

**–ü–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**
- –ê–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
- ML –º–æ–¥–µ–ª–∏ —Å–º–æ–≥—É—Ç –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –±–æ–ª—å—à–µ–º –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö
- –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞–∫ –∞–∫—Ü–∏–∏, —Ç–∞–∫ –∏ —Ñ—å—é—á–µ—Ä—Å—ã
""")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
    st.rerun()
