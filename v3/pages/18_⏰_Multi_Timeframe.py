"""
Unified Multi-Timeframe Data Management Page.
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–∫—Ü–∏–π –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤.
"""

import streamlit as st
import pandas as pd
import asyncio
from datetime import datetime, timedelta
import logging
import json

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
try:
    from core.multi_timeframe_analyzer_enhanced import (
        EnhancedMultiTimeframeStockAnalyzer, 
        WebSocketDataProvider
    )
    from core.data_updater_with_shares import DataUpdaterWithShares  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–∫—Ü–∏–π
    from core.realtime_manager_enhanced import EnhancedRealTimeDataManager
    from core.shares_integration import SharesIntegrator
    MULTI_TIMEFRAME_AVAILABLE = True
except ImportError as e:
    MULTI_TIMEFRAME_AVAILABLE = False
    st.error(f"‚ùå –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ML
try:
    from core.ml.model_manager import MLModelManager
    from core.ml.storage import ml_storage
    ML_AVAILABLE = True
except ImportError:
    ML_AVAILABLE = False

logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="Multi-Timeframe Data Management",
    page_icon="‚è∞",
    layout="wide"
)

st.title("‚è∞ Multi-Timeframe Data Management")
st.caption("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–∫—Ü–∏–π (shares) –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤ (futures)")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
if not MULTI_TIMEFRAME_AVAILABLE:
    st.error("‚ùå –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
if 'multi_analyzer' not in st.session_state:
    api_key = None
    try:
        if hasattr(st, 'secrets') and hasattr(st.secrets, 'TINKOFF_API_KEY'):
            api_key = st.secrets.TINKOFF_API_KEY
            st.session_state.tinkoff_api_key = api_key
    except Exception:
        pass
    
    if not api_key:
        api_key = st.session_state.get('tinkoff_api_key')
    
    if api_key:
        st.session_state.multi_analyzer = EnhancedMultiTimeframeStockAnalyzer(api_key=api_key)
        st.session_state.data_updater = DataUpdaterWithShares(api_key, max_requests_per_minute=50)
        st.session_state.real_time_manager = EnhancedRealTimeDataManager(api_key)
        st.session_state.shares_integrator = SharesIntegrator()
        st.success("‚úÖ API –∫–ª—é—á Tinkoff –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ secrets.toml")
        st.info("üöÄ DataUpdater —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–∫—Ü–∏–π –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –≤–∫–ª—é—á–µ–Ω (50 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω)")
    else:
        st.warning("‚ö†Ô∏è API –∫–ª—é—á Tinkoff –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .streamlit/secrets.toml")

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìä Data Overview", 
    "üîÑ Data Updater", 
    "üìà Shares Integration",
    "‚ö° Real-Time", 
    "üß† ML Integration",
    "‚öôÔ∏è Settings"
])

with tab1:
    st.header("üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    if 'data_updater' in st.session_state:
        updater = st.session_state.data_updater
        try:
            all_status = updater.get_all_timeframe_status()
        except AttributeError as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {e}")
            st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            all_status = {}
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
        status_data = []
        for timeframe, status in all_status.items():
            status_data.append({
                'Timeframe': timeframe,
                'Status': status['status'],
                'Records': status['record_count'],
                'Symbols': status['symbol_count'],
                'Last Update': status['last_record'] or 'Never',
                'Table Exists': '‚úÖ' if status['table_exists'] else '‚ùå'
            })
        
        st.dataframe(pd.DataFrame(status_data), use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤")
        
        asset_stats = updater.get_asset_statistics()
        if asset_stats:
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üìä –ê–∫—Ü–∏–∏ (shares)", asset_stats.get('shares', 0))
            
            with col2:
                st.metric("üìà –§—å—é—á–µ—Ä—Å—ã (futures)", asset_stats.get('futures', 0))
            
            with col3:
                st.metric("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", asset_stats.get('unknown', 0))
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        selected_timeframe = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            ['1d', '1h', '1m', '5m', '15m']
        )
        
        if selected_timeframe:
            status = all_status.get(selected_timeframe, {})
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üìä –ó–∞–ø–∏—Å–µ–π", status.get('record_count', 0))
            
            with col2:
                st.metric("üè∑Ô∏è –°–∏–º–≤–æ–ª–æ–≤", status.get('symbol_count', 0))
            
            with col3:
                st.metric("üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
                         status.get('last_record', 'Never')[:19] if status.get('last_record') else 'Never')
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            if status.get('table_exists') and status.get('record_count', 0) > 0:
                st.subheader(f"üìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö ({selected_timeframe})")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                    table_name = f"data_{selected_timeframe.replace('m', 'min').replace('h', 'hour')}"
                    
                    from core.database import get_connection
                    conn = get_connection()
                    cursor = conn.cursor()
                    
                    cursor.execute(f"""
                        SELECT * FROM {table_name} 
                        ORDER BY datetime DESC 
                        LIMIT 10
                    """)
                    
                    columns = [description[0] for description in cursor.description]
                    rows = cursor.fetchall()
                    
                    if rows:
                        sample_df = pd.DataFrame(rows, columns=columns)
                        st.dataframe(sample_df, use_container_width=True)
                    else:
                        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    
                    conn.close()
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        st.warning("Data updater –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

with tab2:
    st.header("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö")
    
    if 'data_updater' not in st.session_state:
        st.error("Data updater –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        st.stop()
    
    updater = st.session_state.data_updater
    
    # –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    col1, col2 = st.columns([2, 1])
    
    with col1:
        is_running = updater.is_running
        st.metric("üîÑ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞", "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if is_running else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    with col2:
        if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å" if not is_running else "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"):
            if not is_running:
                updater.start_scheduler()
                st.success("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
                st.rerun()
            else:
                updater.stop_scheduler()
                st.success("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                st.rerun()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    stats = updater.get_update_stats()
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üõ°Ô∏è Rate Limit Hits", stats.get('rate_limit_hits', 0))
    
    with col2:
        st.metric("üìä –ó–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω", stats.get('current_requests_per_minute', 0))
    
    with col3:
        st.metric("‚ùå –û—à–∏–±–æ–∫", len(stats.get('errors', {})))
    
    with col4:
        st.metric("üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞", 
                 f"{(stats.get('successful_updates', 0) / max(stats.get('total_symbols', 1), 1)) * 100:.1f}%")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üìä –ê–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", stats.get('shares_updated', 0))
    
    with col2:
        st.metric("üìà –§—å—é—á–µ—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ", stats.get('futures_updated', 0))
    
    with col3:
        st.metric("üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤", stats.get('total_symbols', 0))
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
    st.subheader("‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏")
    
    timeframes = ['1d', '1h', '1m', '5m', '15m']
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    cols = st.columns(len(timeframes))
    
    for i, timeframe in enumerate(timeframes):
        with cols[i]:
            st.write(f"**{timeframe}**")
            st.caption("‚úÖ –í–∫–ª—é—á–µ–Ω–æ")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if st.button(f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å {timeframe}", key=f"update_{timeframe}"):
                with st.spinner(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {timeframe} –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤..."):
                    if timeframe == '1d':
                        updater.update_daily_data()
                    elif timeframe == '1h':
                        updater.update_hourly_data()
                    elif timeframe == '1m':
                        updater.update_minute_data()
                    elif timeframe == '5m':
                        updater.update_5min_data()
                    elif timeframe == '15m':
                        updater.update_15min_data()
                
                st.success(f"‚úÖ {timeframe} –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    st.info("""
    üöÄ **DataUpdater —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–∫—Ü–∏–π –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤:**
    - –ú–∞–∫—Å–∏–º—É–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤ –±–∞—Ç—á–∞–º–∏ –ø–æ 10
    - –°–æ–±–ª—é–¥–µ–Ω–∏–µ deadline'–æ–≤ API (500ms –¥–ª—è GetCandles)
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ü–∏–π (shares) –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤ (futures)
    """)

with tab3:
    st.header("üìà –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ü–∏–π (Shares)")
    
    if 'shares_integrator' not in st.session_state:
        st.error("Shares integrator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        st.stop()
    
    integrator = st.session_state.shares_integrator
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤
    st.subheader("üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–æ–≤")
    
    asset_stats = integrator.get_asset_statistics()
    if asset_stats:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìä –ê–∫—Ü–∏–∏", asset_stats.get('shares', 0))
        
        with col2:
            st.metric("üìà –§—å—é—á–µ—Ä—Å—ã", asset_stats.get('futures', 0))
        
        with col3:
            st.metric("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", asset_stats.get('unknown', 0))
        
        with col4:
            total = sum(asset_stats.values())
            st.metric("üìä –í—Å–µ–≥–æ", total)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
    st.subheader("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    col1, col2 = st.columns([2, 1])
    
    with col1:
        russian_only = st.checkbox(
            "üá∑üá∫ –¢–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏", 
            value=True, 
            help="–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏: INSTRUMENT_STATUS_BASE + RUB –≤–∞–ª—é—Ç–∞ + RU ISIN"
        )
    
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", key="refresh_stats"):
            st.rerun()
    
    # –ö–Ω–æ–ø–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    if st.button("üîÑ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ü–∏–∏", key="integrate_shares"):
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ü–∏–π –∏–∑ Tinkoff API..."):
            try:
                integrator.integrate_shares_into_database(st.session_state.tinkoff_api_key, russian_only)
                if russian_only:
                    st.success("‚úÖ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                else:
                    st.success("‚úÖ –í—Å–µ –∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ü–∏–π: {e}")
    
    # –°–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–æ–≤
    st.subheader("üìã –°–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**üìä –ê–∫—Ü–∏–∏ (shares):**")
        shares_list = integrator.get_shares_only()
        if shares_list:
            st.write(f"–í—Å–µ–≥–æ –∞–∫—Ü–∏–π: {len(shares_list)}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∞–∫—Ü–∏–π
            st.write(shares_list[:20])
            if len(shares_list) > 20:
                st.write(f"... –∏ –µ—â–µ {len(shares_list) - 20} –∞–∫—Ü–∏–π")
        else:
            st.info("–ê–∫—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ü–∏–∏'")
    
    with col2:
        st.write("**üìà –§—å—é—á–µ—Ä—Å—ã (futures):**")
        futures_list = integrator.get_futures_only()
        if futures_list:
            st.write(f"–í—Å–µ–≥–æ —Ñ—å—é—á–µ—Ä—Å–æ–≤: {len(futures_list)}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ñ—å—é—á–µ—Ä—Å–æ–≤
            st.write(futures_list[:20])
            if len(futures_list) > 20:
                st.write(f"... –∏ –µ—â–µ {len(futures_list) - 20} —Ñ—å—é—á–µ—Ä—Å–æ–≤")
        else:
            st.info("–§—å—é—á–µ—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    st.info("""
    üí° **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ü–∏–π:**
    - üá∑üá∫ **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π** - INSTRUMENT_STATUS_BASE + RUB –≤–∞–ª—é—Ç–∞ + RU ISIN
    - üìä **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∞–∫—Ü–∏–π** - —Ç–æ–ª—å–∫–æ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–Ω–µ ADR/GDR)
    - üè¢ –î–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—É companies —Å asset_type = 'shares'
    - üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ticker, figi, name, isin, lot_size, currency, share_type
    - üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—å—é—á–µ—Ä—Å—ã —Å asset_type = 'futures'
    - ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
    - üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç**: —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ (RUB –≤–∞–ª—é—Ç–∞, RU ISIN)
    """)

with tab4:
    st.header("‚ö° –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    if 'real_time_manager' not in st.session_state or st.session_state.real_time_manager is None:
        st.info("üöß Real-Time –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        st.warning("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        st.subheader("üîÆ –ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è")
        st.write("""
        **Real-Time —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:**
        - üåê WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        - ‚ö° –°–µ–∫—É–Ω–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (1s)
        - üì° –ü–æ—Ç–æ–∫–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        - üéØ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–∞–∫—Ü–∏–∏ + —Ñ—å—é—á–µ—Ä—Å—ã)
        """)
        
        st.info("üí° –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É 'Data Updater' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    else:
        manager = st.session_state.real_time_manager
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_status = manager.get_connection_status()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üåê WebSocket", "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if connection_status['websocket_connected'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω")
        
        with col2:
            st.metric("üì° –ü–æ–¥–ø–∏—Å–∫–∏", connection_status['active_subscriptions'])
        
        with col3:
            st.metric("üìä –ö—ç—à —Å–∏–º–≤–æ–ª–æ–≤", connection_status['cached_symbols'])
        
        with col4:
            st.metric("üîë API –∫–ª—é—á", "‚úÖ –ï—Å—Ç—å" if connection_status['api_key_available'] else "‚ùå –ù–µ—Ç")
        
        # –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –∞–∫—Ü–∏–π –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
            shares_list = integrator.get_shares_only()
            futures_list = integrator.get_futures_only()
            all_assets = shares_list + futures_list
            
            selected_symbols_rt = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:",
                all_assets,
                default=all_assets[:5] if all_assets else [],
                key="real_time_symbols"
            )
        
        with col2:
            timeframe_rt = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
                ['1s', 'tick', 'orderbook'],
                key="real_time_timeframe"
            )
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", key="start_real_time"):
                if selected_symbols_rt:
                    st.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {len(selected_symbols_rt)} –∞–∫—Ç–∏–≤–æ–≤...")
                    for symbol in selected_symbols_rt:
                        figi = st.session_state.multi_analyzer.get_figi_for_symbol(symbol)
                        if figi:
                            asyncio.run(manager.start_real_time_data(figi, timeframe_rt))
                            st.success(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è {symbol} –∑–∞–ø—É—â–µ–Ω.")
                        else:
                            st.error(f"‚ùå FIGI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞ {symbol}.")
                else:
                    st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
        
        with col2:
            if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", key="stop_real_time"):
                st.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
                asyncio.run(manager.stop_all_real_time_data())
                st.success("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        st.subheader("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        
        if selected_symbols_rt:
            latest_data_display = []
            for symbol in selected_symbols_rt:
                data = manager.get_latest_data(symbol)
                if data:
                    latest_data_display.append({
                        "Symbol": symbol,
                        "Type": data.get('type', 'unknown'),
                        "Last Update": data.get('timestamp'),
                        "Data": json.dumps(data, default=str)[:100] + "..." if len(str(data)) > 100 else json.dumps(data, default=str)
                    })
            
            if latest_data_display:
                st.dataframe(pd.DataFrame(latest_data_display), use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.")

with tab5:
    st.header("üß† ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    
    if not ML_AVAILABLE:
        st.warning("ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        st.stop()
    
    st.write("""
    **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ML —Å–∏—Å—Ç–µ–º–æ–π:**
    
    –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è:
    - üìä –ê–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
    - üß† –û–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    - ‚ö° –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    - üìà –ê–Ω–∞–ª–∏–∑–∞ –∞–∫—Ü–∏–π –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
    """)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML
    if 'data_updater' in st.session_state:
        updater = st.session_state.data_updater
        try:
            ml_data_status = updater.get_all_timeframe_status()
        except AttributeError as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ML: {e}")
            ml_data_status = {}
        
        st.subheader("üìä –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è ML")
        
        ml_ready_data = []
        for timeframe, status in ml_data_status.items():
            if status.get('record_count', 0) > 0:
                ml_ready_data.append({
                    'Timeframe': timeframe,
                    'Records': status['record_count'],
                    'Symbols': status['symbol_count'],
                    'ML Ready': '‚úÖ' if status['record_count'] > 100 else '‚ö†Ô∏è'
                })
        
        if ml_ready_data:
            st.dataframe(pd.DataFrame(ml_ready_data), use_container_width=True)
            
            st.info("üí° –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ ML –º–æ–¥–µ–ª—è—Ö")
        else:
            st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML –∞–Ω–∞–ª–∏–∑–∞")

with tab6:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    st.subheader("üîë API –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π API –∫–ª—é—á (—Å–∫—Ä—ã—Ç—ã–π)
    api_key = st.session_state.get('tinkoff_api_key', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    if api_key != '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω':
        masked_key = api_key[:8] + '*' * (len(api_key) - 12) + api_key[-4:] if len(api_key) > 12 else '***'
        st.text_input("–¢–µ–∫—É—â–∏–π API –∫–ª—é—á:", value=masked_key, disabled=True)
    else:
        st.text_input("API –∫–ª—é—á:", value="–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", disabled=True)
    
    st.info("üí° API –∫–ª—é—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ .streamlit/secrets.toml")
    
    st.subheader("üõ°Ô∏è Rate Limiting –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    if 'data_updater' in st.session_state:
        updater = st.session_state.data_updater
        stats = updater.get_update_stats()
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("üõ°Ô∏è Rate Limit Hits", stats.get('rate_limit_hits', 0))
        
        with col2:
            st.metric("üìä –¢–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω", stats.get('current_requests_per_minute', 0))
        
        with col3:
            st.metric("üéØ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω", updater.max_requests_per_minute)
        
        st.info("""
        **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Rate Limiting:**
        - –ú–∞–∫—Å–∏–º—É–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ü–∏–π –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
        """)
    
    st.subheader("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if 'data_updater' in st.session_state:
        updater = st.session_state.data_updater
        
        st.write("**–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**")
        schedules = updater.update_schedules
        
        for timeframe, schedule_info in schedules.items():
            st.write(f"- **{timeframe}**: {schedule_info['interval']} –≤ {schedule_info['time']} (‚úÖ –í–∫–ª—é—á–µ–Ω–æ)")
    
    st.subheader("üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã"):
            st.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞–±–ª–∏—Ü
            
    with col2:
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"):
            st.info("–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞
    
    st.subheader("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if 'data_updater' in st.session_state:
        stats = st.session_state.data_updater.get_update_stats()
        
        st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:**")
        st.json({
            'is_running': stats['is_running'],
            'total_updates': sum(stats['update_count'].values()) if stats['update_count'] else 0,
            'total_errors': len(stats['errors']) if stats['errors'] else 0,
            'rate_limit_hits': stats.get('rate_limit_hits', 0),
            'current_requests_per_minute': stats.get('current_requests_per_minute', 0),
            'shares_updated': stats.get('shares_updated', 0),
            'futures_updated': stats.get('futures_updated', 0)
        })