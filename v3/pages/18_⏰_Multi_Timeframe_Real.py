"""
Real Multi-Timeframe Data Management Page with WebSocket support.
–†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π WebSocket.
"""

import streamlit as st
import pandas as pd
import asyncio
from datetime import datetime, timedelta
import logging
import json

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
try:
    from core.multi_timeframe_analyzer_real import (
        RealMultiTimeframeStockAnalyzer, 
        create_real_multi_timeframe_analyzer
    )
    from core.tinkoff_websocket_provider import TinkoffWebSocketProvider
    from core.realtime_manager_enhanced import EnhancedRealTimeDataManager
    from core.data_updater_enhanced import EnhancedDataUpdater
    REAL_MULTI_TIMEFRAME_AVAILABLE = True
except ImportError as e:
    REAL_MULTI_TIMEFRAME_AVAILABLE = False
    st.error(f"‚ùå –†–µ–∞–ª—å–Ω—ã–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ML
try:
    from core.ml.model_manager import MLModelManager
    from core.ml.storage import ml_storage
    ML_AVAILABLE = True
except ImportError:
    ML_AVAILABLE = False

logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="Real Multi-Timeframe Data",
    page_icon="‚è∞",
    layout="wide"
)

st.title("‚è∞ Real Multi-Timeframe Data Management")
st.caption("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π WebSocket")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
if not REAL_MULTI_TIMEFRAME_AVAILABLE:
    st.error("‚ùå –†–µ–∞–ª—å–Ω—ã–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
if 'real_multi_analyzer' not in st.session_state:
    api_key = None
    try:
        if hasattr(st, 'secrets') and hasattr(st.secrets, 'TINKOFF_API_KEY'):
            api_key = st.secrets.TINKOFF_API_KEY
            st.session_state.tinkoff_api_key = api_key
    except Exception:
        pass
    
    if not api_key:
        api_key = st.session_state.get('tinkoff_api_key')
    
    if api_key:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        st.session_state.real_multi_analyzer = create_real_multi_timeframe_analyzer(api_key, sandbox=False)
        st.session_state.real_data_updater = EnhancedDataUpdater(api_key)
        st.session_state.real_time_manager = EnhancedRealTimeDataManager(api_key, sandbox=False)
        st.success("‚úÖ API –∫–ª—é—á Tinkoff –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ secrets.toml")
        st.success("üöÄ –†–µ–∞–ª—å–Ω—ã–π WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    else:
        st.warning("‚ö†Ô∏è API –∫–ª—é—á Tinkoff –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .streamlit/secrets.toml")

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìä Data Overview", 
    "üîÑ Data Updater", 
    "‚ö° Real-Time WebSocket", 
    "üß† ML Integration",
    "‚öôÔ∏è Settings",
    "üîó WebSocket Status"
])

with tab1:
    st.header("üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    if 'real_data_updater' in st.session_state:
        updater = st.session_state.real_data_updater
        all_status = updater.get_all_timeframe_status()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
        status_data = []
        for timeframe, status in all_status.items():
            status_data.append({
                'Timeframe': timeframe,
                'Status': status['status'],
                'Records': status['record_count'],
                'Symbols': status['symbol_count'],
                'Last Update': status['last_record'] or 'Never',
                'Table Exists': '‚úÖ' if status['table_exists'] else '‚ùå'
            })
        
        st.dataframe(pd.DataFrame(status_data), use_container_width=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
        if 'real_multi_analyzer' in st.session_state:
            analyzer = st.session_state.real_multi_analyzer
            provider_info = analyzer.get_provider_info()
            
            st.subheader("üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö")
            provider_data = []
            for timeframe, providers in provider_info.items():
                for provider in providers:
                    provider_data.append({
                        'Timeframe': timeframe,
                        'Provider': provider['name'],
                        'Available': '‚úÖ' if provider['available'] else '‚ùå',
                        'WebSocket': '‚úÖ' if provider.get('websocket_available', False) else '‚ùå',
                        'Connected': '‚úÖ' if provider.get('websocket_connected', False) else '‚ùå'
                    })
            
            st.dataframe(pd.DataFrame(provider_data), use_container_width=True)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        selected_timeframe = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            ['1d', '1h', '1m', '5m', '15m', '1s', 'tick']
        )
        
        if selected_timeframe:
            status = all_status[selected_timeframe]
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üìä –ó–∞–ø–∏—Å–µ–π", status['record_count'])
            
            with col2:
                st.metric("üè∑Ô∏è –°–∏–º–≤–æ–ª–æ–≤", status['symbol_count'])
            
            with col3:
                st.metric("üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
                         status['last_record'][:19] if status['last_record'] else 'Never')
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è WebSocket –¥–∞–Ω–Ω—ã—Ö
            if selected_timeframe in ['1s', 'tick']:
                st.info("üåê **WebSocket –¥–∞–Ω–Ω—ã–µ**: –≠—Ç–æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä Tinkoff API")
                
                if 'real_multi_analyzer' in st.session_state:
                    analyzer = st.session_state.real_multi_analyzer
                    ws_provider = analyzer.get_websocket_provider()
                    if ws_provider:
                        st.success(f"‚úÖ WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                        st.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω: {'–î–∞' if ws_provider.is_connected() else '–ù–µ—Ç'}")
                    else:
                        st.warning("‚ö†Ô∏è WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

with tab2:
    st.header("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö")
    
    if 'real_data_updater' not in st.session_state:
        st.error("Real data updater –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        st.stop()
    
    updater = st.session_state.real_data_updater
    
    # –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    col1, col2 = st.columns([2, 1])
    
    with col1:
        is_running = updater.is_running
        st.metric("üîÑ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞", "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if is_running else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    with col2:
        if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å" if not is_running else "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"):
            if not is_running:
                updater.start_scheduler()
                st.success("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
                st.rerun()
            else:
                updater.stop_scheduler()
                st.success("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                st.rerun()
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
    st.subheader("‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏")
    
    timeframes = ['1d', '1h', '1m', '5m', '15m', '1s', 'tick']
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    cols = st.columns(len(timeframes))
    
    for i, timeframe in enumerate(timeframes):
        with cols[i]:
            st.write(f"**{timeframe}**")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            if timeframe in ['1s', 'tick']:
                st.caption("üåê WebSocket")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if st.button(f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å {timeframe}", key=f"update_{timeframe}"):
                with st.spinner(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {timeframe} –¥–∞–Ω–Ω—ã—Ö..."):
                    if timeframe == '1d':
                        updater.update_daily_data()
                    elif timeframe == '1h':
                        updater.update_hourly_data()
                    elif timeframe == '1m':
                        updater.update_minute_data()
                    elif timeframe == '5m':
                        updater.update_5min_data()
                    elif timeframe == '15m':
                        updater.update_15min_data()
                    elif timeframe == '1s':
                        updater.update_second_data()
                    elif timeframe == 'tick':
                        updater.update_tick_data()
                
                st.success(f"‚úÖ {timeframe} –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

with tab3:
    st.header("‚ö° –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ WebSocket")
    
    if 'real_time_manager' not in st.session_state or st.session_state.real_time_manager is None:
        st.error("Real-time –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        st.stop()
    
    manager = st.session_state.real_time_manager
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_status = manager.get_connection_status()
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üåê WebSocket", "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if connection_status['websocket_connected'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω")
    
    with col2:
        st.metric("üì° –ü–æ–¥–ø–∏—Å–∫–∏", connection_status['active_subscriptions'])
    
    with col3:
        st.metric("üìä –ö—ç—à —Å–∏–º–≤–æ–ª–æ–≤", connection_status['cached_symbols'])
    
    with col4:
        st.metric("üîë API –∫–ª—é—á", "‚úÖ –ï—Å—Ç—å" if connection_status['api_key_available'] else "‚ùå –ù–µ—Ç")
    
    # –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    col1, col2 = st.columns([2, 1])
    
    with col1:
        available_symbols = st.session_state.real_multi_analyzer.get_available_symbols()
        selected_symbols_rt = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:",
            available_symbols,
            default=available_symbols[:3] if available_symbols else [],
            key="real_time_symbols"
        )
    
    with col2:
        timeframe_rt = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
            ['1s', 'tick', 'orderbook'],  # –†–µ–∞–ª—å–Ω—ã–µ WebSocket –¥–∞–Ω–Ω—ã–µ
            key="real_time_timeframe"
        )
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", key="start_real_time"):
            if selected_symbols_rt:
                st.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {len(selected_symbols_rt)} —Å–∏–º–≤–æ–ª–æ–≤...")
                for symbol in selected_symbols_rt:
                    figi = st.session_state.real_multi_analyzer.get_figi_for_symbol(symbol)
                    if figi:
                        asyncio.run(manager.start_real_time_data(figi, timeframe_rt))
                        st.success(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è {symbol} –∑–∞–ø—É—â–µ–Ω.")
                    else:
                        st.error(f"‚ùå FIGI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}.")
            else:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    
    with col2:
        if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", key="stop_real_time"):
            st.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
            asyncio.run(manager.stop_all_real_time_data())
            st.success("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    st.subheader("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    if selected_symbols_rt:
        latest_data_display = []
        for symbol in selected_symbols_rt:
            data = manager.get_latest_data(symbol)
            if data:
                latest_data_display.append({
                    "Symbol": symbol,
                    "Type": data.get('type', 'unknown'),
                    "Last Update": data.get('timestamp'),
                    "Data": json.dumps(data, default=str)[:100] + "..." if len(str(data)) > 100 else json.dumps(data, default=str)
                })
        
        if latest_data_display:
            st.dataframe(pd.DataFrame(latest_data_display), use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.")

with tab4:
    st.header("üß† ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    
    if not ML_AVAILABLE:
        st.warning("ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        st.stop()
    
    st.write("""
    **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ML —Å–∏—Å—Ç–µ–º–æ–π:**
    
    –†–µ–∞–ª—å–Ω—ã–µ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è:
    - üìä –ê–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
    - üß† –û–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - ‚ö° –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    - üåê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö WebSocket –¥–∞–Ω–Ω—ã—Ö
    """)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML
    if 'real_data_updater' in st.session_state:
        updater = st.session_state.real_data_updater
        ml_data_status = updater.get_all_timeframe_status()
        
        st.subheader("üìä –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è ML")
        
        ml_ready_data = []
        for timeframe, status in ml_data_status.items():
            if status['record_count'] > 0:
                data_source = "üåê WebSocket" if timeframe in ['1s', 'tick'] else "üì° REST API"
                ml_ready_data.append({
                    'Timeframe': timeframe,
                    'Records': status['record_count'],
                    'Symbols': status['symbol_count'],
                    'Source': data_source,
                    'ML Ready': '‚úÖ' if status['record_count'] > 100 else '‚ö†Ô∏è'
                })
        
        if ml_ready_data:
            st.dataframe(pd.DataFrame(ml_ready_data), use_container_width=True)
            
            st.info("üí° –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ ML –º–æ–¥–µ–ª—è—Ö")
        else:
            st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML –∞–Ω–∞–ª–∏–∑–∞")

with tab5:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    st.subheader("üîë API –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π API –∫–ª—é—á (—Å–∫—Ä—ã—Ç—ã–π)
    api_key = st.session_state.get('tinkoff_api_key', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    if api_key != '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω':
        masked_key = api_key[:8] + '*' * (len(api_key) - 12) + api_key[-4:] if len(api_key) > 12 else '***'
        st.text_input("–¢–µ–∫—É—â–∏–π API –∫–ª—é—á:", value=masked_key, disabled=True)
    else:
        st.text_input("API –∫–ª—é—á:", value="–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", disabled=True)
    
    st.info("üí° API –∫–ª—é—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ .streamlit/secrets.toml")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket
    st.subheader("üåê WebSocket –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        sandbox_mode = st.checkbox("–ü–µ—Å–æ—á–Ω–∏—Ü–∞ (Sandbox)", value=False)
        if sandbox_mode:
            st.info("üß™ –†–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã –≤–∫–ª—é—á–µ–Ω")
        else:
            st.warning("‚ö†Ô∏è –†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
    
    with col2:
        if st.button("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å WebSocket"):
            st.info("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    st.subheader("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if 'real_data_updater' in st.session_state:
        updater = st.session_state.real_data_updater
        
        st.write("**–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**")
        schedules = updater.update_schedules
        
        for timeframe, schedule_info in schedules.items():
            data_source = "üåê WebSocket" if timeframe in ['1s', 'tick'] else "üì° REST API"
            st.write(f"- **{timeframe}**: {schedule_info['interval']} –≤ {schedule_info['time']} ({data_source})")

with tab6:
    st.header("üîó WebSocket Status")
    
    if 'real_time_manager' not in st.session_state:
        st.error("Real-time –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        st.stop()
    
    manager = st.session_state.real_time_manager
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WebSocket
    connection_status = manager.get_connection_status()
    
    st.subheader("üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    status_data = [
        {"Parameter": "WebSocket Connected", "Value": "‚úÖ Yes" if connection_status['websocket_connected'] else "‚ùå No"},
        {"Parameter": "Active Subscriptions", "Value": connection_status['active_subscriptions']},
        {"Parameter": "Cached Symbols", "Value": connection_status['cached_symbols']},
        {"Parameter": "API Key Available", "Value": "‚úÖ Yes" if connection_status['api_key_available'] else "‚ùå No"},
    ]
    
    st.dataframe(pd.DataFrame(status_data), use_container_width=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    if connection_status['subscriptions']:
        st.subheader("üì° –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏")
        for subscription in connection_status['subscriptions']:
            st.write(f"- {subscription}")
    else:
        st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    st.subheader("üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    all_data = manager.get_all_latest_data()
    
    if all_data:
        cache_data = []
        for symbol, data in all_data.items():
            cache_data.append({
                "Symbol": symbol,
                "Type": data.get('type', 'unknown'),
                "Last Update": data.get('timestamp', 'Never'),
                "Data Size": len(str(data))
            })
        
        st.dataframe(pd.DataFrame(cache_data), use_container_width=True)
    else:
        st.info("–ù–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket
    st.subheader("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å"):
            st.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    with col2:
        if st.button("üîå –û—Ç–∫–ª—é—á–∏—Ç—å"):
            st.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    
    with col3:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"):
            st.rerun()
