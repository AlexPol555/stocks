#!/usr/bin/env python3
"""
Debug Russian Filter.
–û—Ç–ª–∞–¥–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π.
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def debug_russian_filter():
    """–û—Ç–ª–∞–¥–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π."""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π...")
    print("=" * 60)
    
    try:
        from core.shares_integration import SharesIntegrator
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        api_key = None
        try:
            import streamlit as st
            if hasattr(st, 'secrets') and hasattr(st.secrets, 'TINKOFF_API_KEY'):
                api_key = st.secrets.TINKOFF_API_KEY
                print("‚úÖ API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Streamlit secrets")
            else:
                print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Streamlit secrets")
        except ImportError:
            print("‚ùå Streamlit –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        if not api_key:
            print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .streamlit/secrets.toml")
            return
        
        integrator = SharesIntegrator()
        
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∞–∫—Ü–∏–π (russian_only=False)...")
        print("-" * 50)
        all_shares = integrator.load_shares_from_tinkoff_api(api_key, russian_only=False)
        print(f"–í—Å–µ–≥–æ –∞–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(all_shares)}")
        
        if all_shares:
            print("\nüåç –ü—Ä–∏–º–µ—Ä—ã –≤—Å–µ—Ö –∞–∫—Ü–∏–π (–ø–µ—Ä–≤—ã–µ 10):")
            for i, share in enumerate(all_shares[:10]):
                currency = share.get('currency', 'Unknown')
                isin = share.get('isin', 'Unknown')
                print(f"  {i+1:2d}. {share['ticker']:6s} - {share['name'][:30]:30s} ({currency}) [{isin}]")
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª—é—Ç –≤—Å–µ—Ö –∞–∫—Ü–∏–π:")
        currencies_all = {}
        for share in all_shares:
            currency = share.get('currency', 'Unknown')
            currencies_all[currency] = currencies_all.get(currency, 0) + 1
        
        for currency, count in sorted(currencies_all.items()):
            print(f"  {currency}: {count} –∞–∫—Ü–∏–π")
        
        print(f"\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ISIN –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –≤—Å–µ—Ö –∞–∫—Ü–∏–π:")
        isin_prefixes_all = {}
        for share in all_shares:
            isin = share.get('isin', '')
            if isin:
                prefix = isin[:2] if len(isin) >= 2 else 'Unknown'
                isin_prefixes_all[prefix] = isin_prefixes_all.get(prefix, 0) + 1
        
        for prefix, count in sorted(isin_prefixes_all.items()):
            print(f"  {prefix}: {count} –∞–∫—Ü–∏–π")
        
        print("\nüá∑üá∫ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π (russian_only=True)...")
        print("-" * 50)
        russian_shares = integrator.load_shares_from_tinkoff_api(api_key, russian_only=True)
        print(f"–†–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(russian_shares)}")
        
        if russian_shares:
            print("\nüè¢ –ü—Ä–∏–º–µ—Ä—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π (–ø–µ—Ä–≤—ã–µ 10):")
            for i, share in enumerate(russian_shares[:10]):
                currency = share.get('currency', 'Unknown')
                isin = share.get('isin', 'Unknown')
                print(f"  {i+1:2d}. {share['ticker']:6s} - {share['name'][:30]:30s} ({currency}) [{isin}]")
        
        print(f"\nüí± –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª—é—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π:")
        currencies_ru = {}
        for share in russian_shares:
            currency = share.get('currency', 'Unknown')
            currencies_ru[currency] = currencies_ru.get(currency, 0) + 1
        
        for currency, count in sorted(currencies_ru.items()):
            print(f"  {currency}: {count} –∞–∫—Ü–∏–π")
        
        print(f"\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ISIN –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π:")
        isin_prefixes_ru = {}
        for share in russian_shares:
            isin = share.get('isin', '')
            if isin:
                prefix = isin[:2] if len(isin) >= 2 else 'Unknown'
                isin_prefixes_ru[prefix] = isin_prefixes_ru.get(prefix, 0) + 1
        
        for prefix, count in sorted(isin_prefixes_ru.items()):
            print(f"  {prefix}: {count} –∞–∫—Ü–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π:")
        non_russian_count = 0
        for share in russian_shares:
            currency = share.get('currency', '')
            isin = share.get('isin', '')
            if currency != 'RUB' and not isin.startswith('RU'):
                non_russian_count += 1
                print(f"  ‚ö†Ô∏è –ù–µ —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –∞–∫—Ü–∏—è: {share['ticker']} - {share['name']} ({currency}) [{isin}]")
        
        if non_russian_count == 0:
            print("  ‚úÖ –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏!")
        else:
            print(f"  ‚ùå –ù–∞–π–¥–µ–Ω–æ {non_russian_count} –Ω–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print(f"  –í—Å–µ–≥–æ –∞–∫—Ü–∏–π: {len(all_shares)}")
        print(f"  –†–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π: {len(russian_shares)}")
        if len(all_shares) > 0:
            print(f"  –≠–∫–æ–Ω–æ–º–∏—è: {len(all_shares) - len(russian_shares)} –∞–∫—Ü–∏–π ({((len(all_shares) - len(russian_shares)) / len(all_shares) * 100):.1f}%)")
        
        print("\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_russian_filter()
