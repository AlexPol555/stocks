#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É MultiTimeframeStockAnalyzer, DataUpdater –∏ ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
"""

import sys
import os
import logging
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_multi_timeframe_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç MultiTimeframeStockAnalyzer."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MultiTimeframeStockAnalyzer...")
    
    try:
        from core.multi_timeframe_analyzer import MultiTimeframeStockAnalyzer
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (–±–µ–∑ API –∫–ª—é—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∞)
        analyzer = MultiTimeframeStockAnalyzer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        timeframes = analyzer.get_available_timeframes()
        logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {timeframes}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        for tf in ['1d', '1h', '1m', '5m', '15m']:
            supported = analyzer.is_timeframe_supported(tf)
            logger.info(f"  {tf}: {'‚úÖ' if supported else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ FIGI (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç–æ–π –±–µ–∑ API –∫–ª—é—á–∞)
        figi_mapping = analyzer.get_figi_mapping()
        logger.info(f"‚úÖ FIGI –º–∞–ø–ø–∏–Ω–≥: {len(figi_mapping)} –∑–∞–ø–∏—Å–µ–π")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MultiTimeframeStockAnalyzer: {e}")
        return False

def test_data_updater():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç DataUpdater."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DataUpdater...")
    
    try:
        from core.multi_timeframe_analyzer import DataUpdater
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä (–±–µ–∑ API –∫–ª—é—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∞)
        updater = DataUpdater()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä–∞: {'–ê–∫—Ç–∏–≤–µ–Ω' if updater.is_running else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        logger.info("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        for tf, schedule in updater.update_schedules.items():
            logger.info(f"  {tf}: {schedule}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DataUpdater: {e}")
        return False

def test_websocket_provider():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç WebSocketDataProvider."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocketDataProvider...")
    
    try:
        from core.multi_timeframe_analyzer import WebSocketDataProvider
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–±–µ–∑ API –∫–ª—é—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∞)
        provider = WebSocketDataProvider("")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        logger.info(f"‚úÖ WebSocket URL: {provider.ws_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {'–ü–æ–¥–∫–ª—é—á–µ–Ω' if provider.is_connected else '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocketDataProvider: {e}")
        return False

def test_real_time_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RealTimeDataManager."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RealTimeDataManager...")
    
    try:
        from core.multi_timeframe_analyzer import RealTimeDataManager
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä (–±–µ–∑ API –∫–ª—é—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∞)
        manager = RealTimeDataManager("")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã RealTimeDataManager:")
        logger.info(f"  MultiTimeframeStockAnalyzer: {'‚úÖ' if manager.multi_analyzer else '‚ùå'}")
        logger.info(f"  WebSocketDataProvider: {'‚úÖ' if manager.ws_provider else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö: {len(manager.data_cache)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RealTimeDataManager: {e}")
        return False

def test_ml_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ML."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        from core.ml.model_manager import MLModelManager
        from core.ml.storage import ml_storage
        
        # –°–æ–∑–¥–∞–µ–º ML –º–µ–Ω–µ–¥–∂–µ—Ä
        ml_manager = MLModelManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ ML:")
        for tf, config in ml_manager.timeframe_configs.items():
            logger.info(f"  {tf}: sequence_length={config['sequence_length']}, hidden_size={config['hidden_size']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º storage
        logger.info(f"‚úÖ ML Storage: models_dir={ml_storage.models_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
        try:
            tickers = ml_manager.get_available_tickers()
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: {len(tickers)}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä—ã: {e}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_database_tables():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from core.database import get_connection, create_tables
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = get_connection()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        create_tables(conn)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        expected_tables = [
            'data_1hour', 'data_1min', 'data_5min', 'data_15min',
            'ml_models', 'ml_predictions_cache', 'ml_performance_metrics'
        ]
        
        for table in expected_tables:
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'")
            exists = cursor.fetchone() is not None
            logger.info(f"  {table}: {'‚úÖ' if exists else '‚ùå'}")
        
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ë–î: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    tests = [
        ("MultiTimeframeStockAnalyzer", test_multi_timeframe_analyzer),
        ("DataUpdater", test_data_updater),
        ("WebSocketDataProvider", test_websocket_provider),
        ("RealTimeDataManager", test_real_time_manager),
        ("ML Integration", test_ml_integration),
        ("Database Tables", test_database_tables),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ –¢–µ—Å—Ç: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'='*50}")
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info(f"{'='*50}")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
    
    logger.info(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        logger.warning(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
