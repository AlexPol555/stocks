#!/usr/bin/env python3
"""
Simple debug script for Cascade Analyzer data issues.
–ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –∫–∞—Å–∫–∞–¥–Ω–æ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ.
"""

import sqlite3
from pathlib import Path

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    
    db_path = Path("stock_data.db")
    if not db_path.exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö stock_data.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞")
    
    try:
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"  - {table}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º companies
        if 'companies' in tables:
            cursor.execute("SELECT COUNT(*) FROM companies")
            company_count = cursor.fetchone()[0]
            print(f"\nüè¢ –ö–æ–º–ø–∞–Ω–∏–π –≤ –ë–î: {company_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            symbols = ['VSMO', 'UNAC', 'CNRU', 'VKCO', 'MGNT']
            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤:")
            for symbol in symbols:
                cursor.execute("SELECT id, ticker, figi FROM companies WHERE ticker = ?", (symbol,))
                company = cursor.fetchone()
                if company:
                    print(f"  ‚úÖ {symbol}: ID={company[0]}, FIGI={company[2] if company[2] else '–ù–µ—Ç FIGI'}")
                else:
                    print(f"  ‚ùå {symbol}: –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º daily_data
        if 'daily_data' in tables:
            cursor.execute("SELECT COUNT(*) FROM daily_data")
            daily_count = cursor.fetchone()[0]
            print(f"\nüìà –ó–∞–ø–∏—Å–µ–π daily_data: {daily_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            symbols = ['VSMO', 'UNAC', 'CNRU', 'VKCO', 'MGNT']
            print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ daily_data –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤:")
            for symbol in symbols:
                cursor.execute("""
                    SELECT COUNT(*) FROM daily_data dd 
                    JOIN companies c ON dd.company_id = c.id 
                    WHERE c.ticker = ?
                """, (symbol,))
                count = cursor.fetchone()[0]
                if count > 0:
                    print(f"  ‚úÖ {symbol}: {count} –∑–∞–ø–∏—Å–µ–π")
                else:
                    print(f"  ‚ùå {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    print("Simple Cascade Analyzer Debug")
    print("=" * 50)
    
    check_database()
    
    print("\nPossible causes:")
    print("1. Symbols not added to database")
    print("2. No daily_data for symbols")
    print("3. Missing FIGI mapping")
    print("4. Tinkoff API key issues")
    
    print("\nSolutions:")
    print("1. Add symbols to DB via populate_database.py")
    print("2. Update data via auto_update.py")
    print("3. Check API key in settings")
    print("4. Run full data update")

if __name__ == "__main__":
    main()
