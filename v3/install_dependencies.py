#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π News Pipeline
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
"""

import subprocess
import sys
from pathlib import Path


def install_package(package_name: str, description: str = "") -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ."""
    try:
        print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package_name}...")
        if description:
            print(f"  {description}")
        
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", package_name
        ], capture_output=True, text=True, check=True)
        
        print(f"‚úÖ {package_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package_name}: {e}")
        if e.stdout:
            print(f"  stdout: {e.stdout}")
        if e.stderr:
            print(f"  stderr: {e.stderr}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {package_name}: {e}")
        return False


def check_package(package_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç."""
    try:
        __import__(package_name)
        return True
    except ImportError:
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    print("=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π News Pipeline ===")
    print()
    
    # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
    basic_packages = [
        ("streamlit", "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"),
        ("pandas", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"),
        ("numpy", "–ß–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"),
        ("pyyaml", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"),
    ]
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
    optional_packages = [
        ("sentence-transformers", "–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"),
        ("rapidfuzz", "–ù–µ—á—ë—Ç–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫"),
        ("pymorphy3", "–†—É—Å—Å–∫–∞—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—è"),
        ("razdel", "–¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"),
        ("spacy", "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π"),
        ("faiss-cpu", "–ë—ã—Å—Ç—Ä—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫"),
        ("psutil", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"),
    ]
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    basic_success = 0
    for package, description in basic_packages:
        if check_package(package.replace("-", "_")):
            print(f"‚úÖ {package} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            basic_success += 1
        else:
            if install_package(package, description):
                basic_success += 1
        print()
    
    print(f"–ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {basic_success}/{len(basic_packages)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    print()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    optional_success = 0
    for package, description in optional_packages:
        if check_package(package.replace("-", "_")):
            print(f"‚úÖ {package} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            optional_success += 1
        else:
            print(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}? (y/n): ", end="")
            try:
                response = input().lower().strip()
                if response in ['y', 'yes', '–¥–∞', '–¥']:
                    if install_package(package, description):
                        optional_success += 1
                else:
                    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ {package}")
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
        print()
    
    print(f"–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {optional_success}/{len(optional_packages)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    print()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ spaCy –º–æ–¥–µ–ª–µ–π (–µ—Å–ª–∏ spaCy —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    if check_package("spacy"):
        print("üåç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ spaCy –º–æ–¥–µ–ª–µ–π...")
        spacy_models = [
            ("ru_core_news_sm", "–†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è NER"),
            ("en_core_web_sm", "–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è NER (fallback)"),
        ]
        
        for model, description in spacy_models:
            try:
                print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {model}...")
                subprocess.run([
                    sys.executable, "-m", "spacy", "download", model
                ], check=True, capture_output=True)
                print(f"‚úÖ {model} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.CalledProcessError:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {model}")
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("=== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ ===")
    print(f"‚úÖ –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {basic_success}/{len(basic_packages)}")
    print(f"üîß –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {optional_success}/{len(optional_packages)}")
    print()
    
    if basic_success == len(basic_packages):
        print("üéâ News Pipeline –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print()
        print("–î–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("  python tests/demo_news_pipeline.py  # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
        print("  streamlit run pages/9_üîç_News_Pipeline.py  # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        print("   News Pipeline –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.")
    
    print()
    print("–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å—Ä–∞–∑—É:")
    print("  pip install -r requirements.txt")
    print()
    print("–î–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    print("  pip install -r requirements-minimal.txt")


if __name__ == "__main__":
    main()
