#!/usr/bin/env python3
"""
Test API Filtering.
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Tinkoff API.
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_api_filtering():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Tinkoff API...")
    
    try:
        from core.shares_integration import SharesIntegrator
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        api_key = None
        try:
            import streamlit as st
            if hasattr(st, 'secrets') and hasattr(st.secrets, 'TINKOFF_API_KEY'):
                api_key = st.secrets.TINKOFF_API_KEY
        except ImportError:
            pass
        
        if not api_key:
            print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .streamlit/secrets.toml")
            return
        
        integrator = SharesIntegrator()
        
        print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞–∫—Ü–∏–π (INSTRUMENT_STATUS_ALL)...")
        all_shares = integrator.load_shares_from_tinkoff_api(api_key, russian_only=False)
        print(f"–í—Å–µ–≥–æ –∞–∫—Ü–∏–π: {len(all_shares)}")
        
        print("\nüá∑üá∫ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π (INSTRUMENT_STATUS_BASE)...")
        russian_shares = integrator.load_shares_from_tinkoff_api(api_key, russian_only=True)
        print(f"–†–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π: {len(russian_shares)}")
        
        if len(all_shares) > 0:
            print(f"\nüìà –≠–∫–æ–Ω–æ–º–∏—è: {len(all_shares) - len(russian_shares)} –∞–∫—Ü–∏–π ({((len(all_shares) - len(russian_shares)) / len(all_shares) * 100):.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π
        print("\nüè¢ –ü—Ä–∏–º–µ—Ä—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π:")
        for i, share in enumerate(russian_shares[:10]):
            share_type = share.get('share_type', 'Unknown')
            print(f"  {i+1}. {share['ticker']} - {share['name']} ({share['currency']}) [{share_type}]")
        
        if len(russian_shares) > 10:
            print(f"  ... –∏ –µ—â–µ {len(russian_shares) - 10} –∞–∫—Ü–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—ã
        currencies = {}
        for share in russian_shares:
            currency = share.get('currency', 'Unknown')
            currencies[currency] = currencies.get(currency, 0) + 1
        
        print(f"\nüí± –í–∞–ª—é—Ç—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π:")
        for currency, count in currencies.items():
            print(f"  {currency}: {count} –∞–∫—Ü–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –∞–∫—Ü–∏–π
        share_types = {}
        for share in russian_shares:
            share_type = share.get('share_type', 'Unknown')
            share_types[share_type] = share_types.get(share_type, 0) + 1
        
        print(f"\nüìä –¢–∏–ø—ã –∞–∫—Ü–∏–π:")
        for share_type, count in share_types.items():
            print(f"  {share_type}: {count} –∞–∫—Ü–∏–π")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_api_filtering()
