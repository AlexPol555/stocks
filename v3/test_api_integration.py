#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API –∫–ª—é—á–æ–º –∏–∑ secrets.toml
"""

import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_secrets_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É API –∫–ª—é—á–∞ –∏–∑ secrets.toml"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–∞...")
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É secrets –∫–∞–∫ –≤ Streamlit
        import toml
        
        # –ß–∏—Ç–∞–µ–º secrets.toml
        secrets_path = ".streamlit/secrets.toml"
        if os.path.exists(secrets_path):
            with open(secrets_path, 'r', encoding='utf-8') as f:
                secrets = toml.load(f)
            
            api_key = secrets.get('TINKOFF_API_KEY')
            if api_key:
                logger.info(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:8]}...")
                return True
            else:
                logger.error("‚ùå TINKOFF_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ secrets.toml")
                return False
        else:
            logger.error("‚ùå –§–∞–π–ª .streamlit/secrets.toml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ secrets: {e}")
        return False

def test_multi_timeframe_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç MultiTimeframeStockAnalyzer —Å API –∫–ª—é—á–æ–º"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MultiTimeframeStockAnalyzer...")
    
    try:
        from core.multi_timeframe_analyzer import MultiTimeframeStockAnalyzer
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (–¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á)
        analyzer = MultiTimeframeStockAnalyzer()
        
        if analyzer.api_key:
            logger.info(f"‚úÖ API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {analyzer.api_key[:8]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            timeframes = analyzer.get_available_timeframes()
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {timeframes}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º FIGI –º–∞–ø–ø–∏–Ω–≥
            try:
                figi_mapping = analyzer.get_figi_mapping()
                logger.info(f"‚úÖ FIGI –º–∞–ø–ø–∏–Ω–≥: {len(figi_mapping)} –∑–∞–ø–∏—Å–µ–π")
                
                if figi_mapping:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                    first_symbol = list(figi_mapping.keys())[0]
                    figi = figi_mapping[first_symbol]
                    
                    logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {first_symbol}...")
                    data = analyzer.get_stock_data(figi, '1d')
                    
                    if not data.empty:
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(data)} –∑–∞–ø–∏—Å–µ–π")
                        return True
                    else:
                        logger.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API)")
                        return True  # API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
                else:
                    logger.warning("‚ö†Ô∏è FIGI –º–∞–ø–ø–∏–Ω–≥ –ø—É—Å—Ç–æ–π")
                    return True
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                return True  # API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        else:
            logger.error("‚ùå API –∫–ª—é—á –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API...")
    
    tests = [
        ("Secrets Loading", test_secrets_loading),
        ("MultiTimeframeStockAnalyzer", test_multi_timeframe_analyzer),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ –¢–µ—Å—Ç: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'='*50}")
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info(f"{'='*50}")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
    
    logger.info(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
    else:
        logger.warning(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
