#!/usr/bin/env python3
"""
Debug script for Cascade Analyzer data issues.
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –∫–∞—Å–∫–∞–¥–Ω–æ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ.
"""

import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from core.database import get_connection
from core.multi_timeframe_analyzer_enhanced import EnhancedMultiTimeframeStockAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def debug_symbol_data(symbols):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤."""
    
    print(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = EnhancedMultiTimeframeStockAnalyzer()
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ FIGI
    figi_mapping = analyzer.get_figi_mapping()
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(figi_mapping)} FIGI –º–∞–ø–ø–∏–Ω–≥–æ–≤:")
    for symbol, figi in list(figi_mapping.items())[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"  {symbol} -> {figi}")
    if len(figi_mapping) > 5:
        print(f"  ... –∏ –µ—â–µ {len(figi_mapping) - 5} —Å–∏–º–≤–æ–ª–æ–≤")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
    for symbol in symbols:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞: {symbol}")
        
        # –ü–æ–ª—É—á–∞–µ–º FIGI
        figi = analyzer.get_figi_for_symbol(symbol)
        if not figi:
            print(f"  ‚ùå FIGI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {symbol}")
            continue
        
        print(f"  üìã FIGI: {figi}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        timeframes = ['1d', '1h', '1m', '1s']
        
        for tf in timeframes:
            try:
                data = analyzer.get_stock_data(figi, tf)
                if data.empty:
                    print(f"    ‚ùå {tf}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                else:
                    print(f"    ‚úÖ {tf}: {len(data)} –∑–∞–ø–∏—Å–µ–π")
                    if len(data) > 0:
                        latest = data.iloc[-1]
                        print(f"      –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {latest['time']} - {latest['close']}")
            except Exception as e:
                print(f"    ‚ùå {tf}: –û—à–∏–±–∫–∞ - {e}")
        
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        print(f"  üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º companies
        if 'companies' in tables:
            cursor.execute("SELECT COUNT(*) FROM companies")
            company_count = cursor.fetchone()[0]
            print(f"  üè¢ –ö–æ–º–ø–∞–Ω–∏–π –≤ –ë–î: {company_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            for symbol in symbols:
                cursor.execute("SELECT id, ticker, figi FROM companies WHERE ticker = ?", (symbol,))
                company = cursor.fetchone()
                if company:
                    print(f"    ‚úÖ {symbol}: ID={company[0]}, FIGI={company[2]}")
                else:
                    print(f"    ‚ùå {symbol}: –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º daily_data
        if 'daily_data' in tables:
            cursor.execute("SELECT COUNT(*) FROM daily_data")
            daily_count = cursor.fetchone()[0]
            print(f"  üìà –ó–∞–ø–∏—Å–µ–π daily_data: {daily_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            for symbol in symbols:
                cursor.execute("""
                    SELECT COUNT(*) FROM daily_data dd 
                    JOIN companies c ON dd.company_id = c.id 
                    WHERE c.ticker = ?
                """, (symbol,))
                count = cursor.fetchone()[0]
                print(f"    üìä {symbol}: {count} –∑–∞–ø–∏—Å–µ–π daily_data")
        
        conn.close()
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
    
    print("\n" + "=" * 60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    # –°–∏–º–≤–æ–ª—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    symbols = ['VSMO', 'UNAC', 'CNRU', 'VKCO', 'MGNT']
    
    print("üéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
    print("=" * 60)
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    debug_symbol_data(symbols)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏–º–≤–æ–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ Tinkoff")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: auto_update_all_tickers()")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
    
    print("\nüîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print("1. –î–æ–±–∞–≤–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –≤ –ë–î:")
    print("   python populate_database.py")
    print("2. –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:")
    print("   python auto_update.py")
    print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á:")
    print("   python check_api.py")

if __name__ == "__main__":
    main()




