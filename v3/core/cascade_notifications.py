#!/usr/bin/env python3
"""
Cascade Signal Notifications.
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import asyncio

from .cascade_analyzer import CascadeSignalResult
from .notifications import NotificationManager

logger = logging.getLogger(__name__)


class CascadeNotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
    
    def __init__(self, notification_manager: NotificationManager = None):
        self.notification_manager = notification_manager or NotificationManager()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_config = {
            'enabled': True,
            'min_confidence_for_notification': 0.7,
            'min_risk_reward_for_notification': 2.0,
            'auto_trade_notifications': True,
            'stage_rejection_notifications': False,  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –Ω–∞ —ç—Ç–∞–ø–∞—Ö
            'daily_summary': True,
            'telegram_enabled': True,
            'email_enabled': False,
            'webhook_enabled': False
        }
        
        # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_cache = {}
        self.cache_duration = timedelta(minutes=30)
    
    async def notify_cascade_signal(self, result: CascadeSignalResult) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∞—Å–∫–∞–¥–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ.
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.notification_config['enabled']:
                return False
            
            if not result.final_signal:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            cache_key = f"{result.symbol}_{result.final_signal}_{result.entry_price:.2f}"
            if self._is_cached(cache_key):
                logger.info(f"Notification already sent for {cache_key}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if not self._should_notify(result):
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification_data = self._format_cascade_notification(result)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            success = False
            
            if self.notification_config['telegram_enabled']:
                success |= await self._send_telegram_notification(notification_data)
            
            if self.notification_config['email_enabled']:
                success |= await self._send_email_notification(notification_data)
            
            if self.notification_config['webhook_enabled']:
                success |= await self._send_webhook_notification(notification_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            if success:
                self._cache_notification(cache_key)
                logger.info(f"Cascade notification sent for {result.symbol}")
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending cascade notification for {result.symbol}: {e}")
            return False
    
    async def notify_auto_trade_execution(self, trade_result: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–¥–µ–ª–∫–µ.
        
        Args:
            trade_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–¥–µ–ª–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.notification_config['auto_trade_notifications']:
                return False
            
            notification_data = {
                'type': 'auto_trade_execution',
                'title': 'ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
                'symbol': trade_result.get('symbol', 'Unknown'),
                'side': trade_result.get('side', 'Unknown'),
                'quantity': trade_result.get('quantity', 0),
                'price': trade_result.get('price', 0.0),
                'balance': trade_result.get('balance', 0.0),
                'timestamp': datetime.now().isoformat(),
                'success': trade_result.get('success', False)
            }
            
            success = False
            
            if self.notification_config['telegram_enabled']:
                success |= await self._send_telegram_notification(notification_data)
            
            if self.notification_config['email_enabled']:
                success |= await self._send_email_notification(notification_data)
            
            if self.notification_config['webhook_enabled']:
                success |= await self._send_webhook_notification(notification_data)
            
            if success:
                logger.info(f"Auto trade notification sent for {trade_result.get('symbol')}")
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending auto trade notification: {e}")
            return False
    
    async def notify_stage_rejection(self, symbol: str, stage: str, reason: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –Ω–∞ —ç—Ç–∞–ø–µ.
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            stage: –≠—Ç–∞–ø, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.notification_config['stage_rejection_notifications']:
                return False
            
            notification_data = {
                'type': 'stage_rejection',
                'title': f'‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ {stage}',
                'symbol': symbol,
                'stage': stage,
                'reason': reason,
                'timestamp': datetime.now().isoformat()
            }
            
            success = False
            
            if self.notification_config['telegram_enabled']:
                success |= await self._send_telegram_notification(notification_data)
            
            if self.notification_config['webhook_enabled']:
                success |= await self._send_webhook_notification(notification_data)
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending stage rejection notification: {e}")
            return False
    
    async def send_daily_summary(self, results: List[CascadeSignalResult]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫–∞—Å–∫–∞–¥–Ω—ã–º —Å–∏–≥–Ω–∞–ª–∞–º.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.notification_config['daily_summary']:
                return False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful_signals = [r for r in results if r.final_signal]
            rejected_signals = [r for r in results if not r.final_signal]
            
            buy_signals = [r for r in successful_signals if r.final_signal == 'BUY']
            sell_signals = [r for r in successful_signals if r.final_signal == 'SELL']
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            rejection_stats = {}
            for result in rejected_signals:
                stage = result.rejected_at_stage or 'unknown'
                rejection_stats[stage] = rejection_stats.get(stage, 0) + 1
            
            notification_data = {
                'type': 'daily_summary',
                'title': 'üìä –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤',
                'date': datetime.now().strftime('%Y-%m-%d'),
                'total_analyzed': len(results),
                'successful_signals': len(successful_signals),
                'rejected_signals': len(rejected_signals),
                'buy_signals': len(buy_signals),
                'sell_signals': len(sell_signals),
                'rejection_stats': rejection_stats,
                'avg_confidence': sum(r.confidence for r in successful_signals) / len(successful_signals) if successful_signals else 0,
                'timestamp': datetime.now().isoformat()
            }
            
            success = False
            
            if self.notification_config['telegram_enabled']:
                success |= await self._send_telegram_notification(notification_data)
            
            if self.notification_config['email_enabled']:
                success |= await self._send_email_notification(notification_data)
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending daily summary: {e}")
            return False
    
    def _should_notify(self, result: CascadeSignalResult) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if result.confidence < self.notification_config['min_confidence_for_notification']:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            if result.risk_reward < self.notification_config['min_risk_reward_for_notification']:
                return False
            
            return True
            
        except Exception:
            return False
    
    def _format_cascade_notification(self, result: CascadeSignalResult) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—Å–∫–∞–¥–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
            signal_emoji = "üü¢" if result.final_signal == 'BUY' else "üî¥"
            signal_text = "–ü–û–ö–£–ü–ö–ê" if result.final_signal == 'BUY' else "–ü–†–û–î–ê–ñ–ê"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–ø–∞—Ö
            stages_info = []
            for stage, stage_data in result.stages.items():
                if stage_data.get('proceed', False):
                    stages_info.append(f"‚úÖ {stage}: {stage_data.get('reason', 'OK')}")
                else:
                    stages_info.append(f"‚ùå {stage}: {stage_data.get('reason', 'Failed')}")
            
            stages_text = "\n".join(stages_info)
            
            notification_data = {
                'type': 'cascade_signal',
                'title': f'{signal_emoji} –ö–∞—Å–∫–∞–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal_text}',
                'symbol': result.symbol,
                'signal': result.final_signal,
                'confidence': f"{result.confidence:.1%}",
                'entry_price': f"{result.entry_price:.2f}",
                'stop_loss': f"{result.stop_loss:.2f}",
                'take_profit': f"{result.take_profit:.2f}",
                'risk_reward': f"{result.risk_reward:.1f}",
                'stages': stages_text,
                'auto_trade_enabled': result.auto_trade_enabled,
                'timestamp': result.timestamp.strftime('%Y-%m-%d %H:%M:%S')
            }
            
            return notification_data
            
        except Exception as e:
            logger.error(f"Error formatting cascade notification: {e}")
            return {}
    
    async def _send_telegram_notification(self, notification_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
        try:
            if not self.notification_manager:
                return False
            
            message = self._format_telegram_message(notification_data)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π notification_manager
            if hasattr(self.notification_manager, 'send_telegram_message'):
                return await self.notification_manager.send_telegram_message(message)
            else:
                # Fallback - –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.info(f"Telegram notification: {message}")
                return True
                
        except Exception as e:
            logger.error(f"Error sending Telegram notification: {e}")
            return False
    
    async def _send_email_notification(self, notification_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ email."""
        try:
            if not self.notification_manager:
                return False
            
            subject = notification_data.get('title', 'Cascade Signal Notification')
            message = self._format_email_message(notification_data)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π notification_manager
            if hasattr(self.notification_manager, 'send_email'):
                return await self.notification_manager.send_email(subject, message)
            else:
                # Fallback - –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.info(f"Email notification: {subject} - {message}")
                return True
                
        except Exception as e:
            logger.error(f"Error sending email notification: {e}")
            return False
    
    async def _send_webhook_notification(self, notification_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webhook."""
        try:
            if not self.notification_manager:
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π notification_manager
            if hasattr(self.notification_manager, 'send_webhook'):
                return await self.notification_manager.send_webhook(notification_data)
            else:
                # Fallback - –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                logger.info(f"Webhook notification: {notification_data}")
                return True
                
        except Exception as e:
            logger.error(f"Error sending webhook notification: {e}")
            return False
    
    def _format_telegram_message(self, notification_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram."""
        try:
            notification_type = notification_data.get('type', 'unknown')
            
            if notification_type == 'cascade_signal':
                message = f"""
üéØ {notification_data.get('title', '–ö–∞—Å–∫–∞–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª')}

üìä **{notification_data.get('symbol')}** - {notification_data.get('signal')}
üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {notification_data.get('entry_price')} ‚ÇΩ
üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {notification_data.get('stop_loss')} ‚ÇΩ
üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {notification_data.get('take_profit')} ‚ÇΩ
‚öñÔ∏è –†–∏—Å–∫/–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {notification_data.get('risk_reward')}
üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {notification_data.get('confidence')}

üìã **–≠—Ç–∞–ø—ã –∞–Ω–∞–ª–∏–∑–∞:**
{notification_data.get('stages', 'N/A')}

ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if notification_data.get('auto_trade_enabled') else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}
üïê –í—Ä–µ–º—è: {notification_data.get('timestamp')}
"""
            
            elif notification_type == 'auto_trade_execution':
                message = f"""
ü§ñ {notification_data.get('title', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–¥–µ–ª–∫–∞')}

üìä **{notification_data.get('symbol')}** - {notification_data.get('side')}
üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {notification_data.get('quantity')} —à—Ç.
üí∞ –¶–µ–Ω–∞: {notification_data.get('price')} ‚ÇΩ
üí≥ –ë–∞–ª–∞–Ω—Å: {notification_data.get('balance')} ‚ÇΩ
üïê –í—Ä–µ–º—è: {notification_data.get('timestamp')}
"""
            
            elif notification_type == 'daily_summary':
                message = f"""
üìä {notification_data.get('title', '–î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞')}

üìà –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {notification_data.get('total_analyzed')}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {notification_data.get('successful_signals')}
‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {notification_data.get('rejected_signals')}

üìä **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:**
üü¢ –ü–æ–∫—É–ø–∫–∏: {notification_data.get('buy_signals')}
üî¥ –ü—Ä–æ–¥–∞–∂–∏: {notification_data.get('sell_signals')}

üìâ **–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ —ç—Ç–∞–ø–∞–º:**
"""
                for stage, count in notification_data.get('rejection_stats', {}).items():
                    message += f"‚Ä¢ {stage}: {count}\n"
                
                avg_conf = notification_data.get('avg_confidence', 0)
                message += f"\nüéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_conf:.1%}"
                message += f"\nüïê –î–∞—Ç–∞: {notification_data.get('date')}"
            
            else:
                message = f"üîî {notification_data.get('title', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')}\n\n{notification_data}"
            
            return message.strip()
            
        except Exception as e:
            logger.error(f"Error formatting Telegram message: {e}")
            return f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_data.get('title', 'Cascade Signal')}"
    
    def _format_email_message(self, notification_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è email."""
        try:
            notification_type = notification_data.get('type', 'unknown')
            
            if notification_type == 'cascade_signal':
                message = f"""
–ö–∞—Å–∫–∞–¥–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª

–°–∏–º–≤–æ–ª: {notification_data.get('symbol')}
–°–∏–≥–Ω–∞–ª: {notification_data.get('signal')}
–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {notification_data.get('entry_price')} ‚ÇΩ
–°—Ç–æ–ø-–ª–æ—Å—Å: {notification_data.get('stop_loss')} ‚ÇΩ
–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {notification_data.get('take_profit')} ‚ÇΩ
–†–∏—Å–∫/–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {notification_data.get('risk_reward')}
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {notification_data.get('confidence')}

–≠—Ç–∞–ø—ã –∞–Ω–∞–ª–∏–∑–∞:
{notification_data.get('stages', 'N/A')}

–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: {'–í–∫–ª—é—á–µ–Ω–∞' if notification_data.get('auto_trade_enabled') else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
–í—Ä–µ–º—è: {notification_data.get('timestamp')}
"""
            
            else:
                message = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_data.get('title', 'Cascade Signal')}\n\n{notification_data}"
            
            return message.strip()
            
        except Exception as e:
            logger.error(f"Error formatting email message: {e}")
            return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_data.get('title', 'Cascade Signal')}"
    
    def _is_cached(self, cache_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫—ç—à–µ."""
        try:
            if cache_key in self.notification_cache:
                cache_time = self.notification_cache[cache_key]
                if datetime.now() - cache_time < self.cache_duration:
                    return True
                else:
                    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
                    del self.notification_cache[cache_key]
            return False
        except Exception:
            return False
    
    def _cache_notification(self, cache_key: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫—ç—à."""
        try:
            self.notification_cache[cache_key] = datetime.now()
        except Exception as e:
            logger.error(f"Error caching notification: {e}")
    
    def update_notification_config(self, config_updates: Dict[str, Any]):
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.notification_config.update(config_updates)
        logger.info(f"Notification config updated: {config_updates}")
    
    def get_notification_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        return self.notification_config.copy()
    
    def clear_notification_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.notification_cache.clear()
        logger.info("Notification cache cleared")




