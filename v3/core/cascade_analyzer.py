#!/usr/bin/env python3
"""
Cascade Multi-Timeframe Analyzer.
–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Å–∏–≥–Ω–∞–ª–æ–≤.

Workflow:
1. –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π ML –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–∞–±–ª–∏—Ü–µ data_1d
2. –ü–æ –∫–Ω–æ–ø–∫–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑" - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞—Å–∫–∞–¥: 1h ‚Üí 1m ‚Üí 1s ‚Üí —Ç–æ—Ä–≥–æ–≤–ª—è
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
import pandas as pd
import numpy as np
import asyncio

from core.ml.cascade_cache import cascade_ml_cache

logger = logging.getLogger(__name__)


class CascadeSignalResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤."""
    
    def __init__(self):
        self.symbol = ""
        self.timestamp = datetime.now()
        self.stages = {}  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
        self.final_signal = None
        self.confidence = 0.0
        self.entry_price = 0.0
        self.stop_loss = 0.0
        self.take_profit = 0.0
        self.risk_reward = 0.0
        self.rejected_at_stage = None
        self.rejection_reason = ""
        self.auto_trade_enabled = False
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return {
            'symbol': self.symbol,
            'timestamp': self.timestamp.isoformat(),
            'final_signal': self.final_signal,
            'confidence': self.confidence,
            'entry_price': self.entry_price,
            'stop_loss': self.stop_loss,
            'take_profit': self.take_profit,
            'risk_reward': self.risk_reward,
            'stages': self.stages,
            'rejected_at_stage': self.rejected_at_stage,
            'rejection_reason': self.rejection_reason,
            'auto_trade_enabled': self.auto_trade_enabled,
            'is_valid': self.final_signal is not None
        }


class CascadeAnalyzer:
    """–ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
    
    Workflow:
    1. –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π ML –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–∞–±–ª–∏—Ü–µ data_1d
    2. –ü–æ –∫–Ω–æ–ø–∫–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑" - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞—Å–∫–∞–¥: 1d ‚Üí 1h ‚Üí 1m ‚Üí 1s ‚Üí —Ç–æ—Ä–≥–æ–≤–ª—è
    """
    
    def __init__(self, multi_analyzer, ml_manager=None, demo_trading=None):
        self.multi_analyzer = multi_analyzer
        self.ml_manager = ml_manager
        self.demo_trading = demo_trading
        
        # –ö—ç—à –¥–ª—è ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞
        self.initial_ml_cache = {}
        
        print(f"üîß [CASCADE_INIT] CascadeAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üîß [CASCADE_INIT] ML –º–µ–Ω–µ–¥–∂–µ—Ä: {type(self.ml_manager) if self.ml_manager else 'None'}")
        print(f"üîß [CASCADE_INIT] Multi analyzer: {type(self.multi_analyzer) if self.multi_analyzer else 'None'}")
        print(f"üîß [CASCADE_INIT] –ö—ç—à ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(self.initial_ml_cache)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å–∫–∞–¥–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.stage_configs = {
            '1d': {
                'min_confidence': 0.6,
                'required_signals': ['ensemble', 'price'],
                'lookback_days': 365
            },
            '1h': {
                'min_confidence': 0.5,
                'required_confirmations': ['trend', 'volume'],
                'lookback_days': 7
            },
            '1m': {
                'min_confidence': 0.4,
                'required_confirmations': ['entry_point', 'risk_reward'],
                'lookback_days': 1
            },
            '1s': {
                'min_confidence': 0.3,
                'required_confirmations': ['execution_quality'],
                'lookback_days': 0.02  # 30 –º–∏–Ω—É—Ç
            }
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.auto_trade_config = {
            'enabled': False,
            'min_confidence': 0.75,
            'max_position_size': 1000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö
            'risk_per_trade': 0.02,  # 2% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
            'max_daily_trades': 5,
            'trading_hours': {'start': 9, 'end': 18}  # –í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        }
    
    def inspect_ml_cache(self) -> Dict[str, Any]:
        """–ò–Ω—Å–ø–µ–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫—ç—à–∞ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        try:
            print(f"üîç [CACHE_INSPECT] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Å–ø–µ–∫—Ü–∏—é –∫—ç—à–∞ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            print(f"üîç [CACHE_INSPECT] –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(self.initial_ml_cache)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            if not self.initial_ml_cache:
                print("‚ö†Ô∏è [CACHE_INSPECT] –ö—ç—à –ø—É—Å—Ç–æ–π")
                return {
                    'cache_size': 0,
                    'symbols': [],
                    'strong_signals': [],
                    'cache_details': {}
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞
            symbols = list(self.initial_ml_cache.keys())
            strong_signals = []
            cache_details = {}
            
            print(f"üìã [CACHE_INSPECT] –°–∏–º–≤–æ–ª—ã –≤ –∫—ç—à–µ: {symbols[:10]}{'...' if len(symbols) > 10 else ''}")
            
            for symbol, ml_result in self.initial_ml_cache.items():
                ensemble_signal = ml_result.get('ml_ensemble_signal', 'HOLD')
                confidence = ml_result.get('ml_price_confidence', 0.0)
                
                cache_details[symbol] = {
                    'ensemble_signal': ensemble_signal,
                    'confidence': confidence,
                    'has_error': 'error' in ml_result,
                    'keys': list(ml_result.keys())
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                if (ensemble_signal in ['BUY', 'STRONG_BUY', 'SELL', 'STRONG_SELL'] and 
                    confidence >= 0.5):
                    strong_signals.append({
                        'symbol': symbol,
                        'signal': ensemble_signal,
                        'confidence': confidence
                    })
                
                print(f"  üìä {symbol}: {ensemble_signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})")
            
            print(f"üéØ [CACHE_INSPECT] –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(strong_signals)}")
            print(f"üìä [CACHE_INSPECT] –î–µ—Ç–∞–ª–∏ –∫—ç—à–∞: {len(cache_details)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            return {
                'cache_size': len(self.initial_ml_cache),
                'symbols': symbols,
                'strong_signals': strong_signals,
                'cache_details': cache_details
            }
            
        except Exception as e:
            print(f"‚ùå [CACHE_INSPECT] –û—à–∏–±–∫–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –∫—ç—à–∞: {e}")
            return {
                'cache_size': 0,
                'symbols': [],
                'strong_signals': [],
                'cache_details': {},
                'error': str(e)
            }
    
    def verify_cache_integrity(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        try:
            print(f"üîç [CACHE_VERIFY] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫—ç—à–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            cache_size = len(self.initial_ml_cache)
            print(f"üìä [CACHE_VERIFY] –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {cache_size}")
            
            if cache_size == 0:
                print("‚ö†Ô∏è [CACHE_VERIFY] –ö—ç—à –ø—É—Å—Ç–æ–π")
                return {
                    'is_valid': False,
                    'cache_size': 0,
                    'issues': ['–ö—ç—à –ø—É—Å—Ç–æ–π'],
                    'recommendations': ['–ó–∞–ø—É—Å—Ç–∏—Ç–µ ML –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫—ç—à–∞']
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            issues = []
            valid_entries = 0
            invalid_entries = 0
            
            for symbol, ml_result in self.initial_ml_cache.items():
                if not isinstance(ml_result, dict):
                    issues.append(f"–°–∏–º–≤–æ–ª {symbol}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º")
                    invalid_entries += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏
                required_keys = ['ml_ensemble_signal', 'ml_price_confidence']
                missing_keys = [key for key in required_keys if key not in ml_result]
                
                if missing_keys:
                    issues.append(f"–°–∏–º–≤–æ–ª {symbol}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ {missing_keys}")
                    invalid_entries += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π
                if not isinstance(ml_result.get('ml_ensemble_signal'), str):
                    issues.append(f"–°–∏–º–≤–æ–ª {symbol}: ml_ensemble_signal –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π")
                    invalid_entries += 1
                    continue
                
                if not isinstance(ml_result.get('ml_price_confidence'), (int, float)):
                    issues.append(f"–°–∏–º–≤–æ–ª {symbol}: ml_price_confidence –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
                    invalid_entries += 1
                    continue
                
                valid_entries += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            error_entries = sum(1 for result in self.initial_ml_cache.values() if 'error' in result)
            
            print(f"‚úÖ [CACHE_VERIFY] –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {valid_entries}")
            print(f"‚ùå [CACHE_VERIFY] –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {invalid_entries}")
            print(f"‚ö†Ô∏è [CACHE_VERIFY] –ó–∞–ø–∏—Å–µ–π —Å –æ—à–∏–±–∫–∞–º–∏: {error_entries}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = []
            if invalid_entries > 0:
                recommendations.append("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ ML –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            if error_entries > 0:
                recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ ML –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫")
            if valid_entries == 0:
                recommendations.append("–ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
            
            is_valid = invalid_entries == 0 and valid_entries > 0
            
            print(f"üéØ [CACHE_VERIFY] –ö—ç—à –≤–∞–ª–∏–¥–µ–Ω: {is_valid}")
            if issues:
                print(f"‚ö†Ô∏è [CACHE_VERIFY] –ü—Ä–æ–±–ª–µ–º—ã: {issues[:3]}{'...' if len(issues) > 3 else ''}")
            
            return {
                'is_valid': is_valid,
                'cache_size': cache_size,
                'valid_entries': valid_entries,
                'invalid_entries': invalid_entries,
                'error_entries': error_entries,
                'issues': issues,
                'recommendations': recommendations
            }
            
        except Exception as e:
            print(f"‚ùå [CACHE_VERIFY] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
            return {
                'is_valid': False,
                'cache_size': 0,
                'issues': [f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"],
                'recommendations': ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É']
            }
        
    
    async def analyze_symbol_cascade(self, symbol: str, initial_ml_result: Dict[str, Any] = None) -> CascadeSignalResult:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–∏–º–≤–æ–ª–∞.
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'SBER')
            initial_ml_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ ML –∞–Ω–∞–ª–∏–∑–∞ (1d)
            
        Returns:
            CascadeSignalResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        result = CascadeSignalResult()
        result.symbol = symbol
        
        try:
            print(f"üîç [CASCADE_SYMBOL] –ù–∞—á–∏–Ω–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {symbol}")
            print(f"üîç [CASCADE_SYMBOL] initial_ml_result: {initial_ml_result}")
            print(f"üîç [CASCADE_SYMBOL] –¢–∏–ø initial_ml_result: {type(initial_ml_result)}")
            logger.info(f"Starting cascade analysis for {symbol}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not initial_ml_result:
                print(f"üìã [CASCADE_SYMBOL] {symbol}: –ü–æ–ª—É—á–∞–µ–º ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞...")
                print(f"üîç [CASCADE_SYMBOL] {symbol}: –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(self.initial_ml_cache)}")
                print(f"üîç [CASCADE_SYMBOL] {symbol}: –ö–ª—é—á–∏ –≤ –∫—ç—à–µ: {list(self.initial_ml_cache.keys())[:5]}")
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞
                initial_ml_result = self.initial_ml_cache.get(symbol, {})
                print(f"üîç [CASCADE_SYMBOL] {symbol}: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞: {initial_ml_result}")
            
            if not initial_ml_result:
                print(f"‚ùå [CASCADE_SYMBOL] {symbol}: –ù–µ—Ç ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                result.rejected_at_stage = '1d'
                result.rejection_reason = 'No initial ML result available'
                logger.warning(f"{symbol} rejected: No initial ML result")
                return result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ML —Å–∏–≥–Ω–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            ensemble_signal = initial_ml_result.get('ml_ensemble_signal', 'HOLD')
            confidence = initial_ml_result.get('ml_price_confidence', 0.0)
            
            print(f"üìä [CASCADE_SYMBOL] {symbol}: ML —Å–∏–≥–Ω–∞–ª = {ensemble_signal}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å = {confidence:.1%}")
            
            if ensemble_signal not in ['BUY', 'STRONG_BUY', 'SELL', 'STRONG_SELL']:
                print(f"‚ùå [CASCADE_SYMBOL] {symbol}: –°–ª–∞–±—ã–π ML —Å–∏–≥–Ω–∞–ª {ensemble_signal}")
                result.rejected_at_stage = '1d'
                result.rejection_reason = f'Weak ML signal: {ensemble_signal}'
                logger.info(f"{symbol} rejected: Weak ML signal {ensemble_signal}")
                return result
            
            if confidence < 0.5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                print(f"‚ùå [CASCADE_SYMBOL] {symbol}: –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.1%}")
                result.rejected_at_stage = '1d'
                result.rejection_reason = f'Low ML confidence: {confidence:.2f}'
                logger.info(f"{symbol} rejected: Low ML confidence {confidence:.2f}")
                return result
            
            print(f"‚úÖ [CASCADE_SYMBOL] {symbol}: –≠—Ç–∞–ø 1d –ø—Ä–æ–π–¥–µ–Ω")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1d —ç—Ç–∞–ø–∞
            result.stages['1d'] = {
                'proceed': True,
                'signal': ensemble_signal,
                'confidence': confidence,
                'ensemble_signal': ensemble_signal,
                'price_signal': initial_ml_result.get('ml_price_signal', 'HOLD'),
                'sentiment_signal': initial_ml_result.get('ml_sentiment_signal', 'HOLD'),
                'technical_signal': initial_ml_result.get('ml_technical_signal', 'HOLD'),
                'reason': 'Initial ML analysis passed'
            }
            
            # –≠—Ç–∞–ø 1: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (1h)
            print(f"‚è∞ [CASCADE_SYMBOL] {symbol}: –≠—Ç–∞–ø 1h - –∞–Ω–∞–ª–∏–∑ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            stage1_result = await self._analyze_stage_1h(symbol, result.stages['1d'])
            result.stages['1h'] = stage1_result
            
            if not stage1_result['proceed']:
                print(f"‚ùå [CASCADE_SYMBOL] {symbol}: –û—Ç–∫–ª–æ–Ω–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ 1h - {stage1_result['reason']}")
                result.rejected_at_stage = '1h'
                result.rejection_reason = stage1_result['reason']
                logger.info(f"{symbol} rejected at stage 1h: {result.rejection_reason}")
                return result
            
            print(f"‚úÖ [CASCADE_SYMBOL] {symbol}: –≠—Ç–∞–ø 1h –ø—Ä–æ–π–¥–µ–Ω")
            
            # –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (1m)
            print(f"üéØ [CASCADE_SYMBOL] {symbol}: –≠—Ç–∞–ø 1m - –ø–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞...")
            stage2_result = await self._analyze_stage_1m(symbol, result.stages['1d'], stage1_result)
            result.stages['1m'] = stage2_result
            
            if not stage2_result['proceed']:
                print(f"‚ùå [CASCADE_SYMBOL] {symbol}: –û—Ç–∫–ª–æ–Ω–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ 1m - {stage2_result['reason']}")
                result.rejected_at_stage = '1m'
                result.rejection_reason = stage2_result['reason']
                logger.info(f"{symbol} rejected at stage 1m: {result.rejection_reason}")
                return result
            
            print(f"‚úÖ [CASCADE_SYMBOL] {symbol}: –≠—Ç–∞–ø 1m –ø—Ä–æ–π–¥–µ–Ω")
            
            # –≠—Ç–∞–ø 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ–∫—É–Ω–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (1s)
            print(f"‚ö° [CASCADE_SYMBOL] {symbol}: –≠—Ç–∞–ø 1s - –º–∏–∫—Ä–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...")
            stage3_result = await self._analyze_stage_1s(symbol, result.stages['1d'], stage1_result, stage2_result)
            result.stages['1s'] = stage3_result
            
            if not stage3_result['proceed']:
                print(f"‚ùå [CASCADE_SYMBOL] {symbol}: –û—Ç–∫–ª–æ–Ω–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ 1s - {stage3_result['reason']}")
                result.rejected_at_stage = '1s'
                result.rejection_reason = stage3_result['reason']
                logger.info(f"{symbol} rejected at stage 1s: {result.rejection_reason}")
                return result
            
            print(f"‚úÖ [CASCADE_SYMBOL] {symbol}: –≠—Ç–∞–ø 1s –ø—Ä–æ–π–¥–µ–Ω")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            result.final_signal = ensemble_signal  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–≥–Ω–∞–ª –∏–∑ ML –∞–Ω–∞–ª–∏–∑–∞
            result.confidence = self._calculate_final_confidence(
                result.stages['1d'], stage1_result, stage2_result, stage3_result
            )
            result.entry_price = stage3_result['entry_price']
            result.stop_loss = stage2_result['stop_loss']
            result.take_profit = stage2_result['take_profit']
            result.risk_reward = stage2_result['risk_reward']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
            result.auto_trade_enabled = (
                self.auto_trade_config['enabled'] and 
                result.confidence >= self.auto_trade_config['min_confidence'] and
                self._is_trading_hours()
            )
            
            print(f"üéâ [CASCADE_SYMBOL] {symbol}: –ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"  üìä –°–∏–≥–Ω–∞–ª: {result.final_signal}")
            print(f"  üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%}")
            print(f"  üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {result.entry_price:.2f}")
            print(f"  üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {result.stop_loss:.2f}")
            print(f"  üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {result.take_profit:.2f}")
            print(f"  ‚öñÔ∏è –†–∏—Å–∫/–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result.risk_reward:.1f}")
            print(f"  ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: {'–î–∞' if result.auto_trade_enabled else '–ù–µ—Ç'}")
            
            logger.info(f"{symbol} cascade analysis completed successfully. Signal: {result.final_signal}, Confidence: {result.confidence:.2f}")
            
        except Exception as e:
            print(f"üí• [CASCADE_SYMBOL] {symbol}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
            logger.error(f"Error in cascade analysis for {symbol}: {e}")
            result.rejected_at_stage = 'error'
            result.rejection_reason = str(e)
        
        return result
    
    async def _analyze_stage_1d(self, symbol: str) -> Dict[str, Any]:
        """–≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ ML —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º FIGI –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            figi = self.multi_analyzer.get_figi_for_symbol(symbol)
            if not figi:
                return {
                    'proceed': False,
                    'reason': f'No FIGI mapping found for symbol {symbol}',
                    'signal': None,
                    'confidence': 0.0
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã data_1d –∏–ª–∏ daily_data
            daily_data = self._get_data_from_db(symbol, '1d')
            
            if daily_data.empty:
                logger.warning(f"No daily data available for {symbol} (FIGI: {figi})")
                return {
                    'proceed': False,
                    'reason': f'No daily data available for {symbol} (FIGI: {figi})',
                    'signal': None,
                    'confidence': 0.0
                }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ML —Å–∏–≥–Ω–∞–ª—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            ml_signals = {}
            if symbol in self.initial_ml_cache:
                ml_signals = self.initial_ml_cache[symbol]
                logger.info(f"Using cached ML signals for {symbol}")
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ML —Å–∏–≥–Ω–∞–ª—ã, –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ
                if self.ml_manager:
                    try:
                        from core.ml.signals import MLSignalGenerator
                        signal_generator = MLSignalGenerator(self.ml_manager)
                        ml_signals = await signal_generator.generate_ml_signals(symbol)
                    except Exception as e:
                        logger.warning(f"ML signals generation failed for {symbol}: {e}")
            
            # –ï—Å–ª–∏ ML –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            if not ml_signals or 'error' in ml_signals:
                ml_signals = self._generate_fallback_signals(daily_data)
            
            ensemble_signal = ml_signals.get('ml_ensemble_signal', 'HOLD')
            price_signal = ml_signals.get('ml_price_signal', 'HOLD')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞
            config = self.stage_configs['1d']
            required_signals = config['required_signals']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            has_ensemble = ensemble_signal in ['BUY', 'STRONG_BUY', 'SELL', 'STRONG_SELL']
            has_price = price_signal in ['BUY', 'STRONG_BUY', 'SELL', 'STRONG_SELL']
            
            if not (has_ensemble and has_price):
                return {
                    'proceed': False,
                    'reason': f'Missing required signals. Ensemble: {ensemble_signal}, Price: {price_signal}',
                    'signal': ensemble_signal,
                    'confidence': 0.0
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤
            buy_signals = [ensemble_signal, price_signal].count('BUY') + [ensemble_signal, price_signal].count('STRONG_BUY')
            sell_signals = [ensemble_signal, price_signal].count('SELL') + [ensemble_signal, price_signal].count('STRONG_SELL')
            
            if buy_signals > sell_signals:
                final_signal = 'BUY'
                confidence = min(0.9, 0.5 + buy_signals * 0.2)
            elif sell_signals > buy_signals:
                final_signal = 'SELL'
                confidence = min(0.9, 0.5 + sell_signals * 0.2)
            else:
                return {
                    'proceed': False,
                    'reason': 'Conflicting signals between ensemble and price models',
                    'signal': ensemble_signal,
                    'confidence': 0.0
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if confidence < config['min_confidence']:
                return {
                    'proceed': False,
                    'reason': f'Confidence too low: {confidence:.2f} < {config["min_confidence"]}',
                    'signal': final_signal,
                    'confidence': confidence
                }
            
            return {
                'proceed': True,
                'reason': 'Daily ML signals confirmed',
                'signal': final_signal,
                'confidence': confidence,
                'ensemble_signal': ensemble_signal,
                'price_signal': price_signal,
                'sentiment_signal': ml_signals.get('ml_sentiment_signal', 'HOLD'),
                'technical_signal': ml_signals.get('ml_technical_signal', 'HOLD'),
                'data_points': len(daily_data)
            }
            
        except Exception as e:
            logger.error(f"Error in stage 1d analysis for {symbol}: {e}")
            return {
                'proceed': False,
                'reason': f'Stage 1d error: {str(e)}',
                'signal': None,
                'confidence': 0.0
            }
    
    def _generate_fallback_signals(self, daily_data: pd.DataFrame) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å fallback —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
        try:
            if len(daily_data) < 20:
                return {'ml_ensemble_signal': 'HOLD', 'ml_price_signal': 'HOLD'}
            
            # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            data = daily_data.copy()
            data['SMA_20'] = data['close'].rolling(window=20, min_periods=1).mean()
            data['SMA_50'] = data['close'].rolling(window=50, min_periods=1).mean()
            
            current_price = data['close'].iloc[-1]
            sma_20 = data['SMA_20'].iloc[-1]
            sma_50 = data['SMA_50'].iloc[-1]
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            if current_price > sma_20 > sma_50:
                signal = 'BUY'
                confidence = 0.6
            elif current_price < sma_20 < sma_50:
                signal = 'SELL'
                confidence = 0.6
            else:
                signal = 'HOLD'
                confidence = 0.3
            
            return {
                'ml_ensemble_signal': signal,
                'ml_price_signal': signal,
                'ml_sentiment_signal': 'HOLD',
                'ml_technical_signal': signal,
                'confidence': confidence
            }
            
        except Exception as e:
            logger.error(f"Error generating fallback signals: {e}")
            return {'ml_ensemble_signal': 'HOLD', 'ml_price_signal': 'HOLD'}
    
    async def _analyze_stage_1h(self, symbol: str, stage1_result: Dict[str, Any]) -> Dict[str, Any]:
        """–≠—Ç–∞–ø 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º FIGI –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            figi = self.multi_analyzer.get_figi_for_symbol(symbol)
            if not figi:
                return {
                    'proceed': False,
                    'reason': f'No FIGI mapping found for symbol {symbol}',
                    'trend': None,
                    'confidence': 0.0
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã data_1hour
            hourly_data = self._get_data_from_db(symbol, '1h')
            
            if hourly_data.empty:
                return {
                    'proceed': False,
                    'reason': 'No hourly data available',
                    'trend': None,
                    'confidence': 0.0
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –Ω–∞ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            trend_analysis = self._analyze_hourly_trend(hourly_data, stage1_result['signal'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞
            config = self.stage_configs['1h']
            required_confirmations = config['required_confirmations']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            trend_confirmed = trend_analysis['trend_aligned']
            volume_confirmed = trend_analysis['volume_confirmation']
            
            confirmations = {
                'trend': trend_confirmed,
                'volume': volume_confirmed
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            missing_confirmations = [conf for conf in required_confirmations if not confirmations.get(conf, False)]
            
            if missing_confirmations:
                return {
                    'proceed': False,
                    'reason': f'Missing confirmations: {missing_confirmations}',
                    'trend': trend_analysis['trend'],
                    'confidence': trend_analysis['confidence'],
                    'confirmations': confirmations
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if trend_analysis['confidence'] < config['min_confidence']:
                return {
                    'proceed': False,
                    'reason': f'Hourly confidence too low: {trend_analysis["confidence"]:.2f} < {config["min_confidence"]}',
                    'trend': trend_analysis['trend'],
                    'confidence': trend_analysis['confidence'],
                    'confirmations': confirmations
                }
            
            return {
                'proceed': True,
                'reason': 'Hourly trend confirmed',
                'trend': trend_analysis['trend'],
                'confidence': trend_analysis['confidence'],
                'confirmations': confirmations,
                'support_level': trend_analysis['support_level'],
                'resistance_level': trend_analysis['resistance_level'],
                'volume_trend': trend_analysis['volume_trend']
            }
            
        except Exception as e:
            logger.error(f"Error in stage 1h analysis for {symbol}: {e}")
            return {
                'proceed': False,
                'reason': f'Stage 1h error: {str(e)}',
                'trend': None,
                'confidence': 0.0
            }
    
    async def _analyze_stage_1m(self, symbol: str, stage1_result: Dict[str, Any], stage2_result: Dict[str, Any]) -> Dict[str, Any]:
        """–≠—Ç–∞–ø 3: –ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º FIGI –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            figi = self.multi_analyzer.get_figi_for_symbol(symbol)
            if not figi:
                return {
                    'proceed': False,
                    'reason': f'No FIGI mapping found for symbol {symbol}',
                    'entry_price': 0.0,
                    'confidence': 0.0
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã data_1min
            minute_data = self._get_data_from_db(symbol, '1m')
            
            if minute_data.empty:
                return {
                    'proceed': False,
                    'reason': 'No minute data available',
                    'entry_price': 0.0,
                    'confidence': 0.0
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
            entry_analysis = self._analyze_minute_entry(minute_data, stage1_result['signal'], stage2_result)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞
            config = self.stage_configs['1m']
            required_confirmations = config['required_confirmations']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            has_entry_point = entry_analysis['entry_price'] > 0
            has_good_risk_reward = entry_analysis['risk_reward'] >= 2.0
            
            confirmations = {
                'entry_point': has_entry_point,
                'risk_reward': has_good_risk_reward
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            missing_confirmations = [conf for conf in required_confirmations if not confirmations.get(conf, False)]
            
            if missing_confirmations:
                return {
                    'proceed': False,
                    'reason': f'Missing confirmations: {missing_confirmations}',
                    'entry_price': entry_analysis['entry_price'],
                    'confidence': entry_analysis['confidence'],
                    'confirmations': confirmations
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if entry_analysis['confidence'] < config['min_confidence']:
                return {
                    'proceed': False,
                    'reason': f'Minute confidence too low: {entry_analysis["confidence"]:.2f} < {config["min_confidence"]}',
                    'entry_price': entry_analysis['entry_price'],
                    'confidence': entry_analysis['confidence'],
                    'confirmations': confirmations
                }
            
            return {
                'proceed': True,
                'reason': 'Minute entry point confirmed',
                'entry_price': entry_analysis['entry_price'],
                'stop_loss': entry_analysis['stop_loss'],
                'take_profit': entry_analysis['take_profit'],
                'risk_reward': entry_analysis['risk_reward'],
                'confidence': entry_analysis['confidence'],
                'confirmations': confirmations,
                'entry_reason': entry_analysis['entry_reason'],
                'volume_spike': entry_analysis['volume_spike']
            }
            
        except Exception as e:
            logger.error(f"Error in stage 1m analysis for {symbol}: {e}")
            return {
                'proceed': False,
                'reason': f'Stage 1m error: {str(e)}',
                'entry_price': 0.0,
                'confidence': 0.0
            }
    
    async def _analyze_stage_1s(self, symbol: str, stage1_result: Dict[str, Any], stage2_result: Dict[str, Any], stage3_result: Dict[str, Any]) -> Dict[str, Any]:
        """–≠—Ç–∞–ø 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ–∫—É–Ω–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º FIGI –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            figi = self.multi_analyzer.get_figi_for_symbol(symbol)
            if not figi:
                return {
                    'proceed': False,
                    'reason': f'No FIGI mapping found for symbol {symbol}',
                    'entry_price': stage3_result['entry_price'],
                    'confidence': 0.0
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—É–Ω–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã data_1sec
            second_data = self._get_data_from_db(symbol, '1s')
            
            if second_data.empty:
                # –ï—Å–ª–∏ —Å–µ–∫—É–Ω–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                return {
                    'proceed': True,
                    'reason': 'Second data not available, using minute data',
                    'entry_price': stage3_result['entry_price'],
                    'confidence': stage3_result['confidence'] * 0.9,  # –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    'execution_quality': 'MEDIUM',
                    'timing_score': 0.7,
                    'bid_ask_spread': 0.0
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–∫—Ä–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            micro_analysis = self._analyze_second_optimization(second_data, stage3_result)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞
            config = self.stage_configs['1s']
            required_confirmations = config['required_confirmations']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            has_good_execution = micro_analysis['execution_quality'] in ['HIGH', 'MEDIUM']
            
            confirmations = {
                'execution_quality': has_good_execution
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            missing_confirmations = [conf for conf in required_confirmations if not confirmations.get(conf, False)]
            
            if missing_confirmations:
                return {
                    'proceed': False,
                    'reason': f'Missing confirmations: {missing_confirmations}',
                    'entry_price': micro_analysis['entry_price'],
                    'confidence': micro_analysis['confidence'],
                    'confirmations': confirmations
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if micro_analysis['confidence'] < config['min_confidence']:
                return {
                    'proceed': False,
                    'reason': f'Second confidence too low: {micro_analysis["confidence"]:.2f} < {config["min_confidence"]}',
                    'entry_price': micro_analysis['entry_price'],
                    'confidence': micro_analysis['confidence'],
                    'confirmations': confirmations
                }
            
            return {
                'proceed': True,
                'reason': 'Second optimization completed',
                'entry_price': micro_analysis['entry_price'],
                'confidence': micro_analysis['confidence'],
                'confirmations': confirmations,
                'execution_quality': micro_analysis['execution_quality'],
                'timing_score': micro_analysis['timing_score'],
                'bid_ask_spread': micro_analysis['bid_ask_spread']
            }
            
        except Exception as e:
            logger.error(f"Error in stage 1s analysis for {symbol}: {e}")
            return {
                'proceed': False,
                'reason': f'Stage 1s error: {str(e)}',
                'entry_price': stage3_result['entry_price'],
                'confidence': 0.0
            }
    
    def _analyze_hourly_trend(self, hourly_data: pd.DataFrame, daily_signal: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            if len(hourly_data) < 24:  # –ú–∏–Ω–∏–º—É–º 24 —á–∞—Å–∞
                return {
                    'trend': 'UNKNOWN',
                    'trend_aligned': False,
                    'confidence': 0.0,
                    'volume_confirmation': False,
                    'support_level': 0.0,
                    'resistance_level': 0.0,
                    'volume_trend': 'UNKNOWN'
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
            recent_data = hourly_data.tail(24)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –ø–æ —Å–∫–æ–ª—å–∑—è—â–∏–º —Å—Ä–µ–¥–Ω–∏–º
            recent_data['MA_8'] = recent_data['close'].rolling(window=8, min_periods=1).mean()
            recent_data['MA_24'] = recent_data['close'].rolling(window=24, min_periods=1).mean()
            
            current_price = recent_data['close'].iloc[-1]
            ma_8 = recent_data['MA_8'].iloc[-1]
            ma_24 = recent_data['MA_24'].iloc[-1]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
            if ma_8 > ma_24 and current_price > ma_8:
                trend = 'UP'
            elif ma_8 < ma_24 and current_price < ma_8:
                trend = 'DOWN'
            else:
                trend = 'SIDEWAYS'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å –¥–Ω–µ–≤–Ω—ã–º —Å–∏–≥–Ω–∞–ª–æ–º
            if daily_signal == 'BUY' and trend in ['UP', 'SIDEWAYS']:
                trend_aligned = True
            elif daily_signal == 'SELL' and trend in ['DOWN', 'SIDEWAYS']:
                trend_aligned = True
            else:
                trend_aligned = False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º
            avg_volume = recent_data['volume'].mean()
            recent_volume = recent_data['volume'].tail(4).mean()  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞
            volume_spike = recent_volume > avg_volume * 1.2
            
            volume_confirmation = volume_spike if trend_aligned else False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            support_level = recent_data['low'].min()
            resistance_level = recent_data['high'].max()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –æ–±—ä–µ–º–∞
            volume_trend = 'INCREASING' if recent_volume > avg_volume else 'DECREASING'
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = 0.5
            if trend_aligned:
                confidence += 0.2
            if volume_confirmation:
                confidence += 0.2
            if abs(current_price - ma_8) / ma_8 < 0.02:  # –ë–ª–∏–∑–∫–æ –∫ MA
                confidence += 0.1
            
            return {
                'trend': trend,
                'trend_aligned': trend_aligned,
                'confidence': min(0.9, confidence),
                'volume_confirmation': volume_confirmation,
                'support_level': support_level,
                'resistance_level': resistance_level,
                'volume_trend': volume_trend
            }
            
        except Exception as e:
            logger.error(f"Error analyzing hourly trend: {e}")
            return {
                'trend': 'UNKNOWN',
                'trend_aligned': False,
                'confidence': 0.0,
                'volume_confirmation': False,
                'support_level': 0.0,
                'resistance_level': 0.0,
                'volume_trend': 'UNKNOWN'
            }
    
    def _analyze_minute_entry(self, minute_data: pd.DataFrame, daily_signal: str, hourly_result: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –Ω–∞ –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            if len(minute_data) < 60:  # –ú–∏–Ω–∏–º—É–º 1 —á–∞—Å –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                return {
                    'entry_price': 0.0,
                    'stop_loss': 0.0,
                    'take_profit': 0.0,
                    'risk_reward': 0.0,
                    'confidence': 0.0,
                    'entry_reason': 'INSUFFICIENT_DATA',
                    'volume_spike': False
                }
            
            recent_data = minute_data.tail(60)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            
            current_price = recent_data['close'].iloc[-1]
            support_level = hourly_result.get('support_level', recent_data['low'].min())
            resistance_level = hourly_result.get('resistance_level', recent_data['high'].max())
            
            # –ò—â–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–≥–Ω–∞–ª–∞
            if daily_signal == 'BUY':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—â–µ–º –æ—Ç—Å–∫–æ–∫ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                if current_price <= support_level * 1.01:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 1% –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                    entry_price = support_level
                    entry_reason = 'SUPPORT_BOUNCE'
                    stop_loss = support_level * 0.98  # 2% –Ω–∏–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                    take_profit = resistance_level
                elif current_price >= resistance_level * 0.99:  # –ü—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                    entry_price = resistance_level
                    entry_reason = 'BREAKOUT'
                    stop_loss = support_level
                    take_profit = resistance_level * 1.05  # 5% –≤—ã—à–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                else:
                    entry_price = current_price
                    entry_reason = 'CURRENT_PRICE'
                    stop_loss = support_level
                    take_profit = resistance_level
            else:  # SELL
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏—â–µ–º –æ—Ç—Å–∫–æ–∫ –æ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                if current_price >= resistance_level * 0.99:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 1% –æ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                    entry_price = resistance_level
                    entry_reason = 'RESISTANCE_REJECTION'
                    stop_loss = resistance_level * 1.02  # 2% –≤—ã—à–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                    take_profit = support_level
                elif current_price <= support_level * 1.01:  # –ü—Ä–æ–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                    entry_price = support_level
                    entry_reason = 'BREAKDOWN'
                    stop_loss = resistance_level
                    take_profit = support_level * 0.95  # 5% –Ω–∏–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                else:
                    entry_price = current_price
                    entry_reason = 'CURRENT_PRICE'
                    stop_loss = resistance_level
                    take_profit = support_level
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            if daily_signal == 'BUY':
                risk = abs(entry_price - stop_loss)
                reward = abs(take_profit - entry_price)
            else:  # SELL
                risk = abs(stop_loss - entry_price)
                reward = abs(entry_price - take_profit)
            
            risk_reward = reward / risk if risk > 0 else 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
            avg_volume = recent_data['volume'].mean()
            recent_volume = recent_data['volume'].tail(10).mean()  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
            volume_spike = recent_volume > avg_volume * 1.5
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = 0.4
            if risk_reward >= 2.0:
                confidence += 0.3
            if volume_spike:
                confidence += 0.2
            if entry_reason in ['SUPPORT_BOUNCE', 'RESISTANCE_REJECTION']:
                confidence += 0.1
            
            return {
                'entry_price': entry_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'risk_reward': risk_reward,
                'confidence': min(0.9, confidence),
                'entry_reason': entry_reason,
                'volume_spike': volume_spike
            }
            
        except Exception as e:
            logger.error(f"Error analyzing minute entry: {e}")
            return {
                'entry_price': 0.0,
                'stop_loss': 0.0,
                'take_profit': 0.0,
                'risk_reward': 0.0,
                'confidence': 0.0,
                'entry_reason': 'ERROR',
                'volume_spike': False
            }
    
    def _analyze_second_optimization(self, second_data: pd.DataFrame, minute_result: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –º–∏–∫—Ä–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ–∫—É–Ω–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            if len(second_data) < 60:  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ —Å–µ–∫—É–Ω–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                return {
                    'entry_price': minute_result['entry_price'],
                    'confidence': 0.3,
                    'execution_quality': 'LOW',
                    'timing_score': 0.3,
                    'bid_ask_spread': 0.0
                }
            
            recent_data = second_data.tail(60)  # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞
            
            base_entry = minute_result['entry_price']
            current_price = recent_data['close'].iloc[-1]
            
            # –ò—â–µ–º –ª—É—á—à—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0.5% –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
            price_range = base_entry * 0.005  # 0.5%
            min_price = base_entry - price_range
            max_price = base_entry + price_range
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if min_price <= current_price <= max_price:
                entry_price = current_price
                execution_quality = 'HIGH'
                timing_score = 0.8
            else:
                # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–Ω—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                if current_price < min_price:
                    entry_price = min_price
                else:
                    entry_price = max_price
                execution_quality = 'MEDIUM'
                timing_score = 0.6
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º bid/ask spread (–æ–±—ã—á–Ω–æ 0.1-0.5% –¥–ª—è –∞–∫—Ü–∏–π)
            bid_ask_spread = base_entry * 0.002  # 0.2%
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = 0.3
            if execution_quality == 'HIGH':
                confidence += 0.3
            elif execution_quality == 'MEDIUM':
                confidence += 0.2
            
            return {
                'entry_price': entry_price,
                'confidence': confidence,
                'execution_quality': execution_quality,
                'timing_score': timing_score,
                'bid_ask_spread': bid_ask_spread
            }
            
        except Exception as e:
            logger.error(f"Error analyzing second optimization: {e}")
            return {
                'entry_price': minute_result['entry_price'],
                'confidence': 0.3,
                'execution_quality': 'LOW',
                'timing_score': 0.3,
                'bid_ask_spread': 0.0
            }
    
    def _calculate_final_confidence(self, stage1: Dict[str, Any], stage2: Dict[str, Any], stage3: Dict[str, Any], stage4: Dict[str, Any]) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤."""
        try:
            # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —ç—Ç–∞–ø–∞–º
            weights = {
                '1d': 0.4,  # ML —Å–∏–≥–Ω–∞–ª—ã - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π
                '1h': 0.3,  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
                '1m': 0.2,  # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
                '1s': 0.1   # –ú–∏–∫—Ä–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            }
            
            weighted_confidence = (
                stage1.get('confidence', 0.0) * weights['1d'] +
                stage2.get('confidence', 0.0) * weights['1h'] +
                stage3.get('confidence', 0.0) * weights['1m'] +
                stage4.get('confidence', 0.0) * weights['1s']
            )
            
            return min(0.95, max(0.0, weighted_confidence))
            
        except Exception as e:
            logger.error(f"Error calculating final confidence: {e}")
            return 0.0
    
    def _is_trading_hours(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã."""
        try:
            now = datetime.now()
            current_hour = now.hour
            start_hour = self.auto_trade_config['trading_hours']['start']
            end_hour = self.auto_trade_config['trading_hours']['end']
            
            return start_hour <= current_hour <= end_hour
        except Exception:
            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
    
    async def analyze_multiple_symbols(self, symbols: List[str]) -> List[CascadeSignalResult]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        results = []
        
        for symbol in symbols:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                initial_ml_result = self.initial_ml_cache.get(symbol, {})
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                result = await self.analyze_symbol_cascade(symbol, initial_ml_result)
                results.append(result)
            except Exception as e:
                logger.error(f"Error analyzing symbol {symbol}: {e}")
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
                error_result = CascadeSignalResult()
                error_result.symbol = symbol
                error_result.rejected_at_stage = 'error'
                error_result.rejection_reason = str(e)
                results.append(error_result)
        
        return results
    
    def get_successful_signals(self, results: List[CascadeSignalResult]) -> List[CascadeSignalResult]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã."""
        return [result for result in results if result.final_signal is not None]
    
    def get_rejected_signals(self, results: List[CascadeSignalResult]) -> List[CascadeSignalResult]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã."""
        return [result for result in results if result.final_signal is None]
    
    async def execute_auto_trade(self, result: CascadeSignalResult, conn) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–¥–µ–ª–∫—É –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ."""
        try:
            if not result.auto_trade_enabled or not self.demo_trading:
                return {'success': False, 'reason': 'Auto trading not enabled or demo trading not available'}
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            account_snapshot = self.demo_trading.get_account_snapshot(conn)
            balance = account_snapshot.get('balance', 0)
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            max_position_value = min(
                self.auto_trade_config['max_position_size'],
                balance * self.auto_trade_config['risk_per_trade']
            )
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
            quantity = int(max_position_value / result.entry_price)
            
            if quantity <= 0:
                return {'success': False, 'reason': 'Insufficient balance for trade'}
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É
            trade_result = self.demo_trading.place_trade(
                conn, 
                result.symbol, 
                result.final_signal, 
                quantity, 
                result.entry_price
            )
            
            if trade_result.status == "success":
                logger.info(f"Auto trade executed: {result.symbol} {result.final_signal} {quantity} @ {result.entry_price}")
                return {
                    'success': True,
                    'symbol': result.symbol,
                    'side': result.final_signal,
                    'quantity': quantity,
                    'price': result.entry_price,
                    'balance': trade_result.balance
                }
            else:
                return {'success': False, 'reason': trade_result.message}
                
        except Exception as e:
            logger.error(f"Error executing auto trade for {result.symbol}: {e}")
            return {'success': False, 'reason': str(e)}
    
    def update_auto_trade_config(self, config_updates: Dict[str, Any]):
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏."""
        self.auto_trade_config.update(config_updates)
        logger.info(f"Auto trade config updated: {config_updates}")
    
    def get_auto_trade_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏."""
        return {
            'enabled': self.auto_trade_config['enabled'],
            'min_confidence': self.auto_trade_config['min_confidence'],
            'max_position_size': self.auto_trade_config['max_position_size'],
            'risk_per_trade': self.auto_trade_config['risk_per_trade'],
            'max_daily_trades': self.auto_trade_config['max_daily_trades'],
            'trading_hours': self.auto_trade_config['trading_hours'],
            'is_trading_hours': self._is_trading_hours()
        }
    
    def _get_data_from_db(self, symbol: str, timeframe: str) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞."""
        try:
            print(f"üîç [GET_DATA] –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} ({timeframe})...")
            from core.database import get_connection
            from core.multi_timeframe_db import get_timeframe_data
            
            print(f"üîç [GET_DATA] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            conn = get_connection()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            if timeframe in ['1h', '1m', '5m', '15m', '1s', 'tick']:
                data = get_timeframe_data(conn, symbol, timeframe, limit=1000)
                if not data.empty:
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    data = data.rename(columns={'datetime': 'time'})
                    print(f"‚úÖ [GET_DATA] {symbol} ({timeframe}): –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")
                    conn.close()
                    return data
                else:
                    print(f"‚ö†Ô∏è [GET_DATA] {symbol} ({timeframe}): –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
            
            # –î–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ data_1d –∏–ª–∏ daily_data
            if timeframe == '1d':
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º data_1d
                try:
                    data = get_timeframe_data(conn, symbol, '1d', limit=365)
                    if not data.empty:
                        data = data.rename(columns={'datetime': 'time'})
                        conn.close()
                        return data
                except Exception:
                    pass
                
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º daily_data —á–µ—Ä–µ–∑ StockAnalyzer
                if self.multi_analyzer.base_analyzer:
                    figi = self.multi_analyzer.get_figi_for_symbol(symbol)
                    if figi:
                        data = self.multi_analyzer.base_analyzer.get_stock_data(figi)
                        conn.close()
                        return data
                
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ data_1d –Ω–∞–ø—Ä—è–º—É—é
                try:
                    print(f"üîç [GET_DATA] {symbol} ({timeframe}): –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ data_1d –Ω–∞–ø—Ä—è–º—É—é...")
                    cursor = conn.cursor()
                    cursor.execute("""
                        SELECT datetime as time, open, high, low, close, volume
                        FROM data_1d
                        WHERE symbol = ?
                        ORDER BY datetime DESC
                        LIMIT 365
                    """, (symbol,))
                    
                    rows = cursor.fetchall()
                    if rows:
                        data = pd.DataFrame(rows, columns=['time', 'open', 'high', 'low', 'close', 'volume'])
                        data['time'] = pd.to_datetime(data['time'])
                        print(f"‚úÖ [GET_DATA] {symbol} ({timeframe}): –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ data_1d")
                        conn.close()
                        return data
                    else:
                        print(f"‚ö†Ô∏è [GET_DATA] {symbol} ({timeframe}): data_1d –ø—É—Å—Ç–∞")
                except Exception:
                    pass
                
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ daily_data –Ω–∞–ø—Ä—è–º—É—é
                try:
                    cursor = conn.cursor()
                    cursor.execute("""
                        SELECT dd.date as time, dd.open, dd.high, dd.low, dd.close, dd.volume
                        FROM daily_data dd
                        JOIN companies c ON dd.company_id = c.id
                        WHERE c.contract_code = ?
                        ORDER BY dd.date DESC
                        LIMIT 365
                    """, (symbol,))
                    
                    rows = cursor.fetchall()
                    if rows:
                        data = pd.DataFrame(rows, columns=['time', 'open', 'high', 'low', 'close', 'volume'])
                        data['time'] = pd.to_datetime(data['time'])
                        conn.close()
                        return data
                except Exception:
                    pass
            
            print(f"‚ùå [GET_DATA] {symbol} ({timeframe}): –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã")
            conn.close()
            return pd.DataFrame(columns=["time", "open", "close", "high", "low", "volume"])
            
        except Exception as e:
            print(f"‚ùå [GET_DATA] {symbol} ({timeframe}): –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - {e}")
            logger.error(f"Error getting {timeframe} data for {symbol} from DB: {e}")
            return pd.DataFrame(columns=["time", "open", "close", "high", "low", "volume"])
    
    def get_available_symbols_with_1d_data(self, min_volume: float = 10000000, min_avg_volume: float = 5000000) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ 1d –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –¥–µ–Ω–µ–∂–Ω—ã–º –æ–±—ä–µ–º–æ–º —Ç–æ—Ä–≥–æ–≤.
        
        Args:
            min_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å (RUB)
            min_avg_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (RUB)
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        """
        try:
            print("üîç [GET_SYMBOLS] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ 1d –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –æ–±—ä–µ–º—É...")
            print(f"üìä [GET_SYMBOLS] –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∑–∞ –¥–µ–Ω—å: {min_volume:,.0f}")
            print(f"üìä [GET_SYMBOLS] –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ 30 –¥–Ω–µ–π: {min_avg_volume:,.0f}")
            
            from core.database import get_connection
            
            print("üîç [GET_SYMBOLS] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            conn = get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –¥–µ–Ω–µ–∂–Ω—ã–º –æ–±—ä–µ–º–æ–º —Ç–æ—Ä–≥–æ–≤ (volume * close)
            print("üîç [GET_SYMBOLS] –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–µ–Ω–µ–∂–Ω–æ–º—É –æ–±—ä–µ–º—É...")
            cursor.execute("""
                SELECT 
                    symbol,
                    COUNT(*) as data_count,
                    AVG(volume * close) as avg_money_volume,
                    MAX(volume * close) as max_money_volume,
                    (SELECT volume * close FROM data_1d d2 
                     WHERE d2.symbol = data_1d.symbol 
                     ORDER BY d2.datetime DESC LIMIT 1) as last_money_volume
                FROM data_1d
                WHERE datetime >= date(
                    (SELECT MAX(datetime) FROM data_1d), '-30 days'
                )
                GROUP BY symbol
                HAVING data_count >= 10
                ORDER BY avg_money_volume DESC
            """)
            
            print("üîç [GET_SYMBOLS] –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞...")
            results = cursor.fetchall()
            print(f"üìä [GET_SYMBOLS] SQL –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª {len(results)} —Å—Ç—Ä–æ–∫")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–µ–Ω–µ–∂–Ω–æ–º—É –æ–±—ä–µ–º—É
            filtered_symbols = []
            volume_stats = []
            
            for row in results:
                symbol, data_count, avg_money_volume, max_money_volume, last_money_volume = row
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–µ–Ω–µ–∂–Ω–æ–º—É –æ–±—ä–µ–º—É
                if (last_money_volume >= min_volume and 
                    avg_money_volume >= min_avg_volume):
                    filtered_symbols.append(symbol)
                    volume_stats.append({
                        'symbol': symbol,
                        'data_count': data_count,
                        'avg_money_volume': avg_money_volume,
                        'max_money_volume': max_money_volume,
                        'last_money_volume': last_money_volume
                    })
                else:
                    print(f"  ‚ùå {symbol}: –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º {last_money_volume:,.0f} RUB (—Å—Ä–µ–¥–Ω–∏–π: {avg_money_volume:,.0f} RUB) - –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä")
            
            print(f"üìà [GET_SYMBOLS] –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(results)} —Å–∏–º–≤–æ–ª–æ–≤, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_symbols)}")
            
            if filtered_symbols:
                print(f"üìã [GET_SYMBOLS] –ü–µ—Ä–≤—ã–µ 5 –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {filtered_symbols[:5]}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–µ–Ω–µ–∂–Ω–æ–º—É –æ–±—ä–µ–º—É
                if volume_stats:
                    top_volume = max(volume_stats, key=lambda x: x['avg_money_volume'])
                    print(f"üìä [GET_SYMBOLS] –¢–æ–ø –ø–æ –¥–µ–Ω–µ–∂–Ω–æ–º—É –æ–±—ä–µ–º—É: {top_volume['symbol']} (—Å—Ä–µ–¥–Ω–∏–π: {top_volume['avg_money_volume']:,.0f} RUB)")
            else:
                print("‚ö†Ô∏è [GET_SYMBOLS] –ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –æ–±—ä–µ–º—É!")
            
            conn.close()
            print("‚úÖ [GET_SYMBOLS] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
            
            return filtered_symbols
            
        except Exception as e:
            logger.error(f"Error getting available symbols: {e}")
            return []
    
    async def analyze_all_available_symbols(self, min_volume: float = 10000000, 
                                          min_avg_volume: float = 5000000,
                                          use_db_cache: bool = True) -> List[CascadeSignalResult]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
        
        Args:
            min_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º –∑–∞ –¥–µ–Ω—å (RUB)
            min_avg_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º –∑–∞ 30 –¥–Ω–µ–π (RUB)
            use_db_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ë–î –∫—ç—à –¥–ª—è ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Workflow:
        1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ 1d
        2. –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        3. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏
        
        Returns:
            List[CascadeSignalResult]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            print("üîç [CASCADE_CORE] –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
            print(f"üîç [CASCADE_CORE] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: min_volume={min_volume}, min_avg_volume={min_avg_volume}")
            print(f"üîç [CASCADE_CORE] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ë–î –∫—ç—à–∞: {use_db_cache}")
            logger.info("Starting automatic cascade analysis for all available symbols")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ 1d –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –æ–±—ä–µ–º—É
            print("üìä [CASCADE_CORE] –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ 1d –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –æ–±—ä–µ–º—É...")
            print("üîç [CASCADE_CORE] –í—ã–∑—ã–≤–∞–µ–º get_available_symbols_with_1d_data() —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π...")
            available_symbols = self.get_available_symbols_with_1d_data(min_volume=min_volume, min_avg_volume=min_avg_volume)
            print(f"üìà [CASCADE_CORE] get_available_symbols_with_1d_data() –≤–µ—Ä–Ω—É–ª {len(available_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            print(f"üìã [CASCADE_CORE] –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(available_symbols)}")
            if available_symbols:
                print(f"üìã [CASCADE_CORE] –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤: {available_symbols[:5]}")
            else:
                print("‚ö†Ô∏è [CASCADE_CORE] available_symbols –ø—É—Å—Ç–æ–π!")
            
            if not available_symbols:
                print("‚ö†Ô∏è [CASCADE_CORE] –ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ 1d")
                logger.warning("No symbols with 1d data available")
                return []
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
            if len(available_symbols) <= 10:
                print(f"üìã [CASCADE_CORE] –°–∏–º–≤–æ–ª—ã: {', '.join(available_symbols)}")
            else:
                print(f"üìã [CASCADE_CORE] –°–∏–º–≤–æ–ª—ã (–ø–µ—Ä–≤—ã–µ 10): {', '.join(available_symbols[:10])} ... –∏ –µ—â–µ {len(available_symbols) - 10}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
            print("ü§ñ [CASCADE_CORE] –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ML –∞–Ω–∞–ª–∏–∑...")
            logger.info("Performing initial ML analysis...")
            initial_ml_results = await self.perform_initial_ml_analysis(
                symbols=available_symbols,
                min_volume=min_volume,
                min_avg_volume=min_avg_volume,
                use_db_cache=use_db_cache
            )
            print(f"‚úÖ [CASCADE_CORE] ML –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {len(initial_ml_results)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏
            print("üîç [CASCADE_CORE] –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏...")
            strong_signal_symbols = []
            for symbol, ml_result in initial_ml_results.items():
                ensemble_signal = ml_result.get('ml_ensemble_signal', 'HOLD')
                confidence = ml_result.get('ml_price_confidence', 0.0)
                
                print(f"  üìä {symbol}: {ensemble_signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–≥–Ω–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                if (ensemble_signal in ['BUY', 'STRONG_BUY', 'SELL', 'STRONG_SELL'] and 
                    confidence >= 0.5):
                    strong_signal_symbols.append(symbol)
                    print(f"  ‚úÖ {symbol} - —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                else:
                    print(f"  ‚ùå {symbol} - —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
            print(f"üéØ [CASCADE_CORE] –ù–∞–π–¥–µ–Ω–æ {len(strong_signal_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏")
            logger.info(f"Found {len(strong_signal_symbols)} symbols with strong ML signals")
            
            if not strong_signal_symbols:
                print("‚ö†Ô∏è [CASCADE_CORE] –ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏")
                logger.warning("No symbols with strong ML signals found")
                return []
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            print(f"üöÄ [CASCADE_CORE] –°–∏–º–≤–æ–ª—ã –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {', '.join(strong_signal_symbols)}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
            print("‚ö° [CASCADE_CORE] –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
            logger.info("Starting cascade analysis for strong signal symbols...")
            results = []
            
            for i, symbol in enumerate(strong_signal_symbols):
                print(f"üîÑ [CASCADE_CORE] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {symbol} ({i+1}/{len(strong_signal_symbols)})...")
                try:
                    initial_ml_result = initial_ml_results[symbol]
                    result = await self.analyze_symbol_cascade(symbol, initial_ml_result)
                    results.append(result)
                    
                    if result.final_signal:
                        print(f"  ‚úÖ {symbol}: {result.final_signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%})")
                    else:
                        print(f"  ‚ùå {symbol}: –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ {result.rejected_at_stage} - {result.rejection_reason}")
                        
                except Exception as e:
                    print(f"  üí• {symbol}: –æ—à–∏–±–∫–∞ - {e}")
                    logger.error(f"Error in cascade analysis for {symbol}: {e}")
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
                    error_result = CascadeSignalResult()
                    error_result.symbol = symbol
                    error_result.rejected_at_stage = 'error'
                    error_result.rejection_reason = str(e)
                    results.append(error_result)
            
            successful_count = len([r for r in results if r.final_signal])
            rejected_count = len([r for r in results if not r.final_signal])
            
            print(f"üéâ [CASCADE_CORE] –ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"  üìä –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(results)}")
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {successful_count}")
            print(f"  ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {rejected_count}")
            
            logger.info(f"Cascade analysis completed for {len(results)} symbols")
            return results
            
        except Exception as e:
            print(f"üí• [CASCADE_CORE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.error(f"Error in automatic cascade analysis: {e}")
            return []

    async def get_analysis_status(self, min_volume: float = 10000000, min_avg_volume: float = 5000000) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, 
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏ –∏ —Ç.–¥.
        
        Args:
            min_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å (RUB)
            min_avg_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (RUB)
        
        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            available_symbols = self.get_available_symbols_with_1d_data(min_volume, min_avg_volume)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            ml_results = self.initial_ml_cache
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å —Å–∏–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
            strong_signal_count = 0
            for symbol, ml_result in ml_results.items():
                ensemble_signal = ml_result.get('ml_ensemble_signal', 'HOLD')
                confidence = ml_result.get('ml_price_confidence', 0.0)
                
                if (ensemble_signal in ['BUY', 'STRONG_BUY', 'SELL', 'STRONG_SELL'] and 
                    confidence >= 0.5):
                    strong_signal_count += 1
            
            return {
                'total_symbols_with_1d_data': len(available_symbols),
                'symbols_with_ml_results': len(ml_results),
                'symbols_with_strong_signals': strong_signal_count,
                'ml_analysis_completed': len(ml_results) > 0,
                'ready_for_cascade': strong_signal_count > 0,
                'filter_min_volume': min_volume,
                'filter_min_avg_volume': min_avg_volume
            }
            
        except Exception as e:
            logger.error(f"Error getting analysis status: {e}")
            return {
                'total_symbols_with_1d_data': 0,
                'symbols_with_ml_results': 0,
                'symbols_with_strong_signals': 0,
                'ml_analysis_completed': False,
                'ready_for_cascade': False,
                'filter_min_volume': min_volume,
                'filter_min_avg_volume': min_avg_volume,
                'error': str(e)
            }

    def estimate_ml_analysis_time(self, symbols_count: int) -> Dict[str, Any]:
        """
        –û—Ü–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ML –∞–Ω–∞–ª–∏–∑–∞.
        
        Args:
            symbols_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            Dict[str, Any]: –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        try:
            # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–∏–º–≤–æ–ª (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
            base_time_per_symbol = 2.0  # 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–∏–º–≤–æ–ª
            
            # –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML –º–æ–¥–µ–ª–µ–π
            initialization_time = 5.0
            
            # –û–±—â–µ–µ –≤—Ä–µ–º—è
            total_seconds = initialization_time + (symbols_count * base_time_per_symbol)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
            minutes = int(total_seconds // 60)
            seconds = int(total_seconds % 60)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            if minutes > 0:
                time_str = f"{minutes}–º {seconds}—Å"
            else:
                time_str = f"{seconds}—Å"
            
            return {
                'total_seconds': total_seconds,
                'formatted_time': time_str,
                'symbols_count': symbols_count,
                'time_per_symbol': base_time_per_symbol,
                'initialization_time': initialization_time
            }
            
        except Exception as e:
            logger.error(f"Error estimating ML analysis time: {e}")
            return {
                'total_seconds': 0,
                'formatted_time': "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                'symbols_count': symbols_count,
                'time_per_symbol': 0,
                'initialization_time': 0
            }

    async def perform_initial_ml_analysis(self, symbols: List[str], 
                                        min_volume: float = 10000000, 
                                        min_avg_volume: float = 5000000,
                                        use_db_cache: bool = True) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—ã–π ML –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–∞–±–ª–∏—Ü–µ data_1d –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤.
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            min_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            min_avg_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            use_db_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ë–î –∫—ç—à –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ ML –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            print(f"ü§ñ [ML_ANALYSIS] –ù–∞—á–∏–Ω–∞–µ–º ML –∞–Ω–∞–ª–∏–∑ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
            print(f"üîç [ML_ANALYSIS] –¢–∏–ø symbols: {type(symbols)}")
            print(f"üîç [ML_ANALYSIS] –î–ª–∏–Ω–∞ symbols: {len(symbols) if symbols else 'None'}")
            if symbols:
                print(f"üîç [ML_ANALYSIS] –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤: {symbols[:5]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –∫—ç—à –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if use_db_cache:
                print(f"üîç [ML_ANALYSIS] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –∫—ç—à...")
                cached_data = cascade_ml_cache.get_ml_results(symbols, min_volume, min_avg_volume)
                if cached_data:
                    print(f"‚úÖ [ML_ANALYSIS] –ù–∞–π–¥–µ–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {cached_data['results_count']} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"üìÖ [ML_ANALYSIS] –ö—ç—à —Å–æ–∑–¥–∞–Ω: {cached_data.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    return cached_data['ml_results']
                else:
                    print(f"üîç [ML_ANALYSIS] –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            
            if not self.ml_manager:
                print("‚ö†Ô∏è [ML_ANALYSIS] ML –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º")
                logger.warning("ML manager not available for initial analysis")
                return {}
            
            print(f"‚úÖ [ML_ANALYSIS] ML –º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {type(self.ml_manager)}")
            
            from core.ml.signals import MLSignalGenerator
            signal_generator = MLSignalGenerator(self.ml_manager)
            
            ml_results = {}
            successful_count = 0
            failed_count = 0
            
            for i, symbol in enumerate(symbols):
                print(f"üîÑ [ML_ANALYSIS] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {symbol} ({i+1}/{len(symbols)})...")
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ML —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                    signals = await signal_generator.generate_ml_signals(symbol)
                    if 'error' not in signals:
                        ml_results[symbol] = signals
                        successful_count += 1
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ML –∞–Ω–∞–ª–∏–∑–∞
                        ensemble_signal = signals.get('ml_ensemble_signal', 'HOLD')
                        confidence = signals.get('ml_price_confidence', 0.0)
                        print(f"  ‚úÖ {symbol}: {ensemble_signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})")
                        
                        logger.info(f"ML analysis completed for {symbol}")
                    else:
                        failed_count += 1
                        error_msg = signals.get('error', 'Unknown error')
                        print(f"  ‚ùå {symbol}: –û—à–∏–±–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞ - {error_msg}")
                        logger.warning(f"ML analysis failed for {symbol}: {error_msg}")
                except Exception as e:
                    failed_count += 1
                    print(f"  üí• {symbol}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ ML –∞–Ω–∞–ª–∏–∑–∞ - {e}")
                    logger.warning(f"ML analysis error for {symbol}: {e}")
                    continue
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"üíæ [ML_ANALYSIS] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à...")
            print(f"üíæ [ML_ANALYSIS] –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(ml_results)}")
            print(f"üíæ [ML_ANALYSIS] –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(self.initial_ml_cache)}")
            
            self.initial_ml_cache = ml_results
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫—ç—à –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if use_db_cache and ml_results:
                print(f"üíæ [ML_ANALYSIS] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î –∫—ç—à...")
                cache_saved = cascade_ml_cache.save_ml_results(
                    symbols=symbols,
                    ml_results=ml_results,
                    min_volume=min_volume,
                    min_avg_volume=min_avg_volume,
                    expires_in_hours=6
                )
                if cache_saved:
                    print(f"‚úÖ [ML_ANALYSIS] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –∫—ç—à")
                else:
                    print(f"‚ö†Ô∏è [ML_ANALYSIS] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î –∫—ç—à")
            
            print(f"üíæ [ML_ANALYSIS] –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω!")
            print(f"üíæ [ML_ANALYSIS] –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(self.initial_ml_cache)}")
            print(f"üíæ [ML_ANALYSIS] –ö–ª—é—á–∏ –≤ –∫—ç—à–µ: {list(self.initial_ml_cache.keys())[:5]}{'...' if len(self.initial_ml_cache) > 5 else ''}")
            
            # –ò–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            cache_info = self.inspect_ml_cache()
            
            print(f"üéâ [ML_ANALYSIS] ML –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_count}")
            print(f"  ‚ùå –û—à–∏–±–æ–∫: {failed_count}")
            print(f"  üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(ml_results)}")
            print(f"  üéØ –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∫—ç—à–µ: {len(cache_info['strong_signals'])}")
            
            logger.info(f"Initial ML analysis completed for {len(ml_results)} symbols")
            return ml_results
            
        except Exception as e:
            print(f"üí• [ML_ANALYSIS] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞: {e}")
            logger.error(f"Error in initial ML analysis: {e}")
            return {}

    async def analyze_with_saved_ml_results(self, saved_ml_results: List[Dict[str, Any]], saved_symbols: List[str]) -> List[CascadeSignalResult]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        
        Args:
            saved_ml_results: –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            saved_symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            
        Returns:
            List[CascadeSignalResult]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            print(f"üîÑ [CASCADE_SAVED] –ù–∞—á–∏–Ω–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏...")
            print(f"üìä [CASCADE_SAVED] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(saved_ml_results)} ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            print(f"üìã [CASCADE_SAVED] –°–∏–º–≤–æ–ª—ã: {saved_symbols[:5] if saved_symbols else 'None'}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            ml_results_dict = {}
            for i, symbol in enumerate(saved_symbols):
                if i < len(saved_ml_results):
                    ml_results_dict[symbol] = saved_ml_results[i]
            
            print(f"üîç [CASCADE_SAVED] –°–æ–∑–¥–∞–Ω —Å–ª–æ–≤–∞—Ä—å —Å {len(ml_results_dict)} ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print(f"üíæ [CASCADE_SAVED] –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            print(f"üíæ [CASCADE_SAVED] –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(self.initial_ml_cache)}")
            print(f"üíæ [CASCADE_SAVED] –†–∞–∑–º–µ—Ä –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(ml_results_dict)}")
            
            self.initial_ml_cache = ml_results_dict
            print(f"üíæ [CASCADE_SAVED] –ö—ç—à ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            print(f"üíæ [CASCADE_SAVED] –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(self.initial_ml_cache)}")
            print(f"üíæ [CASCADE_SAVED] –ö–ª—é—á–∏ –≤ –∫—ç—à–µ: {list(self.initial_ml_cache.keys())[:5]}{'...' if len(self.initial_ml_cache) > 5 else ''}")
            
            # –ò–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            cache_info = self.inspect_ml_cache()
            print(f"üîç [CASCADE_SAVED] –ò–Ω—Å–ø–µ–∫—Ü–∏—è –∫—ç—à–∞: {cache_info['cache_size']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, {len(cache_info['strong_signals'])} —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏
            strong_signal_symbols = []
            for symbol, ml_result in ml_results_dict.items():
                ensemble_signal = ml_result.get('ml_ensemble_signal', 'HOLD')
                confidence = ml_result.get('ml_price_confidence', 0.0)
                
                print(f"  üìä {symbol}: {ensemble_signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–≥–Ω–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                if (ensemble_signal in ['BUY', 'STRONG_BUY', 'SELL', 'STRONG_SELL'] and 
                    confidence >= 0.5):
                    strong_signal_symbols.append(symbol)
                    print(f"  ‚úÖ {symbol} - —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                else:
                    print(f"  ‚ùå {symbol} - —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
            print(f"üéØ [CASCADE_SAVED] –ù–∞–π–¥–µ–Ω–æ {len(strong_signal_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏")
            
            if not strong_signal_symbols:
                print("‚ö†Ô∏è [CASCADE_SAVED] –ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ ML —Å–∏–≥–Ω–∞–ª–∞–º–∏")
                return []
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
            print("‚ö° [CASCADE_SAVED] –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
            results = []
            
            for i, symbol in enumerate(strong_signal_symbols):
                print(f"üîÑ [CASCADE_SAVED] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {symbol} ({i+1}/{len(strong_signal_symbols)})...")
                try:
                    initial_ml_result = ml_results_dict[symbol]
                    result = await self.analyze_symbol_cascade(symbol, initial_ml_result)
                    results.append(result)
                    
                    if result.final_signal:
                        print(f"  ‚úÖ {symbol}: {result.final_signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%})")
                    else:
                        print(f"  ‚ùå {symbol}: –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ {result.rejected_at_stage} - {result.rejection_reason}")
                        
                except Exception as e:
                    print(f"  üí• {symbol}: –æ—à–∏–±–∫–∞ - {e}")
                    logger.error(f"Error in cascade analysis for {symbol}: {e}")
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
                    error_result = CascadeSignalResult()
                    error_result.symbol = symbol
                    error_result.rejected_at_stage = 'error'
                    error_result.rejection_reason = str(e)
                    results.append(error_result)
            
            successful_count = len([r for r in results if r.final_signal])
            rejected_count = len([r for r in results if not r.final_signal])
            
            print(f"üéâ [CASCADE_SAVED] –ö–∞—Å–∫–∞–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"  üìä –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(results)}")
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {successful_count}")
            print(f"  ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {rejected_count}")
            
            return results
            
        except Exception as e:
            print(f"üí• [CASCADE_SAVED] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.error(f"Error in analyze_with_saved_ml_results: {e}")
            return []
