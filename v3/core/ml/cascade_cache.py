#!/usr/bin/env python3
"""
Cascade ML Cache Manager.

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ –¥–ª—è ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏.
"""

import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
import sqlite3
from pathlib import Path

from core.database import get_connection
from core.settings import get_settings

logger = logging.getLogger(__name__)


class CascadeMLCacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ –¥–ª—è ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    
    def __init__(self, db_path: Optional[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞.
        
        Args:
            db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        """
        self.settings = get_settings()
        self.db_path = db_path or str(self.settings.database_path)
        self.cache_duration = timedelta(hours=6)  # –ö—ç—à –Ω–∞ 6 —á–∞—Å–æ–≤
        self.cache_key_prefix = "cascade_ml_results"
        
    def _get_connection(self) -> sqlite3.Connection:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        return get_connection(self.db_path)
    
    def _generate_cache_key(self, symbols: List[str], min_volume: float, min_avg_volume: float) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
            min_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
            min_avg_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
            
        Returns:
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞
        """
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        sorted_symbols = sorted(symbols)
        symbols_hash = hash(tuple(sorted_symbols))
        
        return f"{self.cache_key_prefix}_{symbols_hash}_{min_volume}_{min_avg_volume}"
    
    def save_ml_results(self, symbols: List[str], ml_results: Dict[str, Any], 
                       min_volume: float, min_avg_volume: float,
                       expires_in_hours: int = 6) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à.
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            ml_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ML –∞–Ω–∞–ª–∏–∑–∞
            min_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            min_avg_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            expires_in_hours: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —á–∞—Å–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞
            cache_key = self._generate_cache_key(symbols, min_volume, min_avg_volume)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            cache_data = {
                'symbols': symbols,
                'ml_results': ml_results,
                'min_volume': min_volume,
                'min_avg_volume': min_avg_volume,
                'created_at': datetime.now().isoformat(),
                'symbols_count': len(symbols),
                'results_count': len(ml_results)
            }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
            expires_at = (datetime.now() + timedelta(hours=expires_in_hours)).isoformat()
            
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            cache_data_json = json.dumps(cache_data, default=str)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            cursor.execute("""
                INSERT OR REPLACE INTO ml_cache (cache_key, cache_data, expires_at, created_at)
                VALUES (?, ?, ?, ?)
            """, (cache_key, cache_data_json, expires_at, datetime.now().isoformat()))
            
            conn.commit()
            conn.close()
            
            logger.info(f"üíæ [CACHE] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î: {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤, –∫–ª—é—á: {cache_key}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [CACHE] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return False
    
    def get_ml_results(self, symbols: List[str], min_volume: float, min_avg_volume: float) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫—ç—à–∞.
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
            min_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            min_avg_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã/—É—Å—Ç–∞—Ä–µ–ª–∏
        """
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞
            cache_key = self._generate_cache_key(symbols, min_volume, min_avg_volume)
            
            # –ò—â–µ–º –≤ –ë–î
            cursor.execute("""
                SELECT cache_data, expires_at, created_at FROM ml_cache 
                WHERE cache_key = ? AND expires_at > ?
            """, (cache_key, datetime.now().isoformat()))
            
            row = cursor.fetchone()
            conn.close()
            
            if row:
                cache_data_json, expires_at, created_at = row
                cache_data = json.loads(cache_data_json)
                
                logger.info(f"‚úÖ [CACHE] –ù–∞–π–¥–µ–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {cache_data['symbols_count']} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"üìÖ [CACHE] –°–æ–∑–¥–∞–Ω–æ: {created_at}, –∏—Å—Ç–µ–∫–∞–µ—Ç: {expires_at}")
                
                return cache_data
            else:
                logger.debug(f"üîç [CACHE] –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è –∫–ª—é—á–∞: {cache_key}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå [CACHE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return None
    
    def is_cache_valid(self, symbols: List[str], min_volume: float, min_avg_volume: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∞–ª–∏–¥–µ–Ω –ª–∏ –∫—ç—à.
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
            min_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            min_avg_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –∫—ç—à –≤–∞–ª–∏–¥–µ–Ω –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª
        """
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            cache_key = self._generate_cache_key(symbols, min_volume, min_avg_volume)
            
            cursor.execute("""
                SELECT COUNT(*) FROM ml_cache 
                WHERE cache_key = ? AND expires_at > ?
            """, (cache_key, datetime.now().isoformat()))
            
            count = cursor.fetchone()[0]
            conn.close()
            
            is_valid = count > 0
            logger.debug(f"üîç [CACHE] –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤: {is_valid}")
            return is_valid
            
        except Exception as e:
            logger.error(f"‚ùå [CACHE] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞: {e}")
            return False
    
    def clear_cache(self, symbols: Optional[List[str]] = None, 
                   min_volume: Optional[float] = None, 
                   min_avg_volume: Optional[float] = None) -> int:
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à.
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ (–µ—Å–ª–∏ None, –æ—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à)
            min_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º (–µ—Å–ª–∏ None, –æ—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à)
            min_avg_volume: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º (–µ—Å–ª–∏ None, –æ—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à)
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            if symbols is not None and min_volume is not None and min_avg_volume is not None:
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫—ç—à
                cache_key = self._generate_cache_key(symbols, min_volume, min_avg_volume)
                cursor.execute("DELETE FROM ml_cache WHERE cache_key = ?", (cache_key,))
                logger.info(f"üóëÔ∏è [CACHE] –û—á–∏—â–µ–Ω –∫—ç—à –¥–ª—è –∫–ª—é—á–∞: {cache_key}")
            else:
                # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                cursor.execute("DELETE FROM ml_cache WHERE cache_key LIKE ?", (f"{self.cache_key_prefix}%",))
                logger.info("üóëÔ∏è [CACHE] –û—á–∏—â–µ–Ω –≤–µ—Å—å –∫—ç—à –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            
            deleted_count = cursor.rowcount
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ [CACHE] –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞")
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå [CACHE] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
            return 0
    
    def clear_expired_cache(self) -> int:
        """–û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            cursor.execute("DELETE FROM ml_cache WHERE expires_at < ?", (datetime.now().isoformat(),))
            deleted_count = cursor.rowcount
            conn.commit()
            conn.close()
            
            logger.info(f"üßπ [CACHE] –û—á–∏—â–µ–Ω–æ {deleted_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞")
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå [CACHE] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞: {e}")
            return 0
    
    def get_cache_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∫—ç—à–∞
        """
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("SELECT COUNT(*) FROM ml_cache WHERE cache_key LIKE ?", (f"{self.cache_key_prefix}%",))
            total_entries = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM ml_cache WHERE cache_key LIKE ? AND expires_at > ?", 
                         (f"{self.cache_key_prefix}%", datetime.now().isoformat()))
            valid_entries = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM ml_cache WHERE cache_key LIKE ? AND expires_at <= ?", 
                         (f"{self.cache_key_prefix}%", datetime.now().isoformat()))
            expired_entries = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å
            cursor.execute("""
                SELECT cache_key, created_at, expires_at FROM ml_cache 
                WHERE cache_key LIKE ? 
                ORDER BY created_at DESC LIMIT 1
            """, (f"{self.cache_key_prefix}%",))
            
            last_entry = cursor.fetchone()
            conn.close()
            
            status = {
                'total_entries': total_entries,
                'valid_entries': valid_entries,
                'expired_entries': expired_entries,
                'cache_duration_hours': self.cache_duration.total_seconds() / 3600,
                'last_entry': {
                    'key': last_entry[0] if last_entry else None,
                    'created_at': last_entry[1] if last_entry else None,
                    'expires_at': last_entry[2] if last_entry else None
                } if last_entry else None
            }
            
            logger.info(f"üìä [CACHE] –°—Ç–∞—Ç—É—Å –∫—ç—à–∞: {valid_entries}/{total_entries} –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            return status
            
        except Exception as e:
            logger.error(f"‚ùå [CACHE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞: {e}")
            return {}
    
    def inspect_cache(self) -> Dict[str, Any]:
        """–ò–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞.
        
        Returns:
            –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
        """
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞
            cursor.execute("""
                SELECT cache_key, created_at, expires_at, cache_data FROM ml_cache 
                WHERE cache_key LIKE ? 
                ORDER BY created_at DESC
            """, (f"{self.cache_key_prefix}%",))
            
            entries = cursor.fetchall()
            conn.close()
            
            cache_info = {
                'total_entries': len(entries),
                'entries': []
            }
            
            for entry in entries:
                cache_key, created_at, expires_at, cache_data_json = entry
                
                try:
                    cache_data = json.loads(cache_data_json)
                    entry_info = {
                        'key': cache_key,
                        'created_at': created_at,
                        'expires_at': expires_at,
                        'is_expired': datetime.fromisoformat(expires_at) < datetime.now(),
                        'symbols_count': cache_data.get('symbols_count', 0),
                        'results_count': cache_data.get('results_count', 0),
                        'symbols': cache_data.get('symbols', [])[:5],  # –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
                        'min_volume': cache_data.get('min_volume', 0),
                        'min_avg_volume': cache_data.get('min_avg_volume', 0)
                    }
                    cache_info['entries'].append(entry_info)
                except json.JSONDecodeError:
                    logger.warning(f"‚ö†Ô∏è [CACHE] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞: {cache_key}")
            
            logger.info(f"üîç [CACHE] –ò–Ω—Å–ø–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(entries)} –∑–∞–ø–∏—Å–µ–π")
            return cache_info
            
        except Exception as e:
            logger.error(f"‚ùå [CACHE] –û—à–∏–±–∫–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –∫—ç—à–∞: {e}")
            return {}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞
cascade_ml_cache = CascadeMLCacheManager()
