#!/usr/bin/env python3
"""
Check Database Status.
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü.
"""

import sqlite3
import os
from datetime import datetime

def check_database_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    db_path = "stock_data.db"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        print("=" * 50)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
        print("üìä –¢–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö:")
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE 'data_%'")
        data_tables = cursor.fetchall()
        
        if data_tables:
            for table in data_tables:
                table_name = table[0]
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                print(f"   - {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
        else:
            print("   ‚ùå –¢–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print()
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
        print("üè¢ –ö–æ–º–ø–∞–Ω–∏–∏:")
        cursor.execute("SELECT COUNT(*) FROM companies")
        companies_count = cursor.fetchone()[0]
        print(f"   - –í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π: {companies_count}")
        
        if companies_count > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            cursor.execute("SELECT contract_code, asset_type FROM companies LIMIT 10")
            examples = cursor.fetchall()
            print("   - –ü—Ä–∏–º–µ—Ä—ã:")
            for contract_code, asset_type in examples:
                print(f"     * {contract_code} ({asset_type or 'unknown'})")
        
        print()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã companies
        print("üîß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã companies:")
        cursor.execute("PRAGMA table_info(companies)")
        columns = cursor.fetchall()
        for col in columns:
            print(f"   - {col[1]} ({col[2]})")
        
        print()
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        print("‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        for table_name, _ in data_tables:
            try:
                cursor.execute(f"SELECT MAX(datetime) FROM {table_name}")
                last_update = cursor.fetchone()[0]
                if last_update:
                    print(f"   - {table_name}: {last_update}")
                else:
                    print(f"   - {table_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                print(f"   - {table_name}: –æ—à–∏–±–∫–∞ - {e}")
        
        print()
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–æ–≤
        print("üìà –¢–∏–ø—ã –∞–∫—Ç–∏–≤–æ–≤:")
        cursor.execute("""
            SELECT 
                COALESCE(asset_type, 'unknown') as asset_type,
                COUNT(*) as count
            FROM companies 
            GROUP BY asset_type
            ORDER BY count DESC
        """)
        asset_stats = cursor.fetchall()
        
        for asset_type, count in asset_stats:
            print(f"   - {asset_type}: {count}")
        
        print()
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    check_database_status()
