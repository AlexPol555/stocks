#!/usr/bin/env python3
"""
Data 1Hour Quality Test.
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ data_1hour.
"""

import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_data_1hour_quality():
    """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ data_1hour."""
    print("üîç –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ data_1hour...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("stock_data.db")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã data_1hour
        print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã data_1hour...")
        query = """
        SELECT * FROM data_1hour 
        ORDER BY symbol, time
        """
        
        df = pd.read_sql_query(query, conn)
        
        if df.empty:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ data_1hour –ø—É—Å—Ç–∞!")
            return
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
        expected_columns = ['id', 'symbol', 'time', 'open', 'high', 'low', 'close', 'volume', 'created_at']
        actual_columns = df.columns.tolist()
        
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {expected_columns}")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {actual_columns}")
        
        missing_columns = set(expected_columns) - set(actual_columns)
        extra_columns = set(actual_columns) - set(expected_columns)
        
        if missing_columns:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        else:
            print("   ‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
        if extra_columns:
            print(f"   ‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {extra_columns}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        print("\nüîç 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   ID: {df['id'].dtype}")
        print(f"   Symbol: {df['symbol'].dtype}")
        print(f"   Time: {df['time'].dtype}")
        print(f"   Open: {df['open'].dtype}")
        print(f"   High: {df['high'].dtype}")
        print(f"   Low: {df['low'].dtype}")
        print(f"   Close: {df['close'].dtype}")
        print(f"   Volume: {df['volume'].dtype}")
        print(f"   Created_at: {df['created_at'].dtype}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        print("\nüîç 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        missing_data = df.isnull().sum()
        for col, missing_count in missing_data.items():
            if missing_count > 0:
                print(f"   ‚ùå {col}: {missing_count} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
            else:
                print(f"   ‚úÖ {col}: –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID
        print("\nüîç 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID:")
        duplicate_ids = df['id'].duplicated().sum()
        if duplicate_ids > 0:
            print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ {duplicate_ids} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID")
        else:
            print("   ‚úÖ –í—Å–µ ID —É–Ω–∏–∫–∞–ª—å–Ω—ã")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
        print("\nüîç 5. –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤:")
        unique_symbols = df['symbol'].unique()
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(unique_symbols)}")
        print(f"   –°–∏–º–≤–æ–ª—ã: {sorted(unique_symbols)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö companies
        companies_query = "SELECT DISTINCT ticker FROM companies WHERE asset_type = 'shares'"
        companies_df = pd.read_sql_query(companies_query, conn)
        companies_symbols = set(companies_df['ticker'].tolist())
        data_symbols = set(unique_symbols)
        
        unknown_symbols = data_symbols - companies_symbols
        if unknown_symbols:
            print(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö: {unknown_symbols}")
        else:
            print("   ‚úÖ –í—Å–µ —Å–∏–º–≤–æ–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö companies")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        print("\nüîç 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤:")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ datetime
        df['time'] = pd.to_datetime(df['time'])
        
        for symbol in unique_symbols[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
            symbol_data = df[df['symbol'] == symbol].sort_values('time')
            
            print(f"\n   üìà –°–∏–º–≤–æ–ª {symbol}:")
            print(f"      –ó–∞–ø–∏—Å–µ–π: {len(symbol_data)}")
            
            if len(symbol_data) > 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
                time_diffs = symbol_data['time'].diff().dropna()
                expected_diff = pd.Timedelta(hours=1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –±–ª–∏–∑–∫–∏ –∫ 1 —á–∞—Å—É (–¥–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
                valid_intervals = (time_diffs >= pd.Timedelta(minutes=55)) & (time_diffs <= pd.Timedelta(minutes=65))
                invalid_intervals = (~valid_intervals).sum()
                
                if invalid_intervals > 0:
                    print(f"      ‚ö†Ô∏è {invalid_intervals} –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–∏")
                else:
                    print(f"      ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
                time_range = symbol_data['time'].max() - symbol_data['time'].min()
                print(f"      –ü–µ—Ä–∏–æ–¥: {symbol_data['time'].min()} - {symbol_data['time'].max()}")
                print(f"      –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time_range}")
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüîç 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ high >= low
        invalid_hl = (df['high'] < df['low']).sum()
        if invalid_hl > 0:
            print(f"   ‚ùå {invalid_hl} –∑–∞–ø–∏—Å–µ–π –≥–¥–µ high < low")
        else:
            print("   ‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏: high >= low")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ high >= open –∏ high >= close
        invalid_ho = (df['high'] < df['open']).sum()
        invalid_hc = (df['high'] < df['close']).sum()
        if invalid_ho > 0:
            print(f"   ‚ùå {invalid_ho} –∑–∞–ø–∏—Å–µ–π –≥–¥–µ high < open")
        if invalid_hc > 0:
            print(f"   ‚ùå {invalid_hc} –∑–∞–ø–∏—Å–µ–π –≥–¥–µ high < close")
        if invalid_ho == 0 and invalid_hc == 0:
            print("   ‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏: high >= open –∏ high >= close")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ low <= open –∏ low <= close
        invalid_lo = (df['low'] > df['open']).sum()
        invalid_lc = (df['low'] > df['close']).sum()
        if invalid_lo > 0:
            print(f"   ‚ùå {invalid_lo} –∑–∞–ø–∏—Å–µ–π –≥–¥–µ low > open")
        if invalid_lc > 0:
            print(f"   ‚ùå {invalid_lc} –∑–∞–ø–∏—Å–µ–π –≥–¥–µ low > close")
        if invalid_lo == 0 and invalid_lc == 0:
            print("   ‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏: low <= open –∏ low <= close")
        
        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–æ–≤
        print("\nüîç 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–æ–≤:")
        negative_volume = (df['volume'] < 0).sum()
        if negative_volume > 0:
            print(f"   ‚ùå {negative_volume} –∑–∞–ø–∏—Å–µ–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –æ–±—ä–µ–º–æ–º")
        else:
            print("   ‚úÖ –í—Å–µ –æ–±—ä–µ–º—ã –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ")
        
        # 9. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        print("\nüîç 9. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
        symbol_stats = df.groupby('symbol').agg({
            'id': 'count',
            'time': ['min', 'max'],
            'open': ['min', 'max', 'mean'],
            'close': ['min', 'max', 'mean'],
            'volume': ['min', 'max', 'mean', 'sum']
        }).round(2)
        
        print(symbol_stats.head(10))
        
        # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        print("\nüîç 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:")
        df['created_at'] = pd.to_datetime(df['created_at'])
        latest_created = df['created_at'].max()
        oldest_created = df['created_at'].min()
        
        print(f"   –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å: {oldest_created}")
        print(f"   –°–∞–º–∞—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {latest_created}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ
        now = datetime.now()
        data_age = now - latest_created
        if data_age > timedelta(days=1):
            print(f"   ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –Ω–∞ {data_age}")
        else:
            print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ (–≤–æ–∑—Ä–∞—Å—Ç: {data_age})")
        
        # 11. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        print("\nüéØ 11. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:")
        
        quality_score = 0
        max_score = 10
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞
        if len(missing_columns) == 0:
            quality_score += 1
        if missing_data.sum() == 0:
            quality_score += 1
        if duplicate_ids == 0:
            quality_score += 1
        if len(unknown_symbols) == 0:
            quality_score += 1
        if invalid_hl == 0:
            quality_score += 1
        if invalid_ho == 0 and invalid_hc == 0:
            quality_score += 1
        if invalid_lo == 0 and invalid_lc == 0:
            quality_score += 1
        if negative_volume == 0:
            quality_score += 1
        if data_age <= timedelta(days=1):
            quality_score += 1
        if len(df) > 0:
            quality_score += 1
        
        quality_percentage = (quality_score / max_score) * 100
        
        print(f"   –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score}/{max_score} ({quality_percentage:.1f}%)")
        
        if quality_percentage >= 90:
            print("   üèÜ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö!")
        elif quality_percentage >= 80:
            print("   ‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")
        elif quality_percentage >= 70:
            print("   ‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("   ‚ùå –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")
        
        conn.close()
        print("\n‚úÖ –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_data_1hour_quality()
