#!/usr/bin/env python3
"""
Shares Integration Script.
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ü–∏–π (shares) –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É.
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from core.shares_integration import integrate_shares_system

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ü–∏–π."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ü–∏–π (shares) –≤ —Å–∏—Å—Ç–µ–º—É...")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv('TINKOFF_API_KEY')
    if not api_key:
        print("‚ùå –û—à–∏–±–∫–∞: TINKOFF_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export TINKOFF_API_KEY='your_api_key_here'")
        print("   –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .streamlit/secrets.toml")
        return 1
    
    try:
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –∞–∫—Ü–∏–∏
        integrator = integrate_shares_system(api_key)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        shares_count = len(integrator.get_shares_only())
        futures_count = len(integrator.get_futures_only())
        total_count = len(integrator.get_all_assets())
        
        print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –ê–∫—Ü–∏–∏ (shares): {shares_count}")
        print(f"   - –§—å—é—á–µ—Ä—Å—ã (futures): {futures_count}")
        print(f"   - –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤: {total_count}")
        
        print("\nüéØ –ß—Ç–æ –¥–∞–ª—å—à–µ:")
        print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Streamlit")
        print("   2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É '‚è∞ Multi-Timeframe'")
        print("   3. –ù–∞–∂–º–∏—Ç–µ '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ü–∏–∏' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        print("   4. –ù–∞—á–Ω–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤")
        
        return 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ü–∏–π: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ü–∏–π: {e}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
