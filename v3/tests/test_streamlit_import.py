#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Streamlit
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç Streamlit –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
"""

import sys


def test_streamlit_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Streamlit."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ Streamlit...")
    
    try:
        import streamlit as st
        print(f"‚úÖ Streamlit –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: –≤–µ—Ä—Å–∏—è {st.__version__}")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Streamlit: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_streamlit_components():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Streamlit."""
    print("\nüß© –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Streamlit...")
    
    try:
        import streamlit as st
        from streamlit import session_state
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Streamlit –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        # (–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º Streamlit, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç)
        print("‚úÖ Streamlit –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Streamlit: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_pandas_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ pandas."""
    print("\nüêº –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ pandas...")
    
    try:
        import pandas as pd
        print(f"‚úÖ Pandas –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: –≤–µ—Ä—Å–∏—è {pd.__version__}")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pandas: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_numpy_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ numpy."""
    print("\nüî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ numpy...")
    
    try:
        import numpy as np
        print(f"‚úÖ NumPy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: –≤–µ—Ä—Å–∏—è {np.__version__}")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ numpy: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_yaml_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ yaml."""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ yaml...")
    
    try:
        import yaml
        print("‚úÖ PyYAML –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ yaml: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_optional_imports():
    """–¢–µ—Å—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤."""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    optional_modules = [
        ("sentence_transformers", "Sentence Transformers"),
        ("rapidfuzz", "RapidFuzz"),
        ("pymorphy3", "PyMorphy3"),
        ("razdel", "Razdel"),
        ("spacy", "spaCy"),
        ("faiss", "FAISS"),
    ]
    
    success_count = 0
    total_count = len(optional_modules)
    
    for module_name, description in optional_modules:
        try:
            __import__(module_name)
            print(f"‚úÖ {description} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            success_count += 1
        except ImportError:
            print(f"‚ö†Ô∏è  {description} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {description}: {e}")
    
    print(f"\nüìä –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏: {success_count}/{total_count} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def test_project_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞."""
    print("\nüèóÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞...")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        import core
        from core.database import get_database_path
        from core.news import fetch_recent_articles, build_summary
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ú–æ–¥—É–ª–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞
        from core.news_pipeline import NewsPipelineRepository
        from core.news_pipeline.models import NewsItem, TickerRecord
        print("‚úÖ –ú–æ–¥—É–ª–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ú–æ–¥—É–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        import pages
        print("‚úÖ –ú–æ–¥—É–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_streamlit_pages():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü Streamlit."""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü Streamlit...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞)
        import pages
        print("‚úÖ –ú–æ–¥—É–ª—å pages –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
        import os
        pages_dir = "pages"
        if os.path.exists(pages_dir):
            page_files = [f for f in os.listdir(pages_dir) if f.endswith('.py')]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(page_files)} —Å—Ç—Ä–∞–Ω–∏—Ü Streamlit")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
            for page_file in page_files:
                print(f"   - {page_file}")
        else:
            print("‚ö†Ô∏è  –ü–∞–ø–∫–∞ pages –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Streamlit")
    print("=" * 40)
    
    tests = [
        ("Streamlit", test_streamlit_import),
        ("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Streamlit", test_streamlit_components),
        ("Pandas", test_pandas_import),
        ("NumPy", test_numpy_import),
        ("YAML", test_yaml_import),
        ("–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏", test_optional_imports),
        ("–ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞", test_project_imports),
        ("–°—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit", test_streamlit_pages),
    ]
    
    success_count = 0
    total_count = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        if test_func():
            success_count += 1
    
    print("\n" + "=" * 40)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ Streamlit –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return 0
    else:
        print(f"‚ö†Ô∏è  {total_count - success_count} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return 1


if __name__ == "__main__":
    sys.exit(main())
