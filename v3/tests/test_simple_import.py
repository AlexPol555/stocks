#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys


def test_basic_imports():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        import sqlite3
        import json
        import logging
        import tempfile
        from pathlib import Path
        from typing import List, Dict, Any, Optional
        print("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
        import core
        print("‚úÖ –ú–æ–¥—É–ª—å core –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ú–æ–¥—É–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from core.database import get_database_path
        print("‚úÖ –ú–æ–¥—É–ª—å database –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ú–æ–¥—É–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        from core.news import fetch_recent_articles, build_summary
        print("‚úÖ –ú–æ–¥—É–ª—å news –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ú–æ–¥—É–ª–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞
        from core.news_pipeline import NewsPipelineRepository
        print("‚úÖ –ú–æ–¥—É–ª—å news_pipeline –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from core.database import get_database_path
        import sqlite3
        
        db_path = get_database_path()
        conn = sqlite3.connect(db_path)
        cursor = conn.execute("SELECT 1")
        result = cursor.fetchone()
        conn.close()
        
        if result:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def test_news_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π."""
    print("\nüì∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    try:
        from core.news import fetch_recent_articles, build_summary
        from datetime import datetime
        
        # –¢–µ—Å—Ç fetch_recent_articles
        articles = fetch_recent_articles(limit=1)
        print(f"‚úÖ fetch_recent_articles —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(articles)} —Å—Ç–∞—Ç–µ–π")
        
        # –¢–µ—Å—Ç build_summary
        today = datetime.now()
        summary = build_summary(today)
        print(f"‚úÖ build_summary —Ä–∞–±–æ—Ç–∞–µ—Ç: {summary['date']}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return False


def test_pipeline_repository():
    """–¢–µ—Å—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞."""
    print("\nüè™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    try:
        from core.news_pipeline import NewsPipelineRepository
        
        repository = NewsPipelineRepository()
        print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω")
        
        with repository.connect() as conn:
            cursor = conn.execute("SELECT 1")
            result = cursor.fetchone()
        
        if result:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞")
    print("=" * 40)
    
    tests = [
        ("–ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã", test_basic_imports),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection),
        ("–§—É–Ω–∫—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π", test_news_functions),
        ("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–∞–π–ø–ª–∞–π–Ω–∞", test_pipeline_repository),
    ]
    
    success_count = 0
    total_count = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        if test_func():
            success_count += 1
    
    print("\n" + "=" * 40)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print(f"‚ö†Ô∏è  {total_count - success_count} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return 1


if __name__ == "__main__":
    sys.exit(main())
