#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ News Pipeline
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import sqlite3
import tempfile
from pathlib import Path
from typing import List, Dict, Any

from core.database import get_database_path
from core.news import fetch_recent_articles, build_summary, _supports_news_pipeline
from core.news_pipeline.repository import NewsPipelineRepository


def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db_path = get_database_path()
        conn = sqlite3.connect(db_path)
        cursor = conn.execute("SELECT 1")
        result = cursor.fetchone()
        conn.close()
        
        if result:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def test_news_pipeline_support():
    """–¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    try:
        db_path = get_database_path()
        conn = sqlite3.connect(db_path)
        has_support = _supports_news_pipeline(conn)
        conn.close()
        
        if has_support:
            print("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return True
        else:
            print("‚ö†Ô∏è  –ü–∞–π–ø–ª–∞–π–Ω –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return False


def test_fetch_recent_articles():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ fetch_recent_articles."""
    print("\nüì∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ fetch_recent_articles...")
    
    try:
        articles = fetch_recent_articles(limit=5)
        
        if articles:
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—å–∏
            sample = articles[0]
            print(f"   –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—å–∏:")
            print(f"   - –ó–∞–≥–æ–ª–æ–≤–æ–∫: {sample['title'][:50]}...")
            print(f"   - –¢–∏–∫–µ—Ä—ã: {sample.get('tickers', [])}")
            print(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫: {sample.get('source', 'Unknown')}")
            
            return True
        else:
            print("‚ö†Ô∏è  –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π: {e}")
        return False


def test_build_summary():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ build_summary."""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ build_summary...")
    
    try:
        from datetime import datetime
        today = datetime.now()
        summary = build_summary(today)
        
        if summary:
            print("‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"   - –î–∞—Ç–∞: {summary['date']}")
            print(f"   - –°—Ç–∞—Ç–µ–π: {summary['articles_count']}")
            print(f"   - –¢–∏–∫–µ—Ä–æ–≤: {summary['tickers_count']}")
            print(f"   - –¢–∏–∫–µ—Ä—ã: {summary['tickers']}")
            print(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫: {summary['source']}")
            return True
        else:
            print("‚ö†Ô∏è  –°–≤–æ–¥–∫–∞ –ø—É—Å—Ç–∞—è")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
        return False


def test_database_tables():
    """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db_path = get_database_path()
        conn = sqlite3.connect(db_path)
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        conn.close()
        
        required_tables = ['articles', 'sources', 'tickers', 'news_tickers']
        missing_tables = [table for table in required_tables if table not in tables]
        
        if not missing_tables:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            print(f"   –¢–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
            return True
        else:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
            print(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False


def test_news_tickers_data():
    """–¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ news_tickers."""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ news_tickers...")
    
    try:
        db_path = get_database_path()
        conn = sqlite3.connect(db_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='news_tickers'")
        if not cursor.fetchone():
            print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ news_tickers –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            conn.close()
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor = conn.execute("SELECT COUNT(*) FROM news_tickers")
        total_count = cursor.fetchone()[0]
        
        cursor = conn.execute("SELECT COUNT(*) FROM news_tickers WHERE confirmed = 1")
        confirmed_count = cursor.fetchone()[0]
        
        cursor = conn.execute("SELECT COUNT(*) FROM news_tickers WHERE confirmed = 0")
        pending_count = cursor.fetchone()[0]
        
        conn.close()
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤ news_tickers:")
        print(f"   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count}")
        print(f"   - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {confirmed_count}")
        print(f"   - –û–∂–∏–¥–∞—é—â–∏—Ö: {pending_count}")
        
        return total_count > 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö news_tickers: {e}")
        return False


def test_repository_operations():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    print("\nüè™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    
    try:
        repository = NewsPipelineRepository()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        with repository.connect() as conn:
            cursor = conn.execute("SELECT 1")
            result = cursor.fetchone()
        
        if result:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            candidates = repository.fetch_pending_candidates(limit=5)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ News Pipeline")
    print("=" * 50)
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection),
        ("–¢–∞–±–ª–∏—Ü—ã –ë–î", test_database_tables),
        ("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞", test_news_pipeline_support),
        ("–î–∞–Ω–Ω—ã–µ news_tickers", test_news_tickers_data),
        ("–û–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", test_repository_operations),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π", test_fetch_recent_articles),
        ("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏", test_build_summary),
    ]
    
    success_count = 0
    total_count = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        if test_func():
            success_count += 1
    
    print("\n" + "=" * 50)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print(f"‚ö†Ô∏è  {total_count - success_count} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return 1


if __name__ == "__main__":
    import sys
    sys.exit(main())
